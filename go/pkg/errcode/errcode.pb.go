// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: berty/errcode.proto

package errcode

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrCode int32

const (
	Undefined                      ErrCode = 0
	TODO                           ErrCode = 666
	ErrNotImplemented              ErrCode = 777
	ErrInternal                    ErrCode = 888
	ErrInvalidInput                ErrCode = 100
	ErrInvalidRange                ErrCode = 101
	ErrMissingInput                ErrCode = 102
	ErrSerialization               ErrCode = 103
	ErrDeserialization             ErrCode = 104
	ErrStreamRead                  ErrCode = 105
	ErrStreamWrite                 ErrCode = 106
	ErrStreamTransform             ErrCode = 110
	ErrStreamSendAndClose          ErrCode = 111
	ErrStreamHeaderWrite           ErrCode = 112
	ErrStreamHeaderRead            ErrCode = 115
	ErrStreamSink                  ErrCode = 113
	ErrStreamCloseAndRecv          ErrCode = 114
	ErrMissingMapKey               ErrCode = 107
	ErrDBWrite                     ErrCode = 108
	ErrDBRead                      ErrCode = 109
	ErrDBDestroy                   ErrCode = 120
	ErrDBMigrate                   ErrCode = 121
	ErrDBReplay                    ErrCode = 122
	ErrDBRestore                   ErrCode = 123
	ErrDBOpen                      ErrCode = 124
	ErrDBClose                     ErrCode = 125
	ErrCryptoRandomGeneration      ErrCode = 200
	ErrCryptoKeyGeneration         ErrCode = 201
	ErrCryptoNonceGeneration       ErrCode = 202
	ErrCryptoSignature             ErrCode = 203
	ErrCryptoSignatureVerification ErrCode = 204
	ErrCryptoDecrypt               ErrCode = 205
	ErrCryptoDecryptPayload        ErrCode = 206
	ErrCryptoEncrypt               ErrCode = 207
	ErrCryptoKeyConversion         ErrCode = 208
	ErrCryptoCipherInit            ErrCode = 209
	ErrCryptoKeyDerivation         ErrCode = 210
	ErrMap                         ErrCode = 300
	ErrForEach                     ErrCode = 301
	ErrKeystoreGet                 ErrCode = 400
	ErrKeystorePut                 ErrCode = 401
	ErrNotFound                    ErrCode = 404
	ErrIPFSAdd                     ErrCode = 1050
	ErrIPFSGet                     ErrCode = 1051
	ErrIPFSInit                    ErrCode = 1052
	ErrIPFSSetupConfig             ErrCode = 1053
	ErrIPFSSetupRepo               ErrCode = 1054
	ErrIPFSSetupHost               ErrCode = 1055
	// Event errors
	ErrEventListMetadata                   ErrCode = 1400
	ErrEventListMessage                    ErrCode = 1401
	ErrBridgeInterrupted                   ErrCode = 1600
	ErrBridgeNotRunning                    ErrCode = 1601
	ErrMessengerInvalidDeepLink            ErrCode = 2000
	ErrMessengerDeepLinkRequiresPassphrase ErrCode = 2001
	ErrMessengerDeepLinkInvalidPassphrase  ErrCode = 2002
	ErrMessengerStreamEvent                ErrCode = 2003
	ErrMessengerContactMetadataUnmarshal   ErrCode = 2004
	ErrDBEntryAlreadyExists                ErrCode = 2100
	ErrDBAddConversation                   ErrCode = 2101
	ErrDBAddContactRequestOutgoingSent     ErrCode = 2102
	ErrDBAddContactRequestOutgoingEnqueud  ErrCode = 2103
	ErrDBAddContactRequestIncomingReceived ErrCode = 2104
	ErrDBAddContactRequestIncomingAccepted ErrCode = 2105
	ErrDBAddGroupMemberDeviceAdded         ErrCode = 2106
	ErrDBMultipleRecords                   ErrCode = 2107
	ErrReplayProcessGroupMetadata          ErrCode = 2200
	ErrReplayProcessGroupMessage           ErrCode = 2201
	ErrAttachmentPrepare                   ErrCode = 2300
	ErrAttachmentRetrieve                  ErrCode = 2301
	ErrProtocolSend                        ErrCode = 2302
	ErrProtocolEventUnmarshal              ErrCode = 2303
	ErrProtocolGetGroupInfo                ErrCode = 2304
	// Test Error
	ErrTestEcho                                          ErrCode = 2401
	ErrTestEchoRecv                                      ErrCode = 2402
	ErrTestEchoSend                                      ErrCode = 2403
	ErrServicesAuth                                      ErrCode = 4000
	ErrServicesAuthNotInitialized                        ErrCode = 4001
	ErrServicesAuthWrongState                            ErrCode = 4002
	ErrServicesAuthInvalidResponse                       ErrCode = 4003
	ErrServicesAuthServer                                ErrCode = 4004
	ErrServicesAuthCodeChallenge                         ErrCode = 4005
	ErrServicesAuthServiceInvalidToken                   ErrCode = 4006
	ErrServicesAuthServiceNotSupported                   ErrCode = 4007
	ErrServicesAuthUnknownToken                          ErrCode = 4008
	ErrServicesAuthInvalidURL                            ErrCode = 4009
	ErrCLINoTermcaps                                     ErrCode = 3001
	ErrServicesDirectory                                 ErrCode = 4200
	ErrServicesDirectoryInvalidVerifiedCredentialSubject ErrCode = 4201
	ErrServicesDirectoryExistingRecordNotFound           ErrCode = 4202
	ErrServicesDirectoryRecordLockedAndCantBeReplaced    ErrCode = 4203
	ErrServicesDirectoryExplicitReplaceFlagRequired      ErrCode = 4204
	ErrServicesDirectoryInvalidVerifiedCredential        ErrCode = 4205
	ErrServicesDirectoryExpiredVerifiedCredential        ErrCode = 4206
	ErrServicesDirectoryInvalidVerifiedCredentialID      ErrCode = 4207
	ErrBertyAccount                                      ErrCode = 5000
	ErrBertyAccountNoIDSpecified                         ErrCode = 5001
	ErrBertyAccountAlreadyOpened                         ErrCode = 5002
	ErrBertyAccountInvalidIDFormat                       ErrCode = 5003
	ErrBertyAccountLoggerDecorator                       ErrCode = 5004
	ErrBertyAccountGRPCClient                            ErrCode = 5005
	ErrBertyAccountOpenAccount                           ErrCode = 5006
	ErrBertyAccountDataNotFound                          ErrCode = 5007
	ErrBertyAccountMetadataUpdate                        ErrCode = 5008
	ErrBertyAccountManagerOpen                           ErrCode = 5009
	ErrBertyAccountManagerClose                          ErrCode = 5010
	ErrBertyAccountInvalidCLIArgs                        ErrCode = 5011
	ErrBertyAccountFSError                               ErrCode = 5012
	ErrBertyAccountAlreadyExists                         ErrCode = 5013
	ErrBertyAccountNoBackupSpecified                     ErrCode = 5014
	ErrBertyAccountIDGenFailed                           ErrCode = 5015
	ErrBertyAccountCreationFailed                        ErrCode = 5016
	ErrBertyAccountUpdateFailed                          ErrCode = 5017
	ErrAppStorageNotSupported                            ErrCode = 5018
	ErrPush                                              ErrCode = 6000
	ErrPushWrongAccount                                  ErrCode = 6001
	ErrPushUnableToDecrypt                               ErrCode = 6002
	ErrPushInvalidPayload                                ErrCode = 6003
	ErrPushInvalidServerConfig                           ErrCode = 6004
	ErrPushMissingBundleID                               ErrCode = 6005
	ErrPushUnknownDestination                            ErrCode = 6006
	ErrPushProvider                                      ErrCode = 6007
	ErrPushUnknownProvider                               ErrCode = 6008
	ErrNoProvidersConfigured                             ErrCode = 6009
	ErrInvalidPrivateKey                                 ErrCode = 6010
	ErrPushServerNotFound                                ErrCode = 6011
)

var ErrCode_name = map[int32]string{
	0:    "Undefined",
	666:  "TODO",
	777:  "ErrNotImplemented",
	888:  "ErrInternal",
	100:  "ErrInvalidInput",
	101:  "ErrInvalidRange",
	102:  "ErrMissingInput",
	103:  "ErrSerialization",
	104:  "ErrDeserialization",
	105:  "ErrStreamRead",
	106:  "ErrStreamWrite",
	110:  "ErrStreamTransform",
	111:  "ErrStreamSendAndClose",
	112:  "ErrStreamHeaderWrite",
	115:  "ErrStreamHeaderRead",
	113:  "ErrStreamSink",
	114:  "ErrStreamCloseAndRecv",
	107:  "ErrMissingMapKey",
	108:  "ErrDBWrite",
	109:  "ErrDBRead",
	120:  "ErrDBDestroy",
	121:  "ErrDBMigrate",
	122:  "ErrDBReplay",
	123:  "ErrDBRestore",
	124:  "ErrDBOpen",
	125:  "ErrDBClose",
	200:  "ErrCryptoRandomGeneration",
	201:  "ErrCryptoKeyGeneration",
	202:  "ErrCryptoNonceGeneration",
	203:  "ErrCryptoSignature",
	204:  "ErrCryptoSignatureVerification",
	205:  "ErrCryptoDecrypt",
	206:  "ErrCryptoDecryptPayload",
	207:  "ErrCryptoEncrypt",
	208:  "ErrCryptoKeyConversion",
	209:  "ErrCryptoCipherInit",
	210:  "ErrCryptoKeyDerivation",
	300:  "ErrMap",
	301:  "ErrForEach",
	400:  "ErrKeystoreGet",
	401:  "ErrKeystorePut",
	404:  "ErrNotFound",
	1050: "ErrIPFSAdd",
	1051: "ErrIPFSGet",
	1052: "ErrIPFSInit",
	1053: "ErrIPFSSetupConfig",
	1054: "ErrIPFSSetupRepo",
	1055: "ErrIPFSSetupHost",
	1400: "ErrEventListMetadata",
	1401: "ErrEventListMessage",
	1600: "ErrBridgeInterrupted",
	1601: "ErrBridgeNotRunning",
	2000: "ErrMessengerInvalidDeepLink",
	2001: "ErrMessengerDeepLinkRequiresPassphrase",
	2002: "ErrMessengerDeepLinkInvalidPassphrase",
	2003: "ErrMessengerStreamEvent",
	2004: "ErrMessengerContactMetadataUnmarshal",
	2100: "ErrDBEntryAlreadyExists",
	2101: "ErrDBAddConversation",
	2102: "ErrDBAddContactRequestOutgoingSent",
	2103: "ErrDBAddContactRequestOutgoingEnqueud",
	2104: "ErrDBAddContactRequestIncomingReceived",
	2105: "ErrDBAddContactRequestIncomingAccepted",
	2106: "ErrDBAddGroupMemberDeviceAdded",
	2107: "ErrDBMultipleRecords",
	2200: "ErrReplayProcessGroupMetadata",
	2201: "ErrReplayProcessGroupMessage",
	2300: "ErrAttachmentPrepare",
	2301: "ErrAttachmentRetrieve",
	2302: "ErrProtocolSend",
	2303: "ErrProtocolEventUnmarshal",
	2304: "ErrProtocolGetGroupInfo",
	2401: "ErrTestEcho",
	2402: "ErrTestEchoRecv",
	2403: "ErrTestEchoSend",
	4000: "ErrServicesAuth",
	4001: "ErrServicesAuthNotInitialized",
	4002: "ErrServicesAuthWrongState",
	4003: "ErrServicesAuthInvalidResponse",
	4004: "ErrServicesAuthServer",
	4005: "ErrServicesAuthCodeChallenge",
	4006: "ErrServicesAuthServiceInvalidToken",
	4007: "ErrServicesAuthServiceNotSupported",
	4008: "ErrServicesAuthUnknownToken",
	4009: "ErrServicesAuthInvalidURL",
	3001: "ErrCLINoTermcaps",
	4200: "ErrServicesDirectory",
	4201: "ErrServicesDirectoryInvalidVerifiedCredentialSubject",
	4202: "ErrServicesDirectoryExistingRecordNotFound",
	4203: "ErrServicesDirectoryRecordLockedAndCantBeReplaced",
	4204: "ErrServicesDirectoryExplicitReplaceFlagRequired",
	4205: "ErrServicesDirectoryInvalidVerifiedCredential",
	4206: "ErrServicesDirectoryExpiredVerifiedCredential",
	4207: "ErrServicesDirectoryInvalidVerifiedCredentialID",
	5000: "ErrBertyAccount",
	5001: "ErrBertyAccountNoIDSpecified",
	5002: "ErrBertyAccountAlreadyOpened",
	5003: "ErrBertyAccountInvalidIDFormat",
	5004: "ErrBertyAccountLoggerDecorator",
	5005: "ErrBertyAccountGRPCClient",
	5006: "ErrBertyAccountOpenAccount",
	5007: "ErrBertyAccountDataNotFound",
	5008: "ErrBertyAccountMetadataUpdate",
	5009: "ErrBertyAccountManagerOpen",
	5010: "ErrBertyAccountManagerClose",
	5011: "ErrBertyAccountInvalidCLIArgs",
	5012: "ErrBertyAccountFSError",
	5013: "ErrBertyAccountAlreadyExists",
	5014: "ErrBertyAccountNoBackupSpecified",
	5015: "ErrBertyAccountIDGenFailed",
	5016: "ErrBertyAccountCreationFailed",
	5017: "ErrBertyAccountUpdateFailed",
	5018: "ErrAppStorageNotSupported",
	6000: "ErrPush",
	6001: "ErrPushWrongAccount",
	6002: "ErrPushUnableToDecrypt",
	6003: "ErrPushInvalidPayload",
	6004: "ErrPushInvalidServerConfig",
	6005: "ErrPushMissingBundleID",
	6006: "ErrPushUnknownDestination",
	6007: "ErrPushProvider",
	6008: "ErrPushUnknownProvider",
	6009: "ErrNoProvidersConfigured",
	6010: "ErrInvalidPrivateKey",
	6011: "ErrPushServerNotFound",
}

var ErrCode_value = map[string]int32{
	"Undefined":                              0,
	"TODO":                                   666,
	"ErrNotImplemented":                      777,
	"ErrInternal":                            888,
	"ErrInvalidInput":                        100,
	"ErrInvalidRange":                        101,
	"ErrMissingInput":                        102,
	"ErrSerialization":                       103,
	"ErrDeserialization":                     104,
	"ErrStreamRead":                          105,
	"ErrStreamWrite":                         106,
	"ErrStreamTransform":                     110,
	"ErrStreamSendAndClose":                  111,
	"ErrStreamHeaderWrite":                   112,
	"ErrStreamHeaderRead":                    115,
	"ErrStreamSink":                          113,
	"ErrStreamCloseAndRecv":                  114,
	"ErrMissingMapKey":                       107,
	"ErrDBWrite":                             108,
	"ErrDBRead":                              109,
	"ErrDBDestroy":                           120,
	"ErrDBMigrate":                           121,
	"ErrDBReplay":                            122,
	"ErrDBRestore":                           123,
	"ErrDBOpen":                              124,
	"ErrDBClose":                             125,
	"ErrCryptoRandomGeneration":              200,
	"ErrCryptoKeyGeneration":                 201,
	"ErrCryptoNonceGeneration":               202,
	"ErrCryptoSignature":                     203,
	"ErrCryptoSignatureVerification":         204,
	"ErrCryptoDecrypt":                       205,
	"ErrCryptoDecryptPayload":                206,
	"ErrCryptoEncrypt":                       207,
	"ErrCryptoKeyConversion":                 208,
	"ErrCryptoCipherInit":                    209,
	"ErrCryptoKeyDerivation":                 210,
	"ErrMap":                                 300,
	"ErrForEach":                             301,
	"ErrKeystoreGet":                         400,
	"ErrKeystorePut":                         401,
	"ErrNotFound":                            404,
	"ErrIPFSAdd":                             1050,
	"ErrIPFSGet":                             1051,
	"ErrIPFSInit":                            1052,
	"ErrIPFSSetupConfig":                     1053,
	"ErrIPFSSetupRepo":                       1054,
	"ErrIPFSSetupHost":                       1055,
	"ErrEventListMetadata":                   1400,
	"ErrEventListMessage":                    1401,
	"ErrBridgeInterrupted":                   1600,
	"ErrBridgeNotRunning":                    1601,
	"ErrMessengerInvalidDeepLink":            2000,
	"ErrMessengerDeepLinkRequiresPassphrase": 2001,
	"ErrMessengerDeepLinkInvalidPassphrase":  2002,
	"ErrMessengerStreamEvent":                2003,
	"ErrMessengerContactMetadataUnmarshal":   2004,
	"ErrDBEntryAlreadyExists":                2100,
	"ErrDBAddConversation":                   2101,
	"ErrDBAddContactRequestOutgoingSent":     2102,
	"ErrDBAddContactRequestOutgoingEnqueud":  2103,
	"ErrDBAddContactRequestIncomingReceived": 2104,
	"ErrDBAddContactRequestIncomingAccepted": 2105,
	"ErrDBAddGroupMemberDeviceAdded":         2106,
	"ErrDBMultipleRecords":                   2107,
	"ErrReplayProcessGroupMetadata":          2200,
	"ErrReplayProcessGroupMessage":           2201,
	"ErrAttachmentPrepare":                   2300,
	"ErrAttachmentRetrieve":                  2301,
	"ErrProtocolSend":                        2302,
	"ErrProtocolEventUnmarshal":              2303,
	"ErrProtocolGetGroupInfo":                2304,
	"ErrTestEcho":                            2401,
	"ErrTestEchoRecv":                        2402,
	"ErrTestEchoSend":                        2403,
	"ErrServicesAuth":                        4000,
	"ErrServicesAuthNotInitialized":          4001,
	"ErrServicesAuthWrongState":              4002,
	"ErrServicesAuthInvalidResponse":         4003,
	"ErrServicesAuthServer":                  4004,
	"ErrServicesAuthCodeChallenge":           4005,
	"ErrServicesAuthServiceInvalidToken":     4006,
	"ErrServicesAuthServiceNotSupported":     4007,
	"ErrServicesAuthUnknownToken":            4008,
	"ErrServicesAuthInvalidURL":              4009,
	"ErrCLINoTermcaps":                       3001,
	"ErrServicesDirectory":                   4200,
	"ErrServicesDirectoryInvalidVerifiedCredentialSubject": 4201,
	"ErrServicesDirectoryExistingRecordNotFound":           4202,
	"ErrServicesDirectoryRecordLockedAndCantBeReplaced":    4203,
	"ErrServicesDirectoryExplicitReplaceFlagRequired":      4204,
	"ErrServicesDirectoryInvalidVerifiedCredential":        4205,
	"ErrServicesDirectoryExpiredVerifiedCredential":        4206,
	"ErrServicesDirectoryInvalidVerifiedCredentialID":      4207,
	"ErrBertyAccount":                  5000,
	"ErrBertyAccountNoIDSpecified":     5001,
	"ErrBertyAccountAlreadyOpened":     5002,
	"ErrBertyAccountInvalidIDFormat":   5003,
	"ErrBertyAccountLoggerDecorator":   5004,
	"ErrBertyAccountGRPCClient":        5005,
	"ErrBertyAccountOpenAccount":       5006,
	"ErrBertyAccountDataNotFound":      5007,
	"ErrBertyAccountMetadataUpdate":    5008,
	"ErrBertyAccountManagerOpen":       5009,
	"ErrBertyAccountManagerClose":      5010,
	"ErrBertyAccountInvalidCLIArgs":    5011,
	"ErrBertyAccountFSError":           5012,
	"ErrBertyAccountAlreadyExists":     5013,
	"ErrBertyAccountNoBackupSpecified": 5014,
	"ErrBertyAccountIDGenFailed":       5015,
	"ErrBertyAccountCreationFailed":    5016,
	"ErrBertyAccountUpdateFailed":      5017,
	"ErrAppStorageNotSupported":        5018,
	"ErrPush":                          6000,
	"ErrPushWrongAccount":              6001,
	"ErrPushUnableToDecrypt":           6002,
	"ErrPushInvalidPayload":            6003,
	"ErrPushInvalidServerConfig":       6004,
	"ErrPushMissingBundleID":           6005,
	"ErrPushUnknownDestination":        6006,
	"ErrPushProvider":                  6007,
	"ErrPushUnknownProvider":           6008,
	"ErrNoProvidersConfigured":         6009,
	"ErrInvalidPrivateKey":             6010,
	"ErrPushServerNotFound":            6011,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36ad8b3d0b181e72, []int{0}
}

type ErrDetails struct {
	Codes                []ErrCode `protobuf:"varint,1,rep,packed,name=codes,proto3,enum=berty.errcode.ErrCode" json:"codes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ErrDetails) Reset()         { *m = ErrDetails{} }
func (m *ErrDetails) String() string { return proto.CompactTextString(m) }
func (*ErrDetails) ProtoMessage()    {}
func (*ErrDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_36ad8b3d0b181e72, []int{0}
}
func (m *ErrDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrDetails.Merge(m, src)
}
func (m *ErrDetails) XXX_Size() int {
	return m.Size()
}
func (m *ErrDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ErrDetails proto.InternalMessageInfo

func (m *ErrDetails) GetCodes() []ErrCode {
	if m != nil {
		return m.Codes
	}
	return nil
}

func init() {
	proto.RegisterEnum("berty.errcode.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*ErrDetails)(nil), "berty.errcode.ErrDetails")
}

func init() { proto.RegisterFile("berty/errcode.proto", fileDescriptor_36ad8b3d0b181e72) }

var fileDescriptor_36ad8b3d0b181e72 = []byte{
	// 1775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xd9, 0x93, 0x1c, 0x47,
	0xd1, 0xf7, 0x58, 0x9f, 0xf5, 0xc9, 0x65, 0x49, 0x9b, 0x5b, 0x92, 0x75, 0x59, 0xde, 0x59, 0x04,
	0x66, 0x40, 0xc0, 0x6c, 0xd8, 0x38, 0x88, 0x80, 0xb7, 0xd9, 0x99, 0xd9, 0xf5, 0x84, 0x76, 0x57,
	0x13, 0x33, 0x2b, 0x1c, 0xc1, 0x5b, 0x6d, 0x57, 0x6e, 0x4f, 0x79, 0x7b, 0xaa, 0x5a, 0x55, 0xd5,
	0x8b, 0xc6, 0x40, 0x04, 0x8f, 0x98, 0xd3, 0x06, 0x03, 0xb6, 0xb8, 0x6f, 0x88, 0x80, 0x37, 0x2e,
	0xc3, 0x0b, 0xbc, 0x19, 0xcc, 0x21, 0x1b, 0xfe, 0x00, 0x2c, 0x5e, 0xb8, 0xef, 0x43, 0xe6, 0x8e,
	0xaa, 0xae, 0x6e, 0xf5, 0xee, 0x8e, 0x14, 0xf0, 0x34, 0xd3, 0x99, 0xbf, 0xcc, 0xac, 0x3c, 0x2a,
	0x33, 0x8b, 0x1c, 0xd9, 0x40, 0x6d, 0x27, 0x0b, 0xa8, 0x75, 0xa4, 0x38, 0x36, 0x53, 0xad, 0xac,
	0xa2, 0x87, 0x3c, 0xb1, 0x19, 0x88, 0xa7, 0x8e, 0xc6, 0x2a, 0x56, 0x9e, 0xb3, 0xe0, 0xfe, 0xe5,
	0xa0, 0x33, 0xaf, 0x23, 0xa4, 0xab, 0x75, 0x07, 0x2d, 0x13, 0x89, 0xa1, 0xaf, 0x24, 0xb7, 0x39,
	0xac, 0x39, 0x51, 0x9b, 0xdf, 0xf7, 0xb2, 0xc3, 0xf7, 0x1d, 0x6b, 0xee, 0x50, 0xd1, 0xec, 0x6a,
	0xdd, 0x56, 0x1c, 0x07, 0x39, 0xe8, 0xec, 0x33, 0xa7, 0xc9, 0xff, 0x07, 0x12, 0x3d, 0x44, 0x6e,
	0xbf, 0x20, 0x39, 0x6e, 0x0a, 0x89, 0x1c, 0x6e, 0xa1, 0xb7, 0x93, 0xff, 0x5b, 0x3f, 0xdf, 0x39,
	0x0f, 0x97, 0x6f, 0xa3, 0xc7, 0xc8, 0x6c, 0x57, 0xeb, 0x35, 0x65, 0x7b, 0xe3, 0x34, 0xc1, 0x31,
	0x4a, 0x8b, 0x1c, 0x1e, 0xd9, 0x4f, 0x81, 0xdc, 0xd1, 0xd5, 0xba, 0x27, 0x2d, 0x6a, 0xc9, 0x12,
	0xb8, 0xb6, 0x9f, 0x1e, 0x21, 0x33, 0x9e, 0xb2, 0xcd, 0x12, 0xc1, 0x7b, 0x32, 0xcd, 0x2c, 0xf0,
	0x9d, 0xc4, 0x01, 0x93, 0x31, 0x02, 0x06, 0xe2, 0xaa, 0x30, 0x46, 0xc8, 0x38, 0x47, 0x6e, 0xd2,
	0xa3, 0x04, 0xba, 0x5a, 0x0f, 0x51, 0x0b, 0x96, 0x88, 0x87, 0x99, 0x15, 0x4a, 0x42, 0x4c, 0x8f,
	0x11, 0xea, 0x1d, 0x34, 0x3b, 0xe8, 0x23, 0x3a, 0x4b, 0x0e, 0x39, 0xb4, 0xd5, 0xc8, 0xc6, 0x03,
	0x64, 0x1c, 0x04, 0xa5, 0xe4, 0x70, 0x49, 0x7a, 0x50, 0x0b, 0x8b, 0xf0, 0x50, 0x10, 0xcf, 0x69,
	0xeb, 0x9a, 0x49, 0xb3, 0xa9, 0xf4, 0x18, 0x24, 0x3d, 0x49, 0xee, 0x2c, 0xe9, 0x43, 0x94, 0xbc,
	0x25, 0x79, 0x3b, 0x51, 0x06, 0x41, 0xd1, 0x13, 0xe4, 0x68, 0xc9, 0x7a, 0x00, 0x19, 0x47, 0x9d,
	0x2b, 0x4b, 0xe9, 0x71, 0x72, 0x64, 0x17, 0xc7, 0x5b, 0x36, 0x3b, 0x0e, 0x33, 0x14, 0x72, 0x0b,
	0x2e, 0xee, 0x30, 0xe0, 0x35, 0xb7, 0x24, 0x1f, 0x60, 0xb4, 0x0d, 0x3a, 0x38, 0x1a, 0xbc, 0x5f,
	0x65, 0xe9, 0x39, 0x9c, 0xc0, 0x16, 0x3d, 0x9c, 0x67, 0x72, 0x31, 0x37, 0x96, 0xb8, 0x8c, 0xf8,
	0x6f, 0x6f, 0x62, 0x4c, 0x81, 0x1c, 0xf4, 0x9f, 0x1d, 0x34, 0x56, 0xab, 0x09, 0x5c, 0x2a, 0x29,
	0xab, 0x22, 0xd6, 0xcc, 0x22, 0x4c, 0xe8, 0x8c, 0x4f, 0x89, 0x13, 0x49, 0x13, 0x36, 0x81, 0x87,
	0x4b, 0xc8, 0x00, 0x8d, 0x55, 0x1a, 0xe1, 0x4d, 0xa5, 0xd6, 0xf3, 0x29, 0x4a, 0x78, 0x73, 0x69,
	0x34, 0xf7, 0xfd, 0x2d, 0x74, 0x8e, 0x9c, 0x74, 0x15, 0xa1, 0x27, 0xa9, 0x55, 0x03, 0x26, 0xb9,
	0x1a, 0x2f, 0xa3, 0x44, 0x9d, 0x07, 0xfd, 0xe9, 0x1a, 0xbd, 0x8b, 0x1c, 0x2b, 0xf9, 0xe7, 0x70,
	0x52, 0x61, 0x7e, 0xa7, 0x46, 0xef, 0x26, 0x27, 0x4a, 0xe6, 0x9a, 0x92, 0x11, 0x56, 0xd8, 0xdf,
	0xad, 0xd1, 0xe3, 0x3e, 0x15, 0x39, 0x7b, 0x28, 0x62, 0xc9, 0x6c, 0xa6, 0x11, 0x9e, 0xa9, 0xd1,
	0x17, 0x93, 0xb9, 0xbd, 0x8c, 0xd7, 0xa3, 0x16, 0x9b, 0x22, 0xca, 0xa5, 0xbf, 0x57, 0xa3, 0x77,
	0xfa, 0xa0, 0xe5, 0xa0, 0x0e, 0x46, 0xee, 0x17, 0xbe, 0x5f, 0xa3, 0xa7, 0xc9, 0xf1, 0xdd, 0xe4,
	0x3e, 0x9b, 0x24, 0x8a, 0x71, 0xf8, 0xc1, 0x4e, 0xa1, 0xae, 0xcc, 0x85, 0x7e, 0xb8, 0xc7, 0x8b,
	0xb6, 0x92, 0xdb, 0xa8, 0x8d, 0x33, 0x74, 0xa5, 0x46, 0x4f, 0xf8, 0x24, 0xe7, 0xcc, 0xb6, 0x48,
	0x47, 0xa8, 0x7b, 0x52, 0x58, 0x78, 0x76, 0x8f, 0x58, 0x07, 0xb5, 0xd8, 0xce, 0xcf, 0xf7, 0x5c,
	0x8d, 0xde, 0x41, 0xf6, 0xbb, 0xa4, 0xb2, 0x14, 0xbe, 0x78, 0x2b, 0x9d, 0xf1, 0x61, 0x5d, 0x52,
	0xba, 0xcb, 0xa2, 0x11, 0x7c, 0xe9, 0x56, 0x7a, 0xc4, 0x97, 0xe6, 0x39, 0x9c, 0xf8, 0x3c, 0x2c,
	0xa3, 0x85, 0x47, 0xf7, 0xed, 0x22, 0xf6, 0x33, 0x0b, 0x8f, 0xed, 0x0b, 0xd7, 0x6a, 0x4d, 0xd9,
	0x25, 0x95, 0x49, 0x0e, 0x8f, 0xef, 0x0b, 0xca, 0x7a, 0xfd, 0xa5, 0x61, 0x8b, 0x73, 0xb8, 0x7c,
	0xa0, 0x42, 0x70, 0x8a, 0x3e, 0x74, 0xa0, 0xb8, 0x8a, 0xfd, 0xa5, 0xa1, 0x3f, 0xea, 0x87, 0x0f,
	0x84, 0x58, 0x3b, 0xca, 0x10, 0x6d, 0x96, 0xb6, 0x95, 0xdc, 0x14, 0x31, 0x7c, 0xe4, 0x40, 0x88,
	0x48, 0xc9, 0x18, 0x60, 0xaa, 0xe0, 0xa3, 0x7b, 0xc8, 0x0f, 0x28, 0x63, 0xe1, 0x63, 0x07, 0xe8,
	0x49, 0x7f, 0x15, 0xba, 0xdb, 0x28, 0xed, 0x8a, 0x30, 0x76, 0x15, 0x2d, 0xe3, 0xcc, 0x32, 0xb8,
	0x46, 0x42, 0x98, 0x2a, 0x2c, 0x63, 0x58, 0x8c, 0xf0, 0x02, 0x09, 0x42, 0x8b, 0x5a, 0xf0, 0x18,
	0x7d, 0x7b, 0xd0, 0x59, 0xea, 0x7a, 0xc6, 0xb7, 0x0e, 0x06, 0xa1, 0x9c, 0xb5, 0xa6, 0xec, 0x20,
	0x93, 0x52, 0xc8, 0x18, 0xbe, 0x7d, 0x90, 0xce, 0x93, 0xbb, 0x5c, 0xf8, 0xd0, 0x18, 0x94, 0x31,
	0x16, 0xfd, 0xa2, 0x83, 0x98, 0xae, 0xb8, 0xfb, 0x74, 0x65, 0x86, 0xbe, 0x82, 0xbc, 0xb4, 0x8a,
	0x28, 0x58, 0x03, 0xbc, 0x98, 0x09, 0x8d, 0xa6, 0xcf, 0x8c, 0x49, 0x47, 0x9a, 0x19, 0x84, 0x67,
	0x67, 0xe8, 0x59, 0x72, 0xcf, 0x34, 0x70, 0x50, 0x5b, 0xc1, 0x3e, 0x37, 0x13, 0x4a, 0xa8, 0xc4,
	0xe6, 0x57, 0xd6, 0x3b, 0x06, 0x3f, 0x9a, 0xa1, 0x2f, 0x27, 0x2f, 0xa9, 0x72, 0xdb, 0x4a, 0x5a,
	0x16, 0x95, 0x91, 0xb8, 0x20, 0xc7, 0x4c, 0x9b, 0x11, 0x4b, 0xe0, 0xc7, 0x85, 0xa2, 0xce, 0x62,
	0x57, 0x5a, 0x3d, 0x69, 0x25, 0x1a, 0x19, 0x9f, 0x74, 0x2f, 0x09, 0x63, 0x0d, 0x7c, 0x19, 0x42,
	0x58, 0x3a, 0x8b, 0x2d, 0xce, 0x43, 0xc1, 0xe5, 0xb5, 0xf3, 0x15, 0xa0, 0x0d, 0x72, 0xa6, 0xc2,
	0x72, 0xfa, 0x9d, 0x57, 0x68, 0xec, 0xf9, 0xcc, 0xc6, 0x4a, 0xc8, 0x78, 0xe8, 0x0e, 0xf3, 0x55,
	0x08, 0x6e, 0xdd, 0x04, 0xd8, 0x95, 0x17, 0x33, 0xcc, 0x38, 0x7c, 0x0d, 0x42, 0xbc, 0xa6, 0x60,
	0x7b, 0x32, 0x52, 0x63, 0x21, 0xe3, 0x01, 0x46, 0x28, 0xb6, 0x91, 0xc3, 0xd7, 0xff, 0x0b, 0x70,
	0x2b, 0x8a, 0xd0, 0x67, 0xf1, 0x29, 0x08, 0xf7, 0xd5, 0x83, 0x97, 0xb5, 0xca, 0xd2, 0x55, 0x1c,
	0x6f, 0xb8, 0x18, 0x6f, 0x8b, 0x08, 0x5b, 0x9c, 0x23, 0x87, 0x6f, 0x5c, 0x77, 0x77, 0x35, 0x4b,
	0xac, 0x48, 0x13, 0x1c, 0x60, 0xa4, 0x34, 0x37, 0xf0, 0x4d, 0xa0, 0x67, 0xc8, 0xdd, 0x5d, 0xad,
	0xf3, 0x26, 0xd5, 0xd7, 0x2a, 0x42, 0x63, 0x82, 0x9e, 0x50, 0x5e, 0x4f, 0xcc, 0xd2, 0x17, 0x91,
	0xd3, 0x37, 0xc0, 0xe4, 0x75, 0xf6, 0xe4, 0x6c, 0xb0, 0xd0, 0xb2, 0x96, 0x45, 0x23, 0x37, 0x96,
	0xfa, 0x1a, 0x53, 0xa6, 0x11, 0xfe, 0x31, 0x4b, 0x4f, 0xf9, 0xe6, 0x7b, 0x9d, 0x35, 0x40, 0xab,
	0x05, 0x6e, 0x23, 0xfc, 0x73, 0x96, 0x1e, 0xf5, 0xb3, 0xa7, 0xef, 0xa6, 0x67, 0xa4, 0x12, 0xd7,
	0xfb, 0xe1, 0x5f, 0xb3, 0xa1, 0xf1, 0x15, 0x54, 0x9f, 0xfd, 0xeb, 0xb9, 0xfd, 0xf7, 0x6c, 0xc8,
	0x6d, 0xc1, 0x5f, 0x46, 0xeb, 0x4f, 0xd3, 0x93, 0x9b, 0x0a, 0xde, 0x4a, 0xc3, 0x05, 0x5c, 0x47,
	0x63, 0xbb, 0xd1, 0x48, 0xc1, 0xf3, 0x34, 0x58, 0x29, 0x28, 0xbe, 0xf1, 0x5f, 0xdd, 0x4d, 0xf5,
	0xb6, 0x7f, 0x5a, 0x50, 0x87, 0xa8, 0x5d, 0x00, 0x4d, 0x2b, 0xb3, 0x23, 0xf8, 0x78, 0x3d, 0x44,
	0xa9, 0x4a, 0x75, 0x33, 0x58, 0x0a, 0xeb, 0xc7, 0x20, 0x72, 0xf8, 0x44, 0x3d, 0x9c, 0xba, 0x8a,
	0x79, 0x50, 0x2b, 0x19, 0x0f, 0xad, 0x9b, 0x07, 0x9f, 0xac, 0x87, 0x4c, 0x55, 0xf9, 0xc5, 0x20,
	0x46, 0x93, 0x2a, 0x69, 0x10, 0x3e, 0x55, 0x0f, 0xc1, 0xaa, 0x82, 0xdc, 0x7f, 0xd4, 0xf0, 0xe9,
	0x7a, 0x48, 0x43, 0x95, 0xe7, 0xb6, 0x85, 0xf6, 0x88, 0x25, 0x89, 0xbb, 0x0e, 0xf0, 0x99, 0x7a,
	0x28, 0xde, 0xdd, 0xe2, 0x22, 0xc2, 0x60, 0x6a, 0x5d, 0x6d, 0xa1, 0x84, 0xcf, 0xde, 0x04, 0xb8,
	0xa6, 0xec, 0x30, 0x4b, 0x53, 0xa5, 0x5d, 0x7d, 0x7d, 0xae, 0x1e, 0x7a, 0x41, 0x15, 0x78, 0x41,
	0x6e, 0x49, 0xf5, 0x46, 0x99, 0xab, 0xfa, 0xfc, 0x34, 0xbf, 0x83, 0xb1, 0x0b, 0x83, 0x15, 0xf8,
	0x42, 0xbd, 0xe8, 0xfb, 0x2b, 0xbd, 0x35, 0xb5, 0x8e, 0x7a, 0x1c, 0xb1, 0xd4, 0xc0, 0x53, 0xc7,
	0x43, 0xc5, 0x14, 0x62, 0x1d, 0xa1, 0x31, 0xb2, 0x4a, 0x4f, 0xe0, 0x67, 0xf3, 0xf4, 0xb5, 0xe4,
	0xfe, 0x69, 0xac, 0xa0, 0x36, 0x1f, 0x46, 0xc8, 0xdb, 0x1a, 0x39, 0x4a, 0x97, 0x81, 0x61, 0xb6,
	0xf1, 0x10, 0x46, 0x16, 0x7e, 0x3e, 0x4f, 0x17, 0xc8, 0xd9, 0x69, 0xa2, 0xfe, 0xe6, 0xe7, 0xd7,
	0x4c, 0x69, 0x5e, 0x36, 0xf4, 0x5f, 0xcc, 0xd3, 0xd7, 0x90, 0x7b, 0xa7, 0x09, 0xe4, 0xc0, 0x15,
	0x15, 0x6d, 0xa1, 0x5f, 0x47, 0x98, 0xb4, 0x8b, 0xe8, 0x6f, 0x40, 0x84, 0x1c, 0x7e, 0x39, 0x4f,
	0xef, 0x27, 0x0b, 0xd3, 0x0d, 0xa5, 0x89, 0x88, 0x84, 0x0d, 0xd0, 0xa5, 0x84, 0xc5, 0xa1, 0x29,
	0x72, 0xf8, 0xd5, 0x3c, 0xbd, 0x8f, 0xbc, 0xea, 0x7f, 0xf2, 0x0c, 0x7e, 0x7d, 0x43, 0x99, 0xee,
	0xa5, 0xd4, 0x69, 0x9d, 0x22, 0xf3, 0x9b, 0x1b, 0x9e, 0xee, 0x86, 0x76, 0x7a, 0x1d, 0xf8, 0xed,
	0x7c, 0xa8, 0xfd, 0x45, 0xb7, 0xa6, 0xb6, 0xa2, 0x48, 0x65, 0xd2, 0xc2, 0xdb, 0x1a, 0xa1, 0xec,
	0xaa, 0xd4, 0x35, 0xd5, 0xeb, 0x0c, 0x53, 0x8c, 0xbc, 0x12, 0x78, 0x64, 0x1a, 0x24, 0x74, 0x5c,
	0xb7, 0xd9, 0x20, 0x87, 0xb7, 0x37, 0x42, 0xf5, 0x57, 0x21, 0xc5, 0x6e, 0xda, 0x59, 0x52, 0x7a,
	0xcc, 0x2c, 0xbc, 0x63, 0x1a, 0x68, 0x45, 0xc5, 0x7e, 0x64, 0x44, 0x4a, 0x33, 0xab, 0x34, 0xbc,
	0xb3, 0x11, 0xea, 0xad, 0x0a, 0x5a, 0x1e, 0xf4, 0xdb, 0xed, 0x44, 0xb8, 0xbe, 0xfc, 0xae, 0x06,
	0xad, 0x93, 0x53, 0xbb, 0xf8, 0xee, 0x14, 0x85, 0x43, 0xef, 0x6e, 0x84, 0x92, 0xae, 0x02, 0x3a,
	0xcc, 0xb2, 0xb2, 0x28, 0xde, 0xd3, 0x08, 0xd7, 0xbd, 0x8a, 0x28, 0x67, 0x4c, 0xca, 0xdd, 0x75,
	0x7e, 0x74, 0x9a, 0x99, 0x55, 0x26, 0x59, 0x8c, 0xda, 0x6f, 0x73, 0x8f, 0x4d, 0x33, 0x13, 0x00,
	0xf9, 0x7e, 0xf7, 0xde, 0x69, 0x66, 0x42, 0x4c, 0xda, 0x2b, 0xbd, 0x96, 0x8e, 0x0d, 0xbc, 0xaf,
	0x11, 0xf6, 0x9c, 0x2a, 0x66, 0x69, 0xd8, 0xd5, 0x5a, 0x69, 0x78, 0xfc, 0x26, 0x71, 0x0f, 0x93,
	0xee, 0xfd, 0x0d, 0x7a, 0x0f, 0x99, 0xdf, 0x93, 0xbd, 0x45, 0x16, 0x6d, 0x65, 0xe9, 0xf5, 0x0c,
	0x7e, 0x60, 0x9a, 0x37, 0xbd, 0xce, 0x32, 0xca, 0x25, 0x26, 0x12, 0xe4, 0xf0, 0xc1, 0x69, 0x67,
	0x6d, 0x6b, 0xf4, 0x43, 0x33, 0x60, 0x9e, 0x98, 0xe6, 0x71, 0x1e, 0xae, 0x80, 0x78, 0xb2, 0xc8,
	0x5d, 0x2b, 0x4d, 0x87, 0x56, 0x69, 0x16, 0xef, 0xec, 0x36, 0x97, 0x1b, 0xf4, 0xa0, 0x7f, 0x04,
	0xf5, 0x33, 0x33, 0x82, 0xdf, 0x35, 0xc3, 0x86, 0xe2, 0xbe, 0x7c, 0x27, 0x2d, 0x52, 0xf8, 0xfb,
	0x66, 0x88, 0x8a, 0xe3, 0x5c, 0x90, 0x6c, 0x23, 0xc1, 0xf5, 0x72, 0x0d, 0xfd, 0x43, 0x33, 0xf4,
	0x50, 0xc7, 0x2c, 0x57, 0x8c, 0x7c, 0x09, 0xfd, 0x63, 0x33, 0xf8, 0x59, 0xe1, 0xe5, 0xed, 0x35,
	0xec, 0x64, 0x7f, 0xaa, 0x6a, 0x0e, 0x6f, 0x82, 0xc5, 0x4c, 0xf2, 0x04, 0x7b, 0x1d, 0xf8, 0x73,
	0xb3, 0x18, 0x4c, 0xde, 0xac, 0x6f, 0x82, 0xee, 0x01, 0x20, 0x64, 0xbe, 0x3b, 0xfc, 0xa5, 0x59,
	0x8c, 0xb3, 0xcc, 0x8c, 0xfa, 0x5a, 0x6d, 0x0b, 0x8e, 0x1a, 0xfe, 0xba, 0xf3, 0xb0, 0x5e, 0xaa,
	0x64, 0x5e, 0x6b, 0x86, 0x3d, 0x7d, 0x4d, 0x15, 0x34, 0x93, 0x1f, 0x25, 0x73, 0x0d, 0xe3, 0x85,
	0x66, 0xe8, 0x92, 0x85, 0x1f, 0x7e, 0xc7, 0x45, 0xf7, 0x44, 0xf9, 0x5b, 0xd5, 0xcd, 0xdc, 0x87,
	0xb2, 0x80, 0xff, 0xde, 0x5c, 0xbc, 0xf7, 0xca, 0xf3, 0x73, 0xb7, 0x3c, 0x7d, 0x75, 0xae, 0x76,
	0xe5, 0xea, 0x5c, 0xed, 0x27, 0x57, 0xe7, 0x6a, 0x6f, 0xa8, 0xe7, 0xaf, 0x4f, 0x8b, 0xd1, 0x68,
	0x21, 0x7f, 0xe0, 0xc6, 0x6a, 0x21, 0xdd, 0x8a, 0x8b, 0x77, 0xee, 0xc6, 0x7e, 0xff, 0x86, 0x7d,
	0xf5, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xe0, 0xaa, 0x80, 0xff, 0x0e, 0x00, 0x00,
}

func (m *ErrDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Codes) > 0 {
		dAtA2 := make([]byte, len(m.Codes)*10)
		var j1 int
		for _, num := range m.Codes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintErrcode(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintErrcode(dAtA []byte, offset int, v uint64) int {
	offset -= sovErrcode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErrDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Codes) > 0 {
		l = 0
		for _, e := range m.Codes {
			l += sovErrcode(uint64(e))
		}
		n += 1 + sovErrcode(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovErrcode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErrcode(x uint64) (n int) {
	return sovErrcode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErrDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrcode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ErrCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrcode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ErrCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Codes = append(m.Codes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrcode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErrcode
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErrcode
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Codes) == 0 {
					m.Codes = make([]ErrCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ErrCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrcode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ErrCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Codes = append(m.Codes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Codes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrcode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErrcode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrcode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrcode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrcode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrcode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErrcode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErrcode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErrcode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErrcode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrcode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErrcode = fmt.Errorf("proto: unexpected end of group")
)
