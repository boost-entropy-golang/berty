// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messengertypes/messengertypes.proto

package messengertypes

import (
	pushtypes "berty.tech/berty/v2/go/pkg/pushtypes"
	protocoltypes "berty.tech/weshnet/pkg/protocoltypes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BertyLink_Kind int32

const (
	BertyLink_UnknownKind         BertyLink_Kind = 0
	BertyLink_ContactInviteV1Kind BertyLink_Kind = 1
	BertyLink_GroupV1Kind         BertyLink_Kind = 2
	BertyLink_EncryptedV1Kind     BertyLink_Kind = 3
	BertyLink_MessageV1Kind       BertyLink_Kind = 4
)

var BertyLink_Kind_name = map[int32]string{
	0: "UnknownKind",
	1: "ContactInviteV1Kind",
	2: "GroupV1Kind",
	3: "EncryptedV1Kind",
	4: "MessageV1Kind",
}

var BertyLink_Kind_value = map[string]int32{
	"UnknownKind":         0,
	"ContactInviteV1Kind": 1,
	"GroupV1Kind":         2,
	"EncryptedV1Kind":     3,
	"MessageV1Kind":       4,
}

func (x BertyLink_Kind) String() string {
	return proto.EnumName(BertyLink_Kind_name, int32(x))
}

func (BertyLink_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{12, 0}
}

type AppMessage_Type int32

const (
	AppMessage_Undefined                               AppMessage_Type = 0
	AppMessage_TypeUserMessage                         AppMessage_Type = 1
	AppMessage_TypeGroupInvitation                     AppMessage_Type = 3
	AppMessage_TypeSetGroupInfo                        AppMessage_Type = 4
	AppMessage_TypeSetUserInfo                         AppMessage_Type = 5
	AppMessage_TypeAcknowledge                         AppMessage_Type = 6
	AppMessage_TypeAccountDirectoryServiceRegistered   AppMessage_Type = 8
	AppMessage_TypeAccountDirectoryServiceUnregistered AppMessage_Type = 9
	AppMessage_TypeServiceAddToken                     AppMessage_Type = 10
	AppMessage_TypeServiceRemoveToken                  AppMessage_Type = 11
	AppMessage_TypePushSetDeviceToken                  AppMessage_Type = 12
	AppMessage_TypePushSetServer                       AppMessage_Type = 13
	AppMessage_TypePushSetMemberToken                  AppMessage_Type = 14
)

var AppMessage_Type_name = map[int32]string{
	0:  "Undefined",
	1:  "TypeUserMessage",
	3:  "TypeGroupInvitation",
	4:  "TypeSetGroupInfo",
	5:  "TypeSetUserInfo",
	6:  "TypeAcknowledge",
	8:  "TypeAccountDirectoryServiceRegistered",
	9:  "TypeAccountDirectoryServiceUnregistered",
	10: "TypeServiceAddToken",
	11: "TypeServiceRemoveToken",
	12: "TypePushSetDeviceToken",
	13: "TypePushSetServer",
	14: "TypePushSetMemberToken",
}

var AppMessage_Type_value = map[string]int32{
	"Undefined":                               0,
	"TypeUserMessage":                         1,
	"TypeGroupInvitation":                     3,
	"TypeSetGroupInfo":                        4,
	"TypeSetUserInfo":                         5,
	"TypeAcknowledge":                         6,
	"TypeAccountDirectoryServiceRegistered":   8,
	"TypeAccountDirectoryServiceUnregistered": 9,
	"TypeServiceAddToken":                     10,
	"TypeServiceRemoveToken":                  11,
	"TypePushSetDeviceToken":                  12,
	"TypePushSetServer":                       13,
	"TypePushSetMemberToken":                  14,
}

func (x AppMessage_Type) String() string {
	return proto.EnumName(AppMessage_Type_name, int32(x))
}

func (AppMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 0}
}

type Contact_State int32

const (
	Contact_Undefined               Contact_State = 0
	Contact_IncomingRequest         Contact_State = 1
	Contact_OutgoingRequestEnqueued Contact_State = 2
	Contact_OutgoingRequestSent     Contact_State = 3
	Contact_Accepted                Contact_State = 4
)

var Contact_State_name = map[int32]string{
	0: "Undefined",
	1: "IncomingRequest",
	2: "OutgoingRequestEnqueued",
	3: "OutgoingRequestSent",
	4: "Accepted",
}

var Contact_State_value = map[string]int32{
	"Undefined":               0,
	"IncomingRequest":         1,
	"OutgoingRequestEnqueued": 2,
	"OutgoingRequestSent":     3,
	"Accepted":                4,
}

func (x Contact_State) String() string {
	return proto.EnumName(Contact_State_name, int32(x))
}

func (Contact_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{29, 0}
}

type Conversation_Type int32

const (
	Conversation_Undefined       Conversation_Type = 0
	Conversation_AccountType     Conversation_Type = 1
	Conversation_ContactType     Conversation_Type = 2
	Conversation_MultiMemberType Conversation_Type = 3
)

var Conversation_Type_name = map[int32]string{
	0: "Undefined",
	1: "AccountType",
	2: "ContactType",
	3: "MultiMemberType",
}

var Conversation_Type_value = map[string]int32{
	"Undefined":       0,
	"AccountType":     1,
	"ContactType":     2,
	"MultiMemberType": 3,
}

func (x Conversation_Type) String() string {
	return proto.EnumName(Conversation_Type_name, int32(x))
}

func (Conversation_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{30, 0}
}

type StreamEvent_Type int32

const (
	StreamEvent_Undefined                     StreamEvent_Type = 0
	StreamEvent_TypeListEnded                 StreamEvent_Type = 1
	StreamEvent_TypeConversationUpdated       StreamEvent_Type = 2
	StreamEvent_TypeConversationDeleted       StreamEvent_Type = 3
	StreamEvent_TypeInteractionUpdated        StreamEvent_Type = 4
	StreamEvent_TypeInteractionDeleted        StreamEvent_Type = 5
	StreamEvent_TypeContactUpdated            StreamEvent_Type = 6
	StreamEvent_TypeAccountUpdated            StreamEvent_Type = 7
	StreamEvent_TypeMemberUpdated             StreamEvent_Type = 8
	StreamEvent_TypeDeviceUpdated             StreamEvent_Type = 9
	StreamEvent_TypeNotified                  StreamEvent_Type = 10
	StreamEvent_TypeConversationPartialLoad   StreamEvent_Type = 12
	StreamEvent_TypePeerStatusConnected       StreamEvent_Type = 13
	StreamEvent_TypePeerStatusReconnecting    StreamEvent_Type = 14
	StreamEvent_TypePeerStatusDisconnected    StreamEvent_Type = 15
	StreamEvent_TypePeerStatusGroupAssociated StreamEvent_Type = 16
	StreamEvent_TypeServiceTokenAdded         StreamEvent_Type = 17
)

var StreamEvent_Type_name = map[int32]string{
	0:  "Undefined",
	1:  "TypeListEnded",
	2:  "TypeConversationUpdated",
	3:  "TypeConversationDeleted",
	4:  "TypeInteractionUpdated",
	5:  "TypeInteractionDeleted",
	6:  "TypeContactUpdated",
	7:  "TypeAccountUpdated",
	8:  "TypeMemberUpdated",
	9:  "TypeDeviceUpdated",
	10: "TypeNotified",
	12: "TypeConversationPartialLoad",
	13: "TypePeerStatusConnected",
	14: "TypePeerStatusReconnecting",
	15: "TypePeerStatusDisconnected",
	16: "TypePeerStatusGroupAssociated",
	17: "TypeServiceTokenAdded",
}

var StreamEvent_Type_value = map[string]int32{
	"Undefined":                     0,
	"TypeListEnded":                 1,
	"TypeConversationUpdated":       2,
	"TypeConversationDeleted":       3,
	"TypeInteractionUpdated":        4,
	"TypeInteractionDeleted":        5,
	"TypeContactUpdated":            6,
	"TypeAccountUpdated":            7,
	"TypeMemberUpdated":             8,
	"TypeDeviceUpdated":             9,
	"TypeNotified":                  10,
	"TypeConversationPartialLoad":   12,
	"TypePeerStatusConnected":       13,
	"TypePeerStatusReconnecting":    14,
	"TypePeerStatusDisconnected":    15,
	"TypePeerStatusGroupAssociated": 16,
	"TypeServiceTokenAdded":         17,
}

func (x StreamEvent_Type) String() string {
	return proto.EnumName(StreamEvent_Type_name, int32(x))
}

func (StreamEvent_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 0}
}

type StreamEvent_Notified_Type int32

const (
	StreamEvent_Notified_Unknown                    StreamEvent_Notified_Type = 0
	StreamEvent_Notified_TypeBasic                  StreamEvent_Notified_Type = 1
	StreamEvent_Notified_TypeMessageReceived        StreamEvent_Notified_Type = 2
	StreamEvent_Notified_TypeContactRequestSent     StreamEvent_Notified_Type = 3
	StreamEvent_Notified_TypeContactRequestReceived StreamEvent_Notified_Type = 4
	StreamEvent_Notified_TypeGroupInvitation        StreamEvent_Notified_Type = 5
)

var StreamEvent_Notified_Type_name = map[int32]string{
	0: "Unknown",
	1: "TypeBasic",
	2: "TypeMessageReceived",
	3: "TypeContactRequestSent",
	4: "TypeContactRequestReceived",
	5: "TypeGroupInvitation",
}

var StreamEvent_Notified_Type_value = map[string]int32{
	"Unknown":                    0,
	"TypeBasic":                  1,
	"TypeMessageReceived":        2,
	"TypeContactRequestSent":     3,
	"TypeContactRequestReceived": 4,
	"TypeGroupInvitation":        5,
}

func (x StreamEvent_Notified_Type) String() string {
	return proto.EnumName(StreamEvent_Notified_Type_name, int32(x))
}

func (StreamEvent_Notified_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 10, 0}
}

type StreamEvent_PeerStatusConnected_Transport int32

const (
	StreamEvent_PeerStatusConnected_Unknown   StreamEvent_PeerStatusConnected_Transport = 0
	StreamEvent_PeerStatusConnected_LAN       StreamEvent_PeerStatusConnected_Transport = 1
	StreamEvent_PeerStatusConnected_WAN       StreamEvent_PeerStatusConnected_Transport = 2
	StreamEvent_PeerStatusConnected_Proximity StreamEvent_PeerStatusConnected_Transport = 3
)

var StreamEvent_PeerStatusConnected_Transport_name = map[int32]string{
	0: "Unknown",
	1: "LAN",
	2: "WAN",
	3: "Proximity",
}

var StreamEvent_PeerStatusConnected_Transport_value = map[string]int32{
	"Unknown":   0,
	"LAN":       1,
	"WAN":       2,
	"Proximity": 3,
}

func (x StreamEvent_PeerStatusConnected_Transport) String() string {
	return proto.EnumName(StreamEvent_PeerStatusConnected_Transport_name, int32(x))
}

func (StreamEvent_PeerStatusConnected_Transport) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 11, 0}
}

type PaginatedInteractionsOptions struct {
	// amount Number of entries to be returned. Default is 5.
	Amount int32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// ref_cid Reference CID for used for pagination defaulting to oldest/newest depending on sorting. When specified this CID won't be included in the results.
	RefCID string `protobuf:"bytes,2,opt,name=ref_cid,json=refCid,proto3" json:"ref_cid,omitempty"`
	// conversation_pk Filter by conversation, otherwise X latest message of each conversation are returned
	ConversationPK string `protobuf:"bytes,3,opt,name=conversation_pk,json=conversationPk,proto3" json:"conversation_pk,omitempty"`
	// oldest_to_newest Default sort of results is latest to oldest message
	OldestToNewest bool `protobuf:"varint,4,opt,name=oldest_to_newest,json=oldestToNewest,proto3" json:"oldest_to_newest,omitempty"`
	// no_bulk should interactions be via atomic update in the stream
	NoBulk bool `protobuf:"varint,6,opt,name=no_bulk,json=noBulk,proto3" json:"no_bulk,omitempty"`
}

func (m *PaginatedInteractionsOptions) Reset()         { *m = PaginatedInteractionsOptions{} }
func (m *PaginatedInteractionsOptions) String() string { return proto.CompactTextString(m) }
func (*PaginatedInteractionsOptions) ProtoMessage()    {}
func (*PaginatedInteractionsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{0}
}
func (m *PaginatedInteractionsOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaginatedInteractionsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaginatedInteractionsOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaginatedInteractionsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaginatedInteractionsOptions.Merge(m, src)
}
func (m *PaginatedInteractionsOptions) XXX_Size() int {
	return m.Size()
}
func (m *PaginatedInteractionsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PaginatedInteractionsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PaginatedInteractionsOptions proto.InternalMessageInfo

func (m *PaginatedInteractionsOptions) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PaginatedInteractionsOptions) GetRefCID() string {
	if m != nil {
		return m.RefCID
	}
	return ""
}

func (m *PaginatedInteractionsOptions) GetConversationPK() string {
	if m != nil {
		return m.ConversationPK
	}
	return ""
}

func (m *PaginatedInteractionsOptions) GetOldestToNewest() bool {
	if m != nil {
		return m.OldestToNewest
	}
	return false
}

func (m *PaginatedInteractionsOptions) GetNoBulk() bool {
	if m != nil {
		return m.NoBulk
	}
	return false
}

type ConversationOpen struct {
}

func (m *ConversationOpen) Reset()         { *m = ConversationOpen{} }
func (m *ConversationOpen) String() string { return proto.CompactTextString(m) }
func (*ConversationOpen) ProtoMessage()    {}
func (*ConversationOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{1}
}
func (m *ConversationOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationOpen.Merge(m, src)
}
func (m *ConversationOpen) XXX_Size() int {
	return m.Size()
}
func (m *ConversationOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationOpen.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationOpen proto.InternalMessageInfo

type ConversationOpen_Request struct {
	GroupPK string `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
}

func (m *ConversationOpen_Request) Reset()         { *m = ConversationOpen_Request{} }
func (m *ConversationOpen_Request) String() string { return proto.CompactTextString(m) }
func (*ConversationOpen_Request) ProtoMessage()    {}
func (*ConversationOpen_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{1, 0}
}
func (m *ConversationOpen_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationOpen_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationOpen_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationOpen_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationOpen_Request.Merge(m, src)
}
func (m *ConversationOpen_Request) XXX_Size() int {
	return m.Size()
}
func (m *ConversationOpen_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationOpen_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationOpen_Request proto.InternalMessageInfo

func (m *ConversationOpen_Request) GetGroupPK() string {
	if m != nil {
		return m.GroupPK
	}
	return ""
}

type ConversationOpen_Reply struct {
}

func (m *ConversationOpen_Reply) Reset()         { *m = ConversationOpen_Reply{} }
func (m *ConversationOpen_Reply) String() string { return proto.CompactTextString(m) }
func (*ConversationOpen_Reply) ProtoMessage()    {}
func (*ConversationOpen_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{1, 1}
}
func (m *ConversationOpen_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationOpen_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationOpen_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationOpen_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationOpen_Reply.Merge(m, src)
}
func (m *ConversationOpen_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ConversationOpen_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationOpen_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationOpen_Reply proto.InternalMessageInfo

type ConversationClose struct {
}

func (m *ConversationClose) Reset()         { *m = ConversationClose{} }
func (m *ConversationClose) String() string { return proto.CompactTextString(m) }
func (*ConversationClose) ProtoMessage()    {}
func (*ConversationClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{2}
}
func (m *ConversationClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationClose.Merge(m, src)
}
func (m *ConversationClose) XXX_Size() int {
	return m.Size()
}
func (m *ConversationClose) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationClose.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationClose proto.InternalMessageInfo

type ConversationClose_Request struct {
	GroupPK string `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
}

func (m *ConversationClose_Request) Reset()         { *m = ConversationClose_Request{} }
func (m *ConversationClose_Request) String() string { return proto.CompactTextString(m) }
func (*ConversationClose_Request) ProtoMessage()    {}
func (*ConversationClose_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{2, 0}
}
func (m *ConversationClose_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationClose_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationClose_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationClose_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationClose_Request.Merge(m, src)
}
func (m *ConversationClose_Request) XXX_Size() int {
	return m.Size()
}
func (m *ConversationClose_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationClose_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationClose_Request proto.InternalMessageInfo

func (m *ConversationClose_Request) GetGroupPK() string {
	if m != nil {
		return m.GroupPK
	}
	return ""
}

type ConversationClose_Reply struct {
}

func (m *ConversationClose_Reply) Reset()         { *m = ConversationClose_Reply{} }
func (m *ConversationClose_Reply) String() string { return proto.CompactTextString(m) }
func (*ConversationClose_Reply) ProtoMessage()    {}
func (*ConversationClose_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{2, 1}
}
func (m *ConversationClose_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationClose_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationClose_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationClose_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationClose_Reply.Merge(m, src)
}
func (m *ConversationClose_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ConversationClose_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationClose_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationClose_Reply proto.InternalMessageInfo

type ConversationLoad struct {
}

func (m *ConversationLoad) Reset()         { *m = ConversationLoad{} }
func (m *ConversationLoad) String() string { return proto.CompactTextString(m) }
func (*ConversationLoad) ProtoMessage()    {}
func (*ConversationLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{3}
}
func (m *ConversationLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationLoad.Merge(m, src)
}
func (m *ConversationLoad) XXX_Size() int {
	return m.Size()
}
func (m *ConversationLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationLoad.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationLoad proto.InternalMessageInfo

type ConversationLoad_Request struct {
	Options *PaginatedInteractionsOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *ConversationLoad_Request) Reset()         { *m = ConversationLoad_Request{} }
func (m *ConversationLoad_Request) String() string { return proto.CompactTextString(m) }
func (*ConversationLoad_Request) ProtoMessage()    {}
func (*ConversationLoad_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{3, 0}
}
func (m *ConversationLoad_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationLoad_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationLoad_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationLoad_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationLoad_Request.Merge(m, src)
}
func (m *ConversationLoad_Request) XXX_Size() int {
	return m.Size()
}
func (m *ConversationLoad_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationLoad_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationLoad_Request proto.InternalMessageInfo

func (m *ConversationLoad_Request) GetOptions() *PaginatedInteractionsOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type ConversationLoad_Reply struct {
}

func (m *ConversationLoad_Reply) Reset()         { *m = ConversationLoad_Reply{} }
func (m *ConversationLoad_Reply) String() string { return proto.CompactTextString(m) }
func (*ConversationLoad_Reply) ProtoMessage()    {}
func (*ConversationLoad_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{3, 1}
}
func (m *ConversationLoad_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationLoad_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationLoad_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationLoad_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationLoad_Reply.Merge(m, src)
}
func (m *ConversationLoad_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ConversationLoad_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationLoad_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationLoad_Reply proto.InternalMessageInfo

type ConversationMute struct {
}

func (m *ConversationMute) Reset()         { *m = ConversationMute{} }
func (m *ConversationMute) String() string { return proto.CompactTextString(m) }
func (*ConversationMute) ProtoMessage()    {}
func (*ConversationMute) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{4}
}
func (m *ConversationMute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationMute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationMute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationMute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationMute.Merge(m, src)
}
func (m *ConversationMute) XXX_Size() int {
	return m.Size()
}
func (m *ConversationMute) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationMute.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationMute proto.InternalMessageInfo

type ConversationMute_Request struct {
	GroupPK     string `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	MutedUntil  int64  `protobuf:"varint,2,opt,name=muted_until,json=mutedUntil,proto3" json:"muted_until,omitempty"`
	Unmute      bool   `protobuf:"varint,3,opt,name=unmute,proto3" json:"unmute,omitempty"`
	MuteForever bool   `protobuf:"varint,4,opt,name=mute_forever,json=muteForever,proto3" json:"mute_forever,omitempty"`
}

func (m *ConversationMute_Request) Reset()         { *m = ConversationMute_Request{} }
func (m *ConversationMute_Request) String() string { return proto.CompactTextString(m) }
func (*ConversationMute_Request) ProtoMessage()    {}
func (*ConversationMute_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{4, 0}
}
func (m *ConversationMute_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationMute_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationMute_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationMute_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationMute_Request.Merge(m, src)
}
func (m *ConversationMute_Request) XXX_Size() int {
	return m.Size()
}
func (m *ConversationMute_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationMute_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationMute_Request proto.InternalMessageInfo

func (m *ConversationMute_Request) GetGroupPK() string {
	if m != nil {
		return m.GroupPK
	}
	return ""
}

func (m *ConversationMute_Request) GetMutedUntil() int64 {
	if m != nil {
		return m.MutedUntil
	}
	return 0
}

func (m *ConversationMute_Request) GetUnmute() bool {
	if m != nil {
		return m.Unmute
	}
	return false
}

func (m *ConversationMute_Request) GetMuteForever() bool {
	if m != nil {
		return m.MuteForever
	}
	return false
}

type ConversationMute_Reply struct {
}

func (m *ConversationMute_Reply) Reset()         { *m = ConversationMute_Reply{} }
func (m *ConversationMute_Reply) String() string { return proto.CompactTextString(m) }
func (*ConversationMute_Reply) ProtoMessage()    {}
func (*ConversationMute_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{4, 1}
}
func (m *ConversationMute_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationMute_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationMute_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationMute_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationMute_Reply.Merge(m, src)
}
func (m *ConversationMute_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ConversationMute_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationMute_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationMute_Reply proto.InternalMessageInfo

type EchoTest struct {
}

func (m *EchoTest) Reset()         { *m = EchoTest{} }
func (m *EchoTest) String() string { return proto.CompactTextString(m) }
func (*EchoTest) ProtoMessage()    {}
func (*EchoTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{5}
}
func (m *EchoTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoTest.Merge(m, src)
}
func (m *EchoTest) XXX_Size() int {
	return m.Size()
}
func (m *EchoTest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoTest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoTest proto.InternalMessageInfo

type EchoTest_Request struct {
	Delay        uint64 `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
	Echo         string `protobuf:"bytes,2,opt,name=echo,proto3" json:"echo,omitempty"`
	TriggerError bool   `protobuf:"varint,3,opt,name=trigger_error,json=triggerError,proto3" json:"trigger_error,omitempty"`
}

func (m *EchoTest_Request) Reset()         { *m = EchoTest_Request{} }
func (m *EchoTest_Request) String() string { return proto.CompactTextString(m) }
func (*EchoTest_Request) ProtoMessage()    {}
func (*EchoTest_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{5, 0}
}
func (m *EchoTest_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoTest_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoTest_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoTest_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoTest_Request.Merge(m, src)
}
func (m *EchoTest_Request) XXX_Size() int {
	return m.Size()
}
func (m *EchoTest_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoTest_Request.DiscardUnknown(m)
}

var xxx_messageInfo_EchoTest_Request proto.InternalMessageInfo

func (m *EchoTest_Request) GetDelay() uint64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *EchoTest_Request) GetEcho() string {
	if m != nil {
		return m.Echo
	}
	return ""
}

func (m *EchoTest_Request) GetTriggerError() bool {
	if m != nil {
		return m.TriggerError
	}
	return false
}

type EchoTest_Reply struct {
	Echo string `protobuf:"bytes,1,opt,name=echo,proto3" json:"echo,omitempty"`
}

func (m *EchoTest_Reply) Reset()         { *m = EchoTest_Reply{} }
func (m *EchoTest_Reply) String() string { return proto.CompactTextString(m) }
func (*EchoTest_Reply) ProtoMessage()    {}
func (*EchoTest_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{5, 1}
}
func (m *EchoTest_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoTest_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoTest_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoTest_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoTest_Reply.Merge(m, src)
}
func (m *EchoTest_Reply) XXX_Size() int {
	return m.Size()
}
func (m *EchoTest_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoTest_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_EchoTest_Reply proto.InternalMessageInfo

func (m *EchoTest_Reply) GetEcho() string {
	if m != nil {
		return m.Echo
	}
	return ""
}

type EchoDuplexTest struct {
}

func (m *EchoDuplexTest) Reset()         { *m = EchoDuplexTest{} }
func (m *EchoDuplexTest) String() string { return proto.CompactTextString(m) }
func (*EchoDuplexTest) ProtoMessage()    {}
func (*EchoDuplexTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{6}
}
func (m *EchoDuplexTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoDuplexTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoDuplexTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoDuplexTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoDuplexTest.Merge(m, src)
}
func (m *EchoDuplexTest) XXX_Size() int {
	return m.Size()
}
func (m *EchoDuplexTest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoDuplexTest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoDuplexTest proto.InternalMessageInfo

type EchoDuplexTest_Request struct {
	Echo         string `protobuf:"bytes,2,opt,name=echo,proto3" json:"echo,omitempty"`
	TriggerError bool   `protobuf:"varint,3,opt,name=trigger_error,json=triggerError,proto3" json:"trigger_error,omitempty"`
}

func (m *EchoDuplexTest_Request) Reset()         { *m = EchoDuplexTest_Request{} }
func (m *EchoDuplexTest_Request) String() string { return proto.CompactTextString(m) }
func (*EchoDuplexTest_Request) ProtoMessage()    {}
func (*EchoDuplexTest_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{6, 0}
}
func (m *EchoDuplexTest_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoDuplexTest_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoDuplexTest_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoDuplexTest_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoDuplexTest_Request.Merge(m, src)
}
func (m *EchoDuplexTest_Request) XXX_Size() int {
	return m.Size()
}
func (m *EchoDuplexTest_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoDuplexTest_Request.DiscardUnknown(m)
}

var xxx_messageInfo_EchoDuplexTest_Request proto.InternalMessageInfo

func (m *EchoDuplexTest_Request) GetEcho() string {
	if m != nil {
		return m.Echo
	}
	return ""
}

func (m *EchoDuplexTest_Request) GetTriggerError() bool {
	if m != nil {
		return m.TriggerError
	}
	return false
}

type EchoDuplexTest_Reply struct {
	Echo string `protobuf:"bytes,1,opt,name=echo,proto3" json:"echo,omitempty"`
}

func (m *EchoDuplexTest_Reply) Reset()         { *m = EchoDuplexTest_Reply{} }
func (m *EchoDuplexTest_Reply) String() string { return proto.CompactTextString(m) }
func (*EchoDuplexTest_Reply) ProtoMessage()    {}
func (*EchoDuplexTest_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{6, 1}
}
func (m *EchoDuplexTest_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoDuplexTest_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoDuplexTest_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoDuplexTest_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoDuplexTest_Reply.Merge(m, src)
}
func (m *EchoDuplexTest_Reply) XXX_Size() int {
	return m.Size()
}
func (m *EchoDuplexTest_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoDuplexTest_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_EchoDuplexTest_Reply proto.InternalMessageInfo

func (m *EchoDuplexTest_Reply) GetEcho() string {
	if m != nil {
		return m.Echo
	}
	return ""
}

type InstanceShareableBertyID struct {
}

func (m *InstanceShareableBertyID) Reset()         { *m = InstanceShareableBertyID{} }
func (m *InstanceShareableBertyID) String() string { return proto.CompactTextString(m) }
func (*InstanceShareableBertyID) ProtoMessage()    {}
func (*InstanceShareableBertyID) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{7}
}
func (m *InstanceShareableBertyID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceShareableBertyID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceShareableBertyID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceShareableBertyID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceShareableBertyID.Merge(m, src)
}
func (m *InstanceShareableBertyID) XXX_Size() int {
	return m.Size()
}
func (m *InstanceShareableBertyID) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceShareableBertyID.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceShareableBertyID proto.InternalMessageInfo

type InstanceShareableBertyID_Request struct {
	// reset will regenerate a new link
	Reset_      bool   `protobuf:"varint,1,opt,name=reset,proto3" json:"reset,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// optional passphase to encrypt the link
	Passphrase []byte `protobuf:"bytes,3,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *InstanceShareableBertyID_Request) Reset()         { *m = InstanceShareableBertyID_Request{} }
func (m *InstanceShareableBertyID_Request) String() string { return proto.CompactTextString(m) }
func (*InstanceShareableBertyID_Request) ProtoMessage()    {}
func (*InstanceShareableBertyID_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{7, 0}
}
func (m *InstanceShareableBertyID_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceShareableBertyID_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceShareableBertyID_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceShareableBertyID_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceShareableBertyID_Request.Merge(m, src)
}
func (m *InstanceShareableBertyID_Request) XXX_Size() int {
	return m.Size()
}
func (m *InstanceShareableBertyID_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceShareableBertyID_Request.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceShareableBertyID_Request proto.InternalMessageInfo

func (m *InstanceShareableBertyID_Request) GetReset_() bool {
	if m != nil {
		return m.Reset_
	}
	return false
}

func (m *InstanceShareableBertyID_Request) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *InstanceShareableBertyID_Request) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type InstanceShareableBertyID_Reply struct {
	Link        *BertyLink `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	InternalURL string     `protobuf:"bytes,2,opt,name=internal_url,json=internalUrl,proto3" json:"internal_url,omitempty"`
	WebURL      string     `protobuf:"bytes,3,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (m *InstanceShareableBertyID_Reply) Reset()         { *m = InstanceShareableBertyID_Reply{} }
func (m *InstanceShareableBertyID_Reply) String() string { return proto.CompactTextString(m) }
func (*InstanceShareableBertyID_Reply) ProtoMessage()    {}
func (*InstanceShareableBertyID_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{7, 1}
}
func (m *InstanceShareableBertyID_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceShareableBertyID_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceShareableBertyID_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceShareableBertyID_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceShareableBertyID_Reply.Merge(m, src)
}
func (m *InstanceShareableBertyID_Reply) XXX_Size() int {
	return m.Size()
}
func (m *InstanceShareableBertyID_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceShareableBertyID_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceShareableBertyID_Reply proto.InternalMessageInfo

func (m *InstanceShareableBertyID_Reply) GetLink() *BertyLink {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *InstanceShareableBertyID_Reply) GetInternalURL() string {
	if m != nil {
		return m.InternalURL
	}
	return ""
}

func (m *InstanceShareableBertyID_Reply) GetWebURL() string {
	if m != nil {
		return m.WebURL
	}
	return ""
}

type ShareableBertyGroup struct {
}

func (m *ShareableBertyGroup) Reset()         { *m = ShareableBertyGroup{} }
func (m *ShareableBertyGroup) String() string { return proto.CompactTextString(m) }
func (*ShareableBertyGroup) ProtoMessage()    {}
func (*ShareableBertyGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{8}
}
func (m *ShareableBertyGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareableBertyGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareableBertyGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareableBertyGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareableBertyGroup.Merge(m, src)
}
func (m *ShareableBertyGroup) XXX_Size() int {
	return m.Size()
}
func (m *ShareableBertyGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareableBertyGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ShareableBertyGroup proto.InternalMessageInfo

type ShareableBertyGroup_Request struct {
	GroupPK   []byte `protobuf:"bytes,1,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (m *ShareableBertyGroup_Request) Reset()         { *m = ShareableBertyGroup_Request{} }
func (m *ShareableBertyGroup_Request) String() string { return proto.CompactTextString(m) }
func (*ShareableBertyGroup_Request) ProtoMessage()    {}
func (*ShareableBertyGroup_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{8, 0}
}
func (m *ShareableBertyGroup_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareableBertyGroup_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareableBertyGroup_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareableBertyGroup_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareableBertyGroup_Request.Merge(m, src)
}
func (m *ShareableBertyGroup_Request) XXX_Size() int {
	return m.Size()
}
func (m *ShareableBertyGroup_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareableBertyGroup_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ShareableBertyGroup_Request proto.InternalMessageInfo

func (m *ShareableBertyGroup_Request) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *ShareableBertyGroup_Request) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type ShareableBertyGroup_Reply struct {
	Link        *BertyLink `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	InternalURL string     `protobuf:"bytes,2,opt,name=internal_url,json=internalUrl,proto3" json:"internal_url,omitempty"`
	WebURL      string     `protobuf:"bytes,3,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (m *ShareableBertyGroup_Reply) Reset()         { *m = ShareableBertyGroup_Reply{} }
func (m *ShareableBertyGroup_Reply) String() string { return proto.CompactTextString(m) }
func (*ShareableBertyGroup_Reply) ProtoMessage()    {}
func (*ShareableBertyGroup_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{8, 1}
}
func (m *ShareableBertyGroup_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareableBertyGroup_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareableBertyGroup_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareableBertyGroup_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareableBertyGroup_Reply.Merge(m, src)
}
func (m *ShareableBertyGroup_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ShareableBertyGroup_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareableBertyGroup_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ShareableBertyGroup_Reply proto.InternalMessageInfo

func (m *ShareableBertyGroup_Reply) GetLink() *BertyLink {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *ShareableBertyGroup_Reply) GetInternalURL() string {
	if m != nil {
		return m.InternalURL
	}
	return ""
}

func (m *ShareableBertyGroup_Reply) GetWebURL() string {
	if m != nil {
		return m.WebURL
	}
	return ""
}

type DevShareInstanceBertyID struct {
}

func (m *DevShareInstanceBertyID) Reset()         { *m = DevShareInstanceBertyID{} }
func (m *DevShareInstanceBertyID) String() string { return proto.CompactTextString(m) }
func (*DevShareInstanceBertyID) ProtoMessage()    {}
func (*DevShareInstanceBertyID) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{9}
}
func (m *DevShareInstanceBertyID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevShareInstanceBertyID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevShareInstanceBertyID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevShareInstanceBertyID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevShareInstanceBertyID.Merge(m, src)
}
func (m *DevShareInstanceBertyID) XXX_Size() int {
	return m.Size()
}
func (m *DevShareInstanceBertyID) XXX_DiscardUnknown() {
	xxx_messageInfo_DevShareInstanceBertyID.DiscardUnknown(m)
}

var xxx_messageInfo_DevShareInstanceBertyID proto.InternalMessageInfo

type DevShareInstanceBertyID_Request struct {
	// reset will regenerate a new link
	Reset_      bool   `protobuf:"varint,1,opt,name=reset,proto3" json:"reset,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *DevShareInstanceBertyID_Request) Reset()         { *m = DevShareInstanceBertyID_Request{} }
func (m *DevShareInstanceBertyID_Request) String() string { return proto.CompactTextString(m) }
func (*DevShareInstanceBertyID_Request) ProtoMessage()    {}
func (*DevShareInstanceBertyID_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{9, 0}
}
func (m *DevShareInstanceBertyID_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevShareInstanceBertyID_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevShareInstanceBertyID_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevShareInstanceBertyID_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevShareInstanceBertyID_Request.Merge(m, src)
}
func (m *DevShareInstanceBertyID_Request) XXX_Size() int {
	return m.Size()
}
func (m *DevShareInstanceBertyID_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DevShareInstanceBertyID_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DevShareInstanceBertyID_Request proto.InternalMessageInfo

func (m *DevShareInstanceBertyID_Request) GetReset_() bool {
	if m != nil {
		return m.Reset_
	}
	return false
}

func (m *DevShareInstanceBertyID_Request) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type DevShareInstanceBertyID_Reply struct {
}

func (m *DevShareInstanceBertyID_Reply) Reset()         { *m = DevShareInstanceBertyID_Reply{} }
func (m *DevShareInstanceBertyID_Reply) String() string { return proto.CompactTextString(m) }
func (*DevShareInstanceBertyID_Reply) ProtoMessage()    {}
func (*DevShareInstanceBertyID_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{9, 1}
}
func (m *DevShareInstanceBertyID_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevShareInstanceBertyID_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevShareInstanceBertyID_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevShareInstanceBertyID_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevShareInstanceBertyID_Reply.Merge(m, src)
}
func (m *DevShareInstanceBertyID_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DevShareInstanceBertyID_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DevShareInstanceBertyID_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DevShareInstanceBertyID_Reply proto.InternalMessageInfo

type DevStreamLogs struct {
}

func (m *DevStreamLogs) Reset()         { *m = DevStreamLogs{} }
func (m *DevStreamLogs) String() string { return proto.CompactTextString(m) }
func (*DevStreamLogs) ProtoMessage()    {}
func (*DevStreamLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{10}
}
func (m *DevStreamLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevStreamLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevStreamLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevStreamLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevStreamLogs.Merge(m, src)
}
func (m *DevStreamLogs) XXX_Size() int {
	return m.Size()
}
func (m *DevStreamLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_DevStreamLogs.DiscardUnknown(m)
}

var xxx_messageInfo_DevStreamLogs proto.InternalMessageInfo

type DevStreamLogs_Request struct {
}

func (m *DevStreamLogs_Request) Reset()         { *m = DevStreamLogs_Request{} }
func (m *DevStreamLogs_Request) String() string { return proto.CompactTextString(m) }
func (*DevStreamLogs_Request) ProtoMessage()    {}
func (*DevStreamLogs_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{10, 0}
}
func (m *DevStreamLogs_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevStreamLogs_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevStreamLogs_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevStreamLogs_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevStreamLogs_Request.Merge(m, src)
}
func (m *DevStreamLogs_Request) XXX_Size() int {
	return m.Size()
}
func (m *DevStreamLogs_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DevStreamLogs_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DevStreamLogs_Request proto.InternalMessageInfo

type DevStreamLogs_Reply struct {
	Line string `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
}

func (m *DevStreamLogs_Reply) Reset()         { *m = DevStreamLogs_Reply{} }
func (m *DevStreamLogs_Reply) String() string { return proto.CompactTextString(m) }
func (*DevStreamLogs_Reply) ProtoMessage()    {}
func (*DevStreamLogs_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{10, 1}
}
func (m *DevStreamLogs_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevStreamLogs_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevStreamLogs_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevStreamLogs_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevStreamLogs_Reply.Merge(m, src)
}
func (m *DevStreamLogs_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DevStreamLogs_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DevStreamLogs_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DevStreamLogs_Reply proto.InternalMessageInfo

func (m *DevStreamLogs_Reply) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type ParseDeepLink struct {
}

func (m *ParseDeepLink) Reset()         { *m = ParseDeepLink{} }
func (m *ParseDeepLink) String() string { return proto.CompactTextString(m) }
func (*ParseDeepLink) ProtoMessage()    {}
func (*ParseDeepLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{11}
}
func (m *ParseDeepLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseDeepLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseDeepLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseDeepLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseDeepLink.Merge(m, src)
}
func (m *ParseDeepLink) XXX_Size() int {
	return m.Size()
}
func (m *ParseDeepLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseDeepLink.DiscardUnknown(m)
}

var xxx_messageInfo_ParseDeepLink proto.InternalMessageInfo

type ParseDeepLink_Request struct {
	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	// optional passphase to decrypt the link
	Passphrase []byte `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *ParseDeepLink_Request) Reset()         { *m = ParseDeepLink_Request{} }
func (m *ParseDeepLink_Request) String() string { return proto.CompactTextString(m) }
func (*ParseDeepLink_Request) ProtoMessage()    {}
func (*ParseDeepLink_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{11, 0}
}
func (m *ParseDeepLink_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseDeepLink_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseDeepLink_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseDeepLink_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseDeepLink_Request.Merge(m, src)
}
func (m *ParseDeepLink_Request) XXX_Size() int {
	return m.Size()
}
func (m *ParseDeepLink_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseDeepLink_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ParseDeepLink_Request proto.InternalMessageInfo

func (m *ParseDeepLink_Request) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ParseDeepLink_Request) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type ParseDeepLink_Reply struct {
	Link *BertyLink `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
}

func (m *ParseDeepLink_Reply) Reset()         { *m = ParseDeepLink_Reply{} }
func (m *ParseDeepLink_Reply) String() string { return proto.CompactTextString(m) }
func (*ParseDeepLink_Reply) ProtoMessage()    {}
func (*ParseDeepLink_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{11, 1}
}
func (m *ParseDeepLink_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseDeepLink_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseDeepLink_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseDeepLink_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseDeepLink_Reply.Merge(m, src)
}
func (m *ParseDeepLink_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ParseDeepLink_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseDeepLink_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ParseDeepLink_Reply proto.InternalMessageInfo

func (m *ParseDeepLink_Reply) GetLink() *BertyLink {
	if m != nil {
		return m.Link
	}
	return nil
}

type BertyLink struct {
	Kind            BertyLink_Kind             `protobuf:"varint,1,opt,name=kind,proto3,enum=berty.messenger.v1.BertyLink_Kind" json:"kind,omitempty"`
	BertyID         *BertyID                   `protobuf:"bytes,2,opt,name=berty_id,json=bertyId,proto3" json:"berty_id,omitempty"`
	BertyGroup      *BertyGroup                `protobuf:"bytes,3,opt,name=berty_group,json=bertyGroup,proto3" json:"berty_group,omitempty"`
	BertyMessageRef *BertyLink_BertyMessageRef `protobuf:"bytes,5,opt,name=berty_message_ref,json=bertyMessageRef,proto3" json:"berty_message_ref,omitempty"`
	Encrypted       *BertyLink_Encrypted       `protobuf:"bytes,4,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
}

func (m *BertyLink) Reset()         { *m = BertyLink{} }
func (m *BertyLink) String() string { return proto.CompactTextString(m) }
func (*BertyLink) ProtoMessage()    {}
func (*BertyLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{12}
}
func (m *BertyLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BertyLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BertyLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BertyLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BertyLink.Merge(m, src)
}
func (m *BertyLink) XXX_Size() int {
	return m.Size()
}
func (m *BertyLink) XXX_DiscardUnknown() {
	xxx_messageInfo_BertyLink.DiscardUnknown(m)
}

var xxx_messageInfo_BertyLink proto.InternalMessageInfo

func (m *BertyLink) GetKind() BertyLink_Kind {
	if m != nil {
		return m.Kind
	}
	return BertyLink_UnknownKind
}

func (m *BertyLink) GetBertyID() *BertyID {
	if m != nil {
		return m.BertyID
	}
	return nil
}

func (m *BertyLink) GetBertyGroup() *BertyGroup {
	if m != nil {
		return m.BertyGroup
	}
	return nil
}

func (m *BertyLink) GetBertyMessageRef() *BertyLink_BertyMessageRef {
	if m != nil {
		return m.BertyMessageRef
	}
	return nil
}

func (m *BertyLink) GetEncrypted() *BertyLink_Encrypted {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

// Encrypted is a clear structure containing clear and encrypted fields.
//
// We prefer to use a clear struct with encrypted fields instead of a simple
// encrypted struct, to improves chances of having a valid structure even
// with an invalid passphase. This will force an attacker to have more resources
// to test more false-positive guesses.
type BertyLink_Encrypted struct {
	// kind is a clear representation of the unencrypted link type.
	Kind BertyLink_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=berty.messenger.v1.BertyLink_Kind" json:"kind,omitempty"`
	// nonce is a clear field used by scrypt as "salt" to derive the passphrase and
	// also used by cipher.NewCTR as "iv" to initialize a stream cipher.
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// display_name is an optional clear representation of the display name.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// checksum is an optional field used to check if the decryption was successful.
	// the length is customizable (SHAKE256). a longer checksum means less conflicts.
	// having more conflicts may be bad in term of UX, but make it easier for an attacker
	// to run an offline bruteforce.
	Checksum                    []byte                  `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	ContactPublicRendezvousSeed []byte                  `protobuf:"bytes,10,opt,name=contact_public_rendezvous_seed,json=contactPublicRendezvousSeed,proto3" json:"contact_public_rendezvous_seed,omitempty"`
	ContactAccountPK            []byte                  `protobuf:"bytes,11,opt,name=contact_account_pk,json=contactAccountPk,proto3" json:"contact_account_pk,omitempty"`
	GroupPublicKey              []byte                  `protobuf:"bytes,20,opt,name=group_public_key,json=groupPublicKey,proto3" json:"group_public_key,omitempty"`
	GroupSecret                 []byte                  `protobuf:"bytes,21,opt,name=group_secret,json=groupSecret,proto3" json:"group_secret,omitempty"`
	GroupSecretSig              []byte                  `protobuf:"bytes,22,opt,name=group_secret_sig,json=groupSecretSig,proto3" json:"group_secret_sig,omitempty"`
	GroupType                   protocoltypes.GroupType `protobuf:"varint,23,opt,name=group_type,json=groupType,proto3,enum=weshnet.protocol.v1.GroupType" json:"group_type,omitempty"`
	GroupSignPub                []byte                  `protobuf:"bytes,24,opt,name=group_sign_pub,json=groupSignPub,proto3" json:"group_sign_pub,omitempty"`
	GroupLinkKeySig             []byte                  `protobuf:"bytes,25,opt,name=group_link_key_sig,json=groupLinkKeySig,proto3" json:"group_link_key_sig,omitempty"`
}

func (m *BertyLink_Encrypted) Reset()         { *m = BertyLink_Encrypted{} }
func (m *BertyLink_Encrypted) String() string { return proto.CompactTextString(m) }
func (*BertyLink_Encrypted) ProtoMessage()    {}
func (*BertyLink_Encrypted) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{12, 0}
}
func (m *BertyLink_Encrypted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BertyLink_Encrypted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BertyLink_Encrypted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BertyLink_Encrypted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BertyLink_Encrypted.Merge(m, src)
}
func (m *BertyLink_Encrypted) XXX_Size() int {
	return m.Size()
}
func (m *BertyLink_Encrypted) XXX_DiscardUnknown() {
	xxx_messageInfo_BertyLink_Encrypted.DiscardUnknown(m)
}

var xxx_messageInfo_BertyLink_Encrypted proto.InternalMessageInfo

func (m *BertyLink_Encrypted) GetKind() BertyLink_Kind {
	if m != nil {
		return m.Kind
	}
	return BertyLink_UnknownKind
}

func (m *BertyLink_Encrypted) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *BertyLink_Encrypted) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *BertyLink_Encrypted) GetChecksum() []byte {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func (m *BertyLink_Encrypted) GetContactPublicRendezvousSeed() []byte {
	if m != nil {
		return m.ContactPublicRendezvousSeed
	}
	return nil
}

func (m *BertyLink_Encrypted) GetContactAccountPK() []byte {
	if m != nil {
		return m.ContactAccountPK
	}
	return nil
}

func (m *BertyLink_Encrypted) GetGroupPublicKey() []byte {
	if m != nil {
		return m.GroupPublicKey
	}
	return nil
}

func (m *BertyLink_Encrypted) GetGroupSecret() []byte {
	if m != nil {
		return m.GroupSecret
	}
	return nil
}

func (m *BertyLink_Encrypted) GetGroupSecretSig() []byte {
	if m != nil {
		return m.GroupSecretSig
	}
	return nil
}

func (m *BertyLink_Encrypted) GetGroupType() protocoltypes.GroupType {
	if m != nil {
		return m.GroupType
	}
	return protocoltypes.GroupTypeUndefined
}

func (m *BertyLink_Encrypted) GetGroupSignPub() []byte {
	if m != nil {
		return m.GroupSignPub
	}
	return nil
}

func (m *BertyLink_Encrypted) GetGroupLinkKeySig() []byte {
	if m != nil {
		return m.GroupLinkKeySig
	}
	return nil
}

type BertyLink_BertyMessageRef struct {
	AccountID string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	GroupPK   string `protobuf:"bytes,2,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	MessageID string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *BertyLink_BertyMessageRef) Reset()         { *m = BertyLink_BertyMessageRef{} }
func (m *BertyLink_BertyMessageRef) String() string { return proto.CompactTextString(m) }
func (*BertyLink_BertyMessageRef) ProtoMessage()    {}
func (*BertyLink_BertyMessageRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{12, 1}
}
func (m *BertyLink_BertyMessageRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BertyLink_BertyMessageRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BertyLink_BertyMessageRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BertyLink_BertyMessageRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BertyLink_BertyMessageRef.Merge(m, src)
}
func (m *BertyLink_BertyMessageRef) XXX_Size() int {
	return m.Size()
}
func (m *BertyLink_BertyMessageRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BertyLink_BertyMessageRef.DiscardUnknown(m)
}

var xxx_messageInfo_BertyLink_BertyMessageRef proto.InternalMessageInfo

func (m *BertyLink_BertyMessageRef) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *BertyLink_BertyMessageRef) GetGroupPK() string {
	if m != nil {
		return m.GroupPK
	}
	return ""
}

func (m *BertyLink_BertyMessageRef) GetMessageID() string {
	if m != nil {
		return m.MessageID
	}
	return ""
}

type SendContactRequest struct {
}

func (m *SendContactRequest) Reset()         { *m = SendContactRequest{} }
func (m *SendContactRequest) String() string { return proto.CompactTextString(m) }
func (*SendContactRequest) ProtoMessage()    {}
func (*SendContactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{13}
}
func (m *SendContactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendContactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendContactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendContactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendContactRequest.Merge(m, src)
}
func (m *SendContactRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendContactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendContactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendContactRequest proto.InternalMessageInfo

type SendContactRequest_Request struct {
	BertyID     *BertyID `protobuf:"bytes,1,opt,name=berty_id,json=bertyId,proto3" json:"berty_id,omitempty"`
	Metadata    []byte   `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	OwnMetadata []byte   `protobuf:"bytes,3,opt,name=own_metadata,json=ownMetadata,proto3" json:"own_metadata,omitempty"`
}

func (m *SendContactRequest_Request) Reset()         { *m = SendContactRequest_Request{} }
func (m *SendContactRequest_Request) String() string { return proto.CompactTextString(m) }
func (*SendContactRequest_Request) ProtoMessage()    {}
func (*SendContactRequest_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{13, 0}
}
func (m *SendContactRequest_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendContactRequest_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendContactRequest_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendContactRequest_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendContactRequest_Request.Merge(m, src)
}
func (m *SendContactRequest_Request) XXX_Size() int {
	return m.Size()
}
func (m *SendContactRequest_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_SendContactRequest_Request.DiscardUnknown(m)
}

var xxx_messageInfo_SendContactRequest_Request proto.InternalMessageInfo

func (m *SendContactRequest_Request) GetBertyID() *BertyID {
	if m != nil {
		return m.BertyID
	}
	return nil
}

func (m *SendContactRequest_Request) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SendContactRequest_Request) GetOwnMetadata() []byte {
	if m != nil {
		return m.OwnMetadata
	}
	return nil
}

type SendContactRequest_Reply struct {
}

func (m *SendContactRequest_Reply) Reset()         { *m = SendContactRequest_Reply{} }
func (m *SendContactRequest_Reply) String() string { return proto.CompactTextString(m) }
func (*SendContactRequest_Reply) ProtoMessage()    {}
func (*SendContactRequest_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{13, 1}
}
func (m *SendContactRequest_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendContactRequest_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendContactRequest_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendContactRequest_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendContactRequest_Reply.Merge(m, src)
}
func (m *SendContactRequest_Reply) XXX_Size() int {
	return m.Size()
}
func (m *SendContactRequest_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendContactRequest_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_SendContactRequest_Reply proto.InternalMessageInfo

type BertyID struct {
	PublicRendezvousSeed []byte `protobuf:"bytes,1,opt,name=public_rendezvous_seed,json=publicRendezvousSeed,proto3" json:"public_rendezvous_seed,omitempty"`
	AccountPK            []byte `protobuf:"bytes,2,opt,name=account_pk,json=accountPk,proto3" json:"account_pk,omitempty"`
	DisplayName          string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *BertyID) Reset()         { *m = BertyID{} }
func (m *BertyID) String() string { return proto.CompactTextString(m) }
func (*BertyID) ProtoMessage()    {}
func (*BertyID) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{14}
}
func (m *BertyID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BertyID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BertyID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BertyID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BertyID.Merge(m, src)
}
func (m *BertyID) XXX_Size() int {
	return m.Size()
}
func (m *BertyID) XXX_DiscardUnknown() {
	xxx_messageInfo_BertyID.DiscardUnknown(m)
}

var xxx_messageInfo_BertyID proto.InternalMessageInfo

func (m *BertyID) GetPublicRendezvousSeed() []byte {
	if m != nil {
		return m.PublicRendezvousSeed
	}
	return nil
}

func (m *BertyID) GetAccountPK() []byte {
	if m != nil {
		return m.AccountPK
	}
	return nil
}

func (m *BertyID) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type BertyGroup struct {
	Group       *protocoltypes.Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	DisplayName string               `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *BertyGroup) Reset()         { *m = BertyGroup{} }
func (m *BertyGroup) String() string { return proto.CompactTextString(m) }
func (*BertyGroup) ProtoMessage()    {}
func (*BertyGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{15}
}
func (m *BertyGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BertyGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BertyGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BertyGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BertyGroup.Merge(m, src)
}
func (m *BertyGroup) XXX_Size() int {
	return m.Size()
}
func (m *BertyGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_BertyGroup.DiscardUnknown(m)
}

var xxx_messageInfo_BertyGroup proto.InternalMessageInfo

func (m *BertyGroup) GetGroup() *protocoltypes.Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *BertyGroup) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// AppMessage is the app layer format
type AppMessage struct {
	Type      AppMessage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=berty.messenger.v1.AppMessage_Type" json:"type,omitempty"`
	Payload   []byte          `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	SentDate  int64           `protobuf:"varint,3,opt,name=sent_date,json=sentDate,proto3" json:"sentDate"`
	TargetCID string          `protobuf:"bytes,5,opt,name=target_cid,json=targetCid,proto3" json:"target_cid,omitempty"`
}

func (m *AppMessage) Reset()         { *m = AppMessage{} }
func (m *AppMessage) String() string { return proto.CompactTextString(m) }
func (*AppMessage) ProtoMessage()    {}
func (*AppMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16}
}
func (m *AppMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage.Merge(m, src)
}
func (m *AppMessage) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage proto.InternalMessageInfo

func (m *AppMessage) GetType() AppMessage_Type {
	if m != nil {
		return m.Type
	}
	return AppMessage_Undefined
}

func (m *AppMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *AppMessage) GetSentDate() int64 {
	if m != nil {
		return m.SentDate
	}
	return 0
}

func (m *AppMessage) GetTargetCID() string {
	if m != nil {
		return m.TargetCID
	}
	return ""
}

type AppMessage_UserMessage struct {
	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *AppMessage_UserMessage) Reset()         { *m = AppMessage_UserMessage{} }
func (m *AppMessage_UserMessage) String() string { return proto.CompactTextString(m) }
func (*AppMessage_UserMessage) ProtoMessage()    {}
func (*AppMessage_UserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 0}
}
func (m *AppMessage_UserMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_UserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_UserMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_UserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_UserMessage.Merge(m, src)
}
func (m *AppMessage_UserMessage) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_UserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_UserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_UserMessage proto.InternalMessageInfo

func (m *AppMessage_UserMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type AppMessage_GroupInvitation struct {
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (m *AppMessage_GroupInvitation) Reset()         { *m = AppMessage_GroupInvitation{} }
func (m *AppMessage_GroupInvitation) String() string { return proto.CompactTextString(m) }
func (*AppMessage_GroupInvitation) ProtoMessage()    {}
func (*AppMessage_GroupInvitation) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 1}
}
func (m *AppMessage_GroupInvitation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_GroupInvitation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_GroupInvitation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_GroupInvitation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_GroupInvitation.Merge(m, src)
}
func (m *AppMessage_GroupInvitation) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_GroupInvitation) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_GroupInvitation.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_GroupInvitation proto.InternalMessageInfo

func (m *AppMessage_GroupInvitation) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type AppMessage_SetGroupInfo struct {
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *AppMessage_SetGroupInfo) Reset()         { *m = AppMessage_SetGroupInfo{} }
func (m *AppMessage_SetGroupInfo) String() string { return proto.CompactTextString(m) }
func (*AppMessage_SetGroupInfo) ProtoMessage()    {}
func (*AppMessage_SetGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 2}
}
func (m *AppMessage_SetGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_SetGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_SetGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_SetGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_SetGroupInfo.Merge(m, src)
}
func (m *AppMessage_SetGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_SetGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_SetGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_SetGroupInfo proto.InternalMessageInfo

func (m *AppMessage_SetGroupInfo) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type AppMessage_SetUserInfo struct {
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *AppMessage_SetUserInfo) Reset()         { *m = AppMessage_SetUserInfo{} }
func (m *AppMessage_SetUserInfo) String() string { return proto.CompactTextString(m) }
func (*AppMessage_SetUserInfo) ProtoMessage()    {}
func (*AppMessage_SetUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 3}
}
func (m *AppMessage_SetUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_SetUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_SetUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_SetUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_SetUserInfo.Merge(m, src)
}
func (m *AppMessage_SetUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_SetUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_SetUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_SetUserInfo proto.InternalMessageInfo

func (m *AppMessage_SetUserInfo) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type AppMessage_Acknowledge struct {
}

func (m *AppMessage_Acknowledge) Reset()         { *m = AppMessage_Acknowledge{} }
func (m *AppMessage_Acknowledge) String() string { return proto.CompactTextString(m) }
func (*AppMessage_Acknowledge) ProtoMessage()    {}
func (*AppMessage_Acknowledge) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 4}
}
func (m *AppMessage_Acknowledge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_Acknowledge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_Acknowledge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_Acknowledge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_Acknowledge.Merge(m, src)
}
func (m *AppMessage_Acknowledge) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_Acknowledge) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_Acknowledge.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_Acknowledge proto.InternalMessageInfo

type AppMessage_AccountDirectoryServiceRegistered struct {
	Identifier                     string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	IdentifierProofIssuer          string `protobuf:"bytes,2,opt,name=identifier_proof_issuer,json=identifierProofIssuer,proto3" json:"identifier_proof_issuer,omitempty"`
	RegistrationDate               int64  `protobuf:"varint,3,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	ExpirationDate                 int64  `protobuf:"varint,4,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	ServerAddr                     string `protobuf:"bytes,5,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	DirectoryRecordToken           string `protobuf:"bytes,6,opt,name=directory_record_token,json=directoryRecordToken,proto3" json:"directory_record_token,omitempty"`
	DirectoryRecordUnregisterToken string `protobuf:"bytes,7,opt,name=directory_record_unregister_token,json=directoryRecordUnregisterToken,proto3" json:"directory_record_unregister_token,omitempty"`
}

func (m *AppMessage_AccountDirectoryServiceRegistered) Reset() {
	*m = AppMessage_AccountDirectoryServiceRegistered{}
}
func (m *AppMessage_AccountDirectoryServiceRegistered) String() string {
	return proto.CompactTextString(m)
}
func (*AppMessage_AccountDirectoryServiceRegistered) ProtoMessage() {}
func (*AppMessage_AccountDirectoryServiceRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 5}
}
func (m *AppMessage_AccountDirectoryServiceRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_AccountDirectoryServiceRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_AccountDirectoryServiceRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_AccountDirectoryServiceRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_AccountDirectoryServiceRegistered.Merge(m, src)
}
func (m *AppMessage_AccountDirectoryServiceRegistered) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_AccountDirectoryServiceRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_AccountDirectoryServiceRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_AccountDirectoryServiceRegistered proto.InternalMessageInfo

func (m *AppMessage_AccountDirectoryServiceRegistered) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AppMessage_AccountDirectoryServiceRegistered) GetIdentifierProofIssuer() string {
	if m != nil {
		return m.IdentifierProofIssuer
	}
	return ""
}

func (m *AppMessage_AccountDirectoryServiceRegistered) GetRegistrationDate() int64 {
	if m != nil {
		return m.RegistrationDate
	}
	return 0
}

func (m *AppMessage_AccountDirectoryServiceRegistered) GetExpirationDate() int64 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

func (m *AppMessage_AccountDirectoryServiceRegistered) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *AppMessage_AccountDirectoryServiceRegistered) GetDirectoryRecordToken() string {
	if m != nil {
		return m.DirectoryRecordToken
	}
	return ""
}

func (m *AppMessage_AccountDirectoryServiceRegistered) GetDirectoryRecordUnregisterToken() string {
	if m != nil {
		return m.DirectoryRecordUnregisterToken
	}
	return ""
}

type AppMessage_AccountDirectoryServiceUnregistered struct {
	Identifier            string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	IdentifierProofIssuer string `protobuf:"bytes,2,opt,name=identifier_proof_issuer,json=identifierProofIssuer,proto3" json:"identifier_proof_issuer,omitempty"`
	RemovalDate           int64  `protobuf:"varint,3,opt,name=removal_date,json=removalDate,proto3" json:"removal_date,omitempty"`
	ServerAddr            string `protobuf:"bytes,4,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	DirectoryRecordToken  string `protobuf:"bytes,5,opt,name=directory_record_token,json=directoryRecordToken,proto3" json:"directory_record_token,omitempty"`
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) Reset() {
	*m = AppMessage_AccountDirectoryServiceUnregistered{}
}
func (m *AppMessage_AccountDirectoryServiceUnregistered) String() string {
	return proto.CompactTextString(m)
}
func (*AppMessage_AccountDirectoryServiceUnregistered) ProtoMessage() {}
func (*AppMessage_AccountDirectoryServiceUnregistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 6}
}
func (m *AppMessage_AccountDirectoryServiceUnregistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_AccountDirectoryServiceUnregistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_AccountDirectoryServiceUnregistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_AccountDirectoryServiceUnregistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_AccountDirectoryServiceUnregistered.Merge(m, src)
}
func (m *AppMessage_AccountDirectoryServiceUnregistered) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_AccountDirectoryServiceUnregistered) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_AccountDirectoryServiceUnregistered.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_AccountDirectoryServiceUnregistered proto.InternalMessageInfo

func (m *AppMessage_AccountDirectoryServiceUnregistered) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) GetIdentifierProofIssuer() string {
	if m != nil {
		return m.IdentifierProofIssuer
	}
	return ""
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) GetRemovalDate() int64 {
	if m != nil {
		return m.RemovalDate
	}
	return 0
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) GetDirectoryRecordToken() string {
	if m != nil {
		return m.DirectoryRecordToken
	}
	return ""
}

type AppMessage_ServiceAddToken struct {
	Token             string                          `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SupportedServices []*ServiceTokenSupportedService `protobuf:"bytes,2,rep,name=supported_services,json=supportedServices,proto3" json:"supported_services,omitempty"`
	AuthenticationURL string                          `protobuf:"bytes,3,opt,name=authentication_url,json=authenticationUrl,proto3" json:"authentication_url,omitempty"`
	Expiration        int64                           `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (m *AppMessage_ServiceAddToken) Reset()         { *m = AppMessage_ServiceAddToken{} }
func (m *AppMessage_ServiceAddToken) String() string { return proto.CompactTextString(m) }
func (*AppMessage_ServiceAddToken) ProtoMessage()    {}
func (*AppMessage_ServiceAddToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 7}
}
func (m *AppMessage_ServiceAddToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_ServiceAddToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_ServiceAddToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_ServiceAddToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_ServiceAddToken.Merge(m, src)
}
func (m *AppMessage_ServiceAddToken) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_ServiceAddToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_ServiceAddToken.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_ServiceAddToken proto.InternalMessageInfo

func (m *AppMessage_ServiceAddToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AppMessage_ServiceAddToken) GetSupportedServices() []*ServiceTokenSupportedService {
	if m != nil {
		return m.SupportedServices
	}
	return nil
}

func (m *AppMessage_ServiceAddToken) GetAuthenticationURL() string {
	if m != nil {
		return m.AuthenticationURL
	}
	return ""
}

func (m *AppMessage_ServiceAddToken) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type AppMessage_ServiceRemoveToken struct {
	TokenID string `protobuf:"bytes,2,opt,name=tokenid,proto3" json:"tokenid,omitempty"`
}

func (m *AppMessage_ServiceRemoveToken) Reset()         { *m = AppMessage_ServiceRemoveToken{} }
func (m *AppMessage_ServiceRemoveToken) String() string { return proto.CompactTextString(m) }
func (*AppMessage_ServiceRemoveToken) ProtoMessage()    {}
func (*AppMessage_ServiceRemoveToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 8}
}
func (m *AppMessage_ServiceRemoveToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_ServiceRemoveToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_ServiceRemoveToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_ServiceRemoveToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_ServiceRemoveToken.Merge(m, src)
}
func (m *AppMessage_ServiceRemoveToken) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_ServiceRemoveToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_ServiceRemoveToken.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_ServiceRemoveToken proto.InternalMessageInfo

func (m *AppMessage_ServiceRemoveToken) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

type AppMessage_PushSetDeviceToken struct {
	DeviceToken *pushtypes.PushServiceReceiver `protobuf:"bytes,1,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
}

func (m *AppMessage_PushSetDeviceToken) Reset()         { *m = AppMessage_PushSetDeviceToken{} }
func (m *AppMessage_PushSetDeviceToken) String() string { return proto.CompactTextString(m) }
func (*AppMessage_PushSetDeviceToken) ProtoMessage()    {}
func (*AppMessage_PushSetDeviceToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 9}
}
func (m *AppMessage_PushSetDeviceToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_PushSetDeviceToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_PushSetDeviceToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_PushSetDeviceToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_PushSetDeviceToken.Merge(m, src)
}
func (m *AppMessage_PushSetDeviceToken) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_PushSetDeviceToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_PushSetDeviceToken.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_PushSetDeviceToken proto.InternalMessageInfo

func (m *AppMessage_PushSetDeviceToken) GetDeviceToken() *pushtypes.PushServiceReceiver {
	if m != nil {
		return m.DeviceToken
	}
	return nil
}

type AppMessage_PushSetServer struct {
	Server *PushServer `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (m *AppMessage_PushSetServer) Reset()         { *m = AppMessage_PushSetServer{} }
func (m *AppMessage_PushSetServer) String() string { return proto.CompactTextString(m) }
func (*AppMessage_PushSetServer) ProtoMessage()    {}
func (*AppMessage_PushSetServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 10}
}
func (m *AppMessage_PushSetServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_PushSetServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_PushSetServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_PushSetServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_PushSetServer.Merge(m, src)
}
func (m *AppMessage_PushSetServer) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_PushSetServer) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_PushSetServer.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_PushSetServer proto.InternalMessageInfo

func (m *AppMessage_PushSetServer) GetServer() *PushServer {
	if m != nil {
		return m.Server
	}
	return nil
}

type AppMessage_PushSetMemberToken struct {
	MemberToken *PushMemberTokenUpdate `protobuf:"bytes,1,opt,name=member_token,json=memberToken,proto3" json:"member_token,omitempty"`
}

func (m *AppMessage_PushSetMemberToken) Reset()         { *m = AppMessage_PushSetMemberToken{} }
func (m *AppMessage_PushSetMemberToken) String() string { return proto.CompactTextString(m) }
func (*AppMessage_PushSetMemberToken) ProtoMessage()    {}
func (*AppMessage_PushSetMemberToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{16, 11}
}
func (m *AppMessage_PushSetMemberToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMessage_PushSetMemberToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMessage_PushSetMemberToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMessage_PushSetMemberToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMessage_PushSetMemberToken.Merge(m, src)
}
func (m *AppMessage_PushSetMemberToken) XXX_Size() int {
	return m.Size()
}
func (m *AppMessage_PushSetMemberToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMessage_PushSetMemberToken.DiscardUnknown(m)
}

var xxx_messageInfo_AppMessage_PushSetMemberToken proto.InternalMessageInfo

func (m *AppMessage_PushSetMemberToken) GetMemberToken() *PushMemberTokenUpdate {
	if m != nil {
		return m.MemberToken
	}
	return nil
}

type SystemInfo struct {
}

func (m *SystemInfo) Reset()         { *m = SystemInfo{} }
func (m *SystemInfo) String() string { return proto.CompactTextString(m) }
func (*SystemInfo) ProtoMessage()    {}
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{17}
}
func (m *SystemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo.Merge(m, src)
}
func (m *SystemInfo) XXX_Size() int {
	return m.Size()
}
func (m *SystemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo proto.InternalMessageInfo

type SystemInfo_Request struct {
}

func (m *SystemInfo_Request) Reset()         { *m = SystemInfo_Request{} }
func (m *SystemInfo_Request) String() string { return proto.CompactTextString(m) }
func (*SystemInfo_Request) ProtoMessage()    {}
func (*SystemInfo_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{17, 0}
}
func (m *SystemInfo_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemInfo_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemInfo_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo_Request.Merge(m, src)
}
func (m *SystemInfo_Request) XXX_Size() int {
	return m.Size()
}
func (m *SystemInfo_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo_Request proto.InternalMessageInfo

type SystemInfo_Reply struct {
	Protocol  *protocoltypes.SystemInfo_Reply `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Messenger *SystemInfo_Messenger           `protobuf:"bytes,2,opt,name=messenger,proto3" json:"messenger,omitempty"`
}

func (m *SystemInfo_Reply) Reset()         { *m = SystemInfo_Reply{} }
func (m *SystemInfo_Reply) String() string { return proto.CompactTextString(m) }
func (*SystemInfo_Reply) ProtoMessage()    {}
func (*SystemInfo_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{17, 1}
}
func (m *SystemInfo_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemInfo_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemInfo_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemInfo_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo_Reply.Merge(m, src)
}
func (m *SystemInfo_Reply) XXX_Size() int {
	return m.Size()
}
func (m *SystemInfo_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo_Reply proto.InternalMessageInfo

func (m *SystemInfo_Reply) GetProtocol() *protocoltypes.SystemInfo_Reply {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *SystemInfo_Reply) GetMessenger() *SystemInfo_Messenger {
	if m != nil {
		return m.Messenger
	}
	return nil
}

type SystemInfo_Messenger struct {
	Process               *protocoltypes.SystemInfo_Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Warns                 []string                          `protobuf:"bytes,2,rep,name=warns,proto3" json:"warns,omitempty"`
	ProtocolInSameProcess bool                              `protobuf:"varint,3,opt,name=protocol_in_same_process,json=protocolInSameProcess,proto3" json:"protocol_in_same_process,omitempty"`
	DB                    *SystemInfo_DB                    `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
}

func (m *SystemInfo_Messenger) Reset()         { *m = SystemInfo_Messenger{} }
func (m *SystemInfo_Messenger) String() string { return proto.CompactTextString(m) }
func (*SystemInfo_Messenger) ProtoMessage()    {}
func (*SystemInfo_Messenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{17, 2}
}
func (m *SystemInfo_Messenger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemInfo_Messenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemInfo_Messenger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemInfo_Messenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo_Messenger.Merge(m, src)
}
func (m *SystemInfo_Messenger) XXX_Size() int {
	return m.Size()
}
func (m *SystemInfo_Messenger) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo_Messenger.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo_Messenger proto.InternalMessageInfo

func (m *SystemInfo_Messenger) GetProcess() *protocoltypes.SystemInfo_Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *SystemInfo_Messenger) GetWarns() []string {
	if m != nil {
		return m.Warns
	}
	return nil
}

func (m *SystemInfo_Messenger) GetProtocolInSameProcess() bool {
	if m != nil {
		return m.ProtocolInSameProcess
	}
	return false
}

func (m *SystemInfo_Messenger) GetDB() *SystemInfo_DB {
	if m != nil {
		return m.DB
	}
	return nil
}

type SystemInfo_DB struct {
	Accounts                            int64 `protobuf:"varint,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	Contacts                            int64 `protobuf:"varint,2,opt,name=contacts,proto3" json:"contacts,omitempty"`
	Conversations                       int64 `protobuf:"varint,3,opt,name=conversations,proto3" json:"conversations,omitempty"`
	Interactions                        int64 `protobuf:"varint,4,opt,name=interactions,proto3" json:"interactions,omitempty"`
	Members                             int64 `protobuf:"varint,5,opt,name=members,proto3" json:"members,omitempty"`
	Devices                             int64 `protobuf:"varint,6,opt,name=devices,proto3" json:"devices,omitempty"`
	ServiceTokenSupportedServiceRecords int64 `protobuf:"varint,7,opt,name=service_token_supported_service_records,json=serviceTokenSupportedServiceRecords,proto3" json:"service_token_supported_service_records,omitempty"`
	ServiceTokens                       int64 `protobuf:"varint,8,opt,name=service_tokens,json=serviceTokens,proto3" json:"service_tokens,omitempty"`
	ConversationReplicationInfo         int64 `protobuf:"varint,9,opt,name=conversation_replication_info,json=conversationReplicationInfo,proto3" json:"conversation_replication_info,omitempty"`
	MetadataEvents                      int64 `protobuf:"varint,10,opt,name=metadata_events,json=metadataEvents,proto3" json:"metadata_events,omitempty"`
	PushMemberToken                     int64 `protobuf:"varint,12,opt,name=push_member_token,json=pushMemberToken,proto3" json:"push_member_token,omitempty"`
	AccountVerifiedCredentials          int64 `protobuf:"varint,13,opt,name=account_verified_credentials,json=accountVerifiedCredentials,proto3" json:"account_verified_credentials,omitempty"`
	AccountDirectoryServiceRecord       int64 `protobuf:"varint,14,opt,name=account_directory_service_record,json=accountDirectoryServiceRecord,proto3" json:"account_directory_service_record,omitempty"`
	PushDeviceToken                     int64 `protobuf:"varint,15,opt,name=push_device_token,json=pushDeviceToken,proto3" json:"push_device_token,omitempty"`
	PushServerRecord                    int64 `protobuf:"varint,16,opt,name=push_server_record,json=pushServerRecord,proto3" json:"push_server_record,omitempty"`
	PushLocalDeviceSharedToken          int64 `protobuf:"varint,17,opt,name=push_local_device_shared_token,json=pushLocalDeviceSharedToken,proto3" json:"push_local_device_shared_token,omitempty"`
}

func (m *SystemInfo_DB) Reset()         { *m = SystemInfo_DB{} }
func (m *SystemInfo_DB) String() string { return proto.CompactTextString(m) }
func (*SystemInfo_DB) ProtoMessage()    {}
func (*SystemInfo_DB) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{17, 3}
}
func (m *SystemInfo_DB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemInfo_DB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemInfo_DB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemInfo_DB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo_DB.Merge(m, src)
}
func (m *SystemInfo_DB) XXX_Size() int {
	return m.Size()
}
func (m *SystemInfo_DB) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo_DB.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo_DB proto.InternalMessageInfo

func (m *SystemInfo_DB) GetAccounts() int64 {
	if m != nil {
		return m.Accounts
	}
	return 0
}

func (m *SystemInfo_DB) GetContacts() int64 {
	if m != nil {
		return m.Contacts
	}
	return 0
}

func (m *SystemInfo_DB) GetConversations() int64 {
	if m != nil {
		return m.Conversations
	}
	return 0
}

func (m *SystemInfo_DB) GetInteractions() int64 {
	if m != nil {
		return m.Interactions
	}
	return 0
}

func (m *SystemInfo_DB) GetMembers() int64 {
	if m != nil {
		return m.Members
	}
	return 0
}

func (m *SystemInfo_DB) GetDevices() int64 {
	if m != nil {
		return m.Devices
	}
	return 0
}

func (m *SystemInfo_DB) GetServiceTokenSupportedServiceRecords() int64 {
	if m != nil {
		return m.ServiceTokenSupportedServiceRecords
	}
	return 0
}

func (m *SystemInfo_DB) GetServiceTokens() int64 {
	if m != nil {
		return m.ServiceTokens
	}
	return 0
}

func (m *SystemInfo_DB) GetConversationReplicationInfo() int64 {
	if m != nil {
		return m.ConversationReplicationInfo
	}
	return 0
}

func (m *SystemInfo_DB) GetMetadataEvents() int64 {
	if m != nil {
		return m.MetadataEvents
	}
	return 0
}

func (m *SystemInfo_DB) GetPushMemberToken() int64 {
	if m != nil {
		return m.PushMemberToken
	}
	return 0
}

func (m *SystemInfo_DB) GetAccountVerifiedCredentials() int64 {
	if m != nil {
		return m.AccountVerifiedCredentials
	}
	return 0
}

func (m *SystemInfo_DB) GetAccountDirectoryServiceRecord() int64 {
	if m != nil {
		return m.AccountDirectoryServiceRecord
	}
	return 0
}

func (m *SystemInfo_DB) GetPushDeviceToken() int64 {
	if m != nil {
		return m.PushDeviceToken
	}
	return 0
}

func (m *SystemInfo_DB) GetPushServerRecord() int64 {
	if m != nil {
		return m.PushServerRecord
	}
	return 0
}

func (m *SystemInfo_DB) GetPushLocalDeviceSharedToken() int64 {
	if m != nil {
		return m.PushLocalDeviceSharedToken
	}
	return 0
}

type ConversationJoin struct {
}

func (m *ConversationJoin) Reset()         { *m = ConversationJoin{} }
func (m *ConversationJoin) String() string { return proto.CompactTextString(m) }
func (*ConversationJoin) ProtoMessage()    {}
func (*ConversationJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{18}
}
func (m *ConversationJoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationJoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationJoin.Merge(m, src)
}
func (m *ConversationJoin) XXX_Size() int {
	return m.Size()
}
func (m *ConversationJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationJoin.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationJoin proto.InternalMessageInfo

type ConversationJoin_Request struct {
	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	// optional passphase to decrypt the link
	Passphrase []byte `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *ConversationJoin_Request) Reset()         { *m = ConversationJoin_Request{} }
func (m *ConversationJoin_Request) String() string { return proto.CompactTextString(m) }
func (*ConversationJoin_Request) ProtoMessage()    {}
func (*ConversationJoin_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{18, 0}
}
func (m *ConversationJoin_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationJoin_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationJoin_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationJoin_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationJoin_Request.Merge(m, src)
}
func (m *ConversationJoin_Request) XXX_Size() int {
	return m.Size()
}
func (m *ConversationJoin_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationJoin_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationJoin_Request proto.InternalMessageInfo

func (m *ConversationJoin_Request) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ConversationJoin_Request) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type ConversationJoin_Reply struct {
}

func (m *ConversationJoin_Reply) Reset()         { *m = ConversationJoin_Reply{} }
func (m *ConversationJoin_Reply) String() string { return proto.CompactTextString(m) }
func (*ConversationJoin_Reply) ProtoMessage()    {}
func (*ConversationJoin_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{18, 1}
}
func (m *ConversationJoin_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationJoin_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationJoin_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationJoin_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationJoin_Reply.Merge(m, src)
}
func (m *ConversationJoin_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ConversationJoin_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationJoin_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationJoin_Reply proto.InternalMessageInfo

type DebugAuthServiceSetToken struct {
}

func (m *DebugAuthServiceSetToken) Reset()         { *m = DebugAuthServiceSetToken{} }
func (m *DebugAuthServiceSetToken) String() string { return proto.CompactTextString(m) }
func (*DebugAuthServiceSetToken) ProtoMessage()    {}
func (*DebugAuthServiceSetToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{19}
}
func (m *DebugAuthServiceSetToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugAuthServiceSetToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugAuthServiceSetToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugAuthServiceSetToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugAuthServiceSetToken.Merge(m, src)
}
func (m *DebugAuthServiceSetToken) XXX_Size() int {
	return m.Size()
}
func (m *DebugAuthServiceSetToken) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugAuthServiceSetToken.DiscardUnknown(m)
}

var xxx_messageInfo_DebugAuthServiceSetToken proto.InternalMessageInfo

type DebugAuthServiceSetToken_Request struct {
	Token             *AuthExchangeResponse `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AuthenticationURL string                `protobuf:"bytes,2,opt,name=authentication_url,json=authenticationUrl,proto3" json:"authentication_url,omitempty"`
}

func (m *DebugAuthServiceSetToken_Request) Reset()         { *m = DebugAuthServiceSetToken_Request{} }
func (m *DebugAuthServiceSetToken_Request) String() string { return proto.CompactTextString(m) }
func (*DebugAuthServiceSetToken_Request) ProtoMessage()    {}
func (*DebugAuthServiceSetToken_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{19, 0}
}
func (m *DebugAuthServiceSetToken_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugAuthServiceSetToken_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugAuthServiceSetToken_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugAuthServiceSetToken_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugAuthServiceSetToken_Request.Merge(m, src)
}
func (m *DebugAuthServiceSetToken_Request) XXX_Size() int {
	return m.Size()
}
func (m *DebugAuthServiceSetToken_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugAuthServiceSetToken_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DebugAuthServiceSetToken_Request proto.InternalMessageInfo

func (m *DebugAuthServiceSetToken_Request) GetToken() *AuthExchangeResponse {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *DebugAuthServiceSetToken_Request) GetAuthenticationURL() string {
	if m != nil {
		return m.AuthenticationURL
	}
	return ""
}

type DebugAuthServiceSetToken_Reply struct {
}

func (m *DebugAuthServiceSetToken_Reply) Reset()         { *m = DebugAuthServiceSetToken_Reply{} }
func (m *DebugAuthServiceSetToken_Reply) String() string { return proto.CompactTextString(m) }
func (*DebugAuthServiceSetToken_Reply) ProtoMessage()    {}
func (*DebugAuthServiceSetToken_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{19, 1}
}
func (m *DebugAuthServiceSetToken_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugAuthServiceSetToken_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugAuthServiceSetToken_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugAuthServiceSetToken_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugAuthServiceSetToken_Reply.Merge(m, src)
}
func (m *DebugAuthServiceSetToken_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DebugAuthServiceSetToken_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugAuthServiceSetToken_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DebugAuthServiceSetToken_Reply proto.InternalMessageInfo

type ServicesTokenList struct {
}

func (m *ServicesTokenList) Reset()         { *m = ServicesTokenList{} }
func (m *ServicesTokenList) String() string { return proto.CompactTextString(m) }
func (*ServicesTokenList) ProtoMessage()    {}
func (*ServicesTokenList) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{20}
}
func (m *ServicesTokenList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesTokenList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesTokenList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesTokenList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesTokenList.Merge(m, src)
}
func (m *ServicesTokenList) XXX_Size() int {
	return m.Size()
}
func (m *ServicesTokenList) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesTokenList.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesTokenList proto.InternalMessageInfo

type ServicesTokenList_Request struct {
}

func (m *ServicesTokenList_Request) Reset()         { *m = ServicesTokenList_Request{} }
func (m *ServicesTokenList_Request) String() string { return proto.CompactTextString(m) }
func (*ServicesTokenList_Request) ProtoMessage()    {}
func (*ServicesTokenList_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{20, 0}
}
func (m *ServicesTokenList_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesTokenList_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesTokenList_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesTokenList_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesTokenList_Request.Merge(m, src)
}
func (m *ServicesTokenList_Request) XXX_Size() int {
	return m.Size()
}
func (m *ServicesTokenList_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesTokenList_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesTokenList_Request proto.InternalMessageInfo

type ServicesTokenList_Reply struct {
	Service *ServiceToken `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *ServicesTokenList_Reply) Reset()         { *m = ServicesTokenList_Reply{} }
func (m *ServicesTokenList_Reply) String() string { return proto.CompactTextString(m) }
func (*ServicesTokenList_Reply) ProtoMessage()    {}
func (*ServicesTokenList_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{20, 1}
}
func (m *ServicesTokenList_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesTokenList_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesTokenList_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesTokenList_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesTokenList_Reply.Merge(m, src)
}
func (m *ServicesTokenList_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ServicesTokenList_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesTokenList_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesTokenList_Reply proto.InternalMessageInfo

func (m *ServicesTokenList_Reply) GetService() *ServiceToken {
	if m != nil {
		return m.Service
	}
	return nil
}

type AuthServiceCompleteFlow struct {
}

func (m *AuthServiceCompleteFlow) Reset()         { *m = AuthServiceCompleteFlow{} }
func (m *AuthServiceCompleteFlow) String() string { return proto.CompactTextString(m) }
func (*AuthServiceCompleteFlow) ProtoMessage()    {}
func (*AuthServiceCompleteFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{21}
}
func (m *AuthServiceCompleteFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthServiceCompleteFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthServiceCompleteFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthServiceCompleteFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthServiceCompleteFlow.Merge(m, src)
}
func (m *AuthServiceCompleteFlow) XXX_Size() int {
	return m.Size()
}
func (m *AuthServiceCompleteFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthServiceCompleteFlow.DiscardUnknown(m)
}

var xxx_messageInfo_AuthServiceCompleteFlow proto.InternalMessageInfo

type AuthServiceCompleteFlow_Request struct {
	CallbackURL string `protobuf:"bytes,1,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
}

func (m *AuthServiceCompleteFlow_Request) Reset()         { *m = AuthServiceCompleteFlow_Request{} }
func (m *AuthServiceCompleteFlow_Request) String() string { return proto.CompactTextString(m) }
func (*AuthServiceCompleteFlow_Request) ProtoMessage()    {}
func (*AuthServiceCompleteFlow_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{21, 0}
}
func (m *AuthServiceCompleteFlow_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthServiceCompleteFlow_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthServiceCompleteFlow_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthServiceCompleteFlow_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthServiceCompleteFlow_Request.Merge(m, src)
}
func (m *AuthServiceCompleteFlow_Request) XXX_Size() int {
	return m.Size()
}
func (m *AuthServiceCompleteFlow_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthServiceCompleteFlow_Request.DiscardUnknown(m)
}

var xxx_messageInfo_AuthServiceCompleteFlow_Request proto.InternalMessageInfo

func (m *AuthServiceCompleteFlow_Request) GetCallbackURL() string {
	if m != nil {
		return m.CallbackURL
	}
	return ""
}

type AuthServiceCompleteFlow_Reply struct {
	TokenID string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *AuthServiceCompleteFlow_Reply) Reset()         { *m = AuthServiceCompleteFlow_Reply{} }
func (m *AuthServiceCompleteFlow_Reply) String() string { return proto.CompactTextString(m) }
func (*AuthServiceCompleteFlow_Reply) ProtoMessage()    {}
func (*AuthServiceCompleteFlow_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{21, 1}
}
func (m *AuthServiceCompleteFlow_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthServiceCompleteFlow_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthServiceCompleteFlow_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthServiceCompleteFlow_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthServiceCompleteFlow_Reply.Merge(m, src)
}
func (m *AuthServiceCompleteFlow_Reply) XXX_Size() int {
	return m.Size()
}
func (m *AuthServiceCompleteFlow_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthServiceCompleteFlow_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_AuthServiceCompleteFlow_Reply proto.InternalMessageInfo

func (m *AuthServiceCompleteFlow_Reply) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

type AuthServiceInitFlow struct {
}

func (m *AuthServiceInitFlow) Reset()         { *m = AuthServiceInitFlow{} }
func (m *AuthServiceInitFlow) String() string { return proto.CompactTextString(m) }
func (*AuthServiceInitFlow) ProtoMessage()    {}
func (*AuthServiceInitFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{22}
}
func (m *AuthServiceInitFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthServiceInitFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthServiceInitFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthServiceInitFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthServiceInitFlow.Merge(m, src)
}
func (m *AuthServiceInitFlow) XXX_Size() int {
	return m.Size()
}
func (m *AuthServiceInitFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthServiceInitFlow.DiscardUnknown(m)
}

var xxx_messageInfo_AuthServiceInitFlow proto.InternalMessageInfo

type AuthServiceInitFlow_Request struct {
	AuthURL  string   `protobuf:"bytes,1,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`
	Services []string `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
}

func (m *AuthServiceInitFlow_Request) Reset()         { *m = AuthServiceInitFlow_Request{} }
func (m *AuthServiceInitFlow_Request) String() string { return proto.CompactTextString(m) }
func (*AuthServiceInitFlow_Request) ProtoMessage()    {}
func (*AuthServiceInitFlow_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{22, 0}
}
func (m *AuthServiceInitFlow_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthServiceInitFlow_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthServiceInitFlow_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthServiceInitFlow_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthServiceInitFlow_Request.Merge(m, src)
}
func (m *AuthServiceInitFlow_Request) XXX_Size() int {
	return m.Size()
}
func (m *AuthServiceInitFlow_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthServiceInitFlow_Request.DiscardUnknown(m)
}

var xxx_messageInfo_AuthServiceInitFlow_Request proto.InternalMessageInfo

func (m *AuthServiceInitFlow_Request) GetAuthURL() string {
	if m != nil {
		return m.AuthURL
	}
	return ""
}

func (m *AuthServiceInitFlow_Request) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type AuthServiceInitFlow_Reply struct {
	URL       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	SecureURL bool   `protobuf:"varint,2,opt,name=secure_url,json=secureUrl,proto3" json:"secure_url,omitempty"`
}

func (m *AuthServiceInitFlow_Reply) Reset()         { *m = AuthServiceInitFlow_Reply{} }
func (m *AuthServiceInitFlow_Reply) String() string { return proto.CompactTextString(m) }
func (*AuthServiceInitFlow_Reply) ProtoMessage()    {}
func (*AuthServiceInitFlow_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{22, 1}
}
func (m *AuthServiceInitFlow_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthServiceInitFlow_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthServiceInitFlow_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthServiceInitFlow_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthServiceInitFlow_Reply.Merge(m, src)
}
func (m *AuthServiceInitFlow_Reply) XXX_Size() int {
	return m.Size()
}
func (m *AuthServiceInitFlow_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthServiceInitFlow_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_AuthServiceInitFlow_Reply proto.InternalMessageInfo

func (m *AuthServiceInitFlow_Reply) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *AuthServiceInitFlow_Reply) GetSecureURL() bool {
	if m != nil {
		return m.SecureURL
	}
	return false
}

type Account struct {
	PublicKey                       string                           `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" gorm:"primaryKey"`
	DisplayName                     string                           `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Link                            string                           `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	ServiceTokens                   []*ServiceToken                  `protobuf:"bytes,5,rep,name=service_tokens,json=serviceTokens,proto3" json:"service_tokens,omitempty" gorm:"foreignKey:AccountPK"`
	ReplicateNewGroupsAutomatically bool                             `protobuf:"varint,6,opt,name=replicate_new_groups_automatically,json=replicateNewGroupsAutomatically,proto3" json:"replicate_new_groups_automatically,omitempty" gorm:"default:true"`
	AutoSharePushTokenFlag          bool                             `protobuf:"varint,8,opt,name=auto_share_push_token_flag,json=autoSharePushTokenFlag,proto3" json:"auto_share_push_token_flag,omitempty"`
	PushDeviceToken                 *PushDeviceToken                 `protobuf:"bytes,9,opt,name=push_device_token,json=pushDeviceToken,proto3" json:"push_device_token,omitempty" gorm:"foreignKey:AccountPK"`
	PushServerRecords               []*PushServerRecord              `protobuf:"bytes,10,rep,name=push_server_records,json=pushServerRecords,proto3" json:"push_server_records,omitempty" gorm:"foreignKey:AccountPK"`
	MutedUntil                      int64                            `protobuf:"varint,11,opt,name=muted_until,json=mutedUntil,proto3" json:"muted_until,omitempty"`
	HideInAppNotifications          bool                             `protobuf:"varint,12,opt,name=hide_in_app_notifications,json=hideInAppNotifications,proto3" json:"hide_in_app_notifications,omitempty"`
	HidePushPreviews                bool                             `protobuf:"varint,13,opt,name=hide_push_previews,json=hidePushPreviews,proto3" json:"hide_push_previews,omitempty"`
	VerifiedCredentials             []*AccountVerifiedCredential     `protobuf:"bytes,14,rep,name=verified_credentials,json=verifiedCredentials,proto3" json:"verified_credentials,omitempty" gorm:"foreignKey:AccountPK"`
	DirectoryServiceRecords         []*AccountDirectoryServiceRecord `protobuf:"bytes,15,rep,name=directory_service_records,json=directoryServiceRecords,proto3" json:"directory_service_records,omitempty" gorm:"foreignKey:AccountPK"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{23}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Account) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Account) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Account) GetServiceTokens() []*ServiceToken {
	if m != nil {
		return m.ServiceTokens
	}
	return nil
}

func (m *Account) GetReplicateNewGroupsAutomatically() bool {
	if m != nil {
		return m.ReplicateNewGroupsAutomatically
	}
	return false
}

func (m *Account) GetAutoSharePushTokenFlag() bool {
	if m != nil {
		return m.AutoSharePushTokenFlag
	}
	return false
}

func (m *Account) GetPushDeviceToken() *PushDeviceToken {
	if m != nil {
		return m.PushDeviceToken
	}
	return nil
}

func (m *Account) GetPushServerRecords() []*PushServerRecord {
	if m != nil {
		return m.PushServerRecords
	}
	return nil
}

func (m *Account) GetMutedUntil() int64 {
	if m != nil {
		return m.MutedUntil
	}
	return 0
}

func (m *Account) GetHideInAppNotifications() bool {
	if m != nil {
		return m.HideInAppNotifications
	}
	return false
}

func (m *Account) GetHidePushPreviews() bool {
	if m != nil {
		return m.HidePushPreviews
	}
	return false
}

func (m *Account) GetVerifiedCredentials() []*AccountVerifiedCredential {
	if m != nil {
		return m.VerifiedCredentials
	}
	return nil
}

func (m *Account) GetDirectoryServiceRecords() []*AccountDirectoryServiceRecord {
	if m != nil {
		return m.DirectoryServiceRecords
	}
	return nil
}

type ServiceTokenSupportedService struct {
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" gorm:"primaryKey"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ServiceTokenSupportedService) Reset()         { *m = ServiceTokenSupportedService{} }
func (m *ServiceTokenSupportedService) String() string { return proto.CompactTextString(m) }
func (*ServiceTokenSupportedService) ProtoMessage()    {}
func (*ServiceTokenSupportedService) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{24}
}
func (m *ServiceTokenSupportedService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceTokenSupportedService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceTokenSupportedService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceTokenSupportedService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTokenSupportedService.Merge(m, src)
}
func (m *ServiceTokenSupportedService) XXX_Size() int {
	return m.Size()
}
func (m *ServiceTokenSupportedService) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTokenSupportedService.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTokenSupportedService proto.InternalMessageInfo

func (m *ServiceTokenSupportedService) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceTokenSupportedService) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ServiceTokenSupportedServiceRecord struct {
	TokenID string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty" gorm:"primaryKey"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" gorm:"primaryKey"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ServiceTokenSupportedServiceRecord) Reset()         { *m = ServiceTokenSupportedServiceRecord{} }
func (m *ServiceTokenSupportedServiceRecord) String() string { return proto.CompactTextString(m) }
func (*ServiceTokenSupportedServiceRecord) ProtoMessage()    {}
func (*ServiceTokenSupportedServiceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{25}
}
func (m *ServiceTokenSupportedServiceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceTokenSupportedServiceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceTokenSupportedServiceRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceTokenSupportedServiceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTokenSupportedServiceRecord.Merge(m, src)
}
func (m *ServiceTokenSupportedServiceRecord) XXX_Size() int {
	return m.Size()
}
func (m *ServiceTokenSupportedServiceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTokenSupportedServiceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTokenSupportedServiceRecord proto.InternalMessageInfo

func (m *ServiceTokenSupportedServiceRecord) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

func (m *ServiceTokenSupportedServiceRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceTokenSupportedServiceRecord) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ServiceToken struct {
	AccountPK         string                                `protobuf:"bytes,1,opt,name=account_pk,json=accountPk,proto3" json:"account_pk,omitempty"`
	TokenID           string                                `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty" gorm:"primaryKey"`
	Token             string                                `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	SupportedServices []*ServiceTokenSupportedServiceRecord `protobuf:"bytes,4,rep,name=supported_services,json=supportedServices,proto3" json:"supported_services,omitempty" gorm:"foreignKey:TokenID"`
	AuthenticationURL string                                `protobuf:"bytes,5,opt,name=authentication_url,json=authenticationUrl,proto3" json:"authentication_url,omitempty"`
	Expiration        int64                                 `protobuf:"varint,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (m *ServiceToken) Reset()         { *m = ServiceToken{} }
func (m *ServiceToken) String() string { return proto.CompactTextString(m) }
func (*ServiceToken) ProtoMessage()    {}
func (*ServiceToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{26}
}
func (m *ServiceToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceToken.Merge(m, src)
}
func (m *ServiceToken) XXX_Size() int {
	return m.Size()
}
func (m *ServiceToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceToken.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceToken proto.InternalMessageInfo

func (m *ServiceToken) GetAccountPK() string {
	if m != nil {
		return m.AccountPK
	}
	return ""
}

func (m *ServiceToken) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

func (m *ServiceToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ServiceToken) GetSupportedServices() []*ServiceTokenSupportedServiceRecord {
	if m != nil {
		return m.SupportedServices
	}
	return nil
}

func (m *ServiceToken) GetAuthenticationURL() string {
	if m != nil {
		return m.AuthenticationURL
	}
	return ""
}

func (m *ServiceToken) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type MetadataEvent struct {
	CID                   string                  `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty" gorm:"primaryKey;column:cid"`
	ConversationPublicKey string                  `protobuf:"bytes,2,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty" gorm:"index"`
	MetadataEventType     protocoltypes.EventType `protobuf:"varint,3,opt,name=metadata_event_type,json=metadataEventType,proto3,enum=weshnet.protocol.v1.EventType" json:"metadata_event_type,omitempty"`
	Payload               []byte                  `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *MetadataEvent) Reset()         { *m = MetadataEvent{} }
func (m *MetadataEvent) String() string { return proto.CompactTextString(m) }
func (*MetadataEvent) ProtoMessage()    {}
func (*MetadataEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{27}
}
func (m *MetadataEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataEvent.Merge(m, src)
}
func (m *MetadataEvent) XXX_Size() int {
	return m.Size()
}
func (m *MetadataEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataEvent proto.InternalMessageInfo

func (m *MetadataEvent) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

func (m *MetadataEvent) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

func (m *MetadataEvent) GetMetadataEventType() protocoltypes.EventType {
	if m != nil {
		return m.MetadataEventType
	}
	return protocoltypes.EventTypeUndefined
}

func (m *MetadataEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Interaction struct {
	CID                   string          `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty" gorm:"primaryKey;column:cid"`
	Type                  AppMessage_Type `protobuf:"varint,2,opt,name=type,proto3,enum=berty.messenger.v1.AppMessage_Type" json:"type,omitempty" gorm:"index"`
	MemberPublicKey       string          `protobuf:"bytes,7,opt,name=member_public_key,json=memberPublicKey,proto3" json:"member_public_key,omitempty"`
	DevicePublicKey       string          `protobuf:"bytes,12,opt,name=device_public_key,json=devicePublicKey,proto3" json:"device_public_key,omitempty"`
	Member                *Member         `protobuf:"bytes,8,opt,name=member,proto3" json:"member,omitempty" gorm:"foreignKey:PublicKey;references:MemberPublicKey"`
	ConversationPublicKey string          `protobuf:"bytes,3,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty" gorm:"index"`
	Conversation          *Conversation   `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Payload               []byte          `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	IsMine                bool            `protobuf:"varint,6,opt,name=is_mine,json=isMine,proto3" json:"is_mine,omitempty"`
	SentDate              int64           `protobuf:"varint,9,opt,name=sent_date,json=sentDate,proto3" json:"sent_date,omitempty" gorm:"index"`
	Acknowledged          bool            `protobuf:"varint,10,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	TargetCID             string          `protobuf:"bytes,13,opt,name=target_cid,json=targetCid,proto3" json:"target_cid,omitempty" gorm:"index;column:target_cid"`
	OutOfStoreMessage     bool            `protobuf:"varint,17,opt,name=out_of_store_message,json=outOfStoreMessage,proto3" json:"out_of_store_message,omitempty"`
}

func (m *Interaction) Reset()         { *m = Interaction{} }
func (m *Interaction) String() string { return proto.CompactTextString(m) }
func (*Interaction) ProtoMessage()    {}
func (*Interaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{28}
}
func (m *Interaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interaction.Merge(m, src)
}
func (m *Interaction) XXX_Size() int {
	return m.Size()
}
func (m *Interaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Interaction.DiscardUnknown(m)
}

var xxx_messageInfo_Interaction proto.InternalMessageInfo

func (m *Interaction) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

func (m *Interaction) GetType() AppMessage_Type {
	if m != nil {
		return m.Type
	}
	return AppMessage_Undefined
}

func (m *Interaction) GetMemberPublicKey() string {
	if m != nil {
		return m.MemberPublicKey
	}
	return ""
}

func (m *Interaction) GetDevicePublicKey() string {
	if m != nil {
		return m.DevicePublicKey
	}
	return ""
}

func (m *Interaction) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *Interaction) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

func (m *Interaction) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *Interaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Interaction) GetIsMine() bool {
	if m != nil {
		return m.IsMine
	}
	return false
}

func (m *Interaction) GetSentDate() int64 {
	if m != nil {
		return m.SentDate
	}
	return 0
}

func (m *Interaction) GetAcknowledged() bool {
	if m != nil {
		return m.Acknowledged
	}
	return false
}

func (m *Interaction) GetTargetCID() string {
	if m != nil {
		return m.TargetCID
	}
	return ""
}

func (m *Interaction) GetOutOfStoreMessage() bool {
	if m != nil {
		return m.OutOfStoreMessage
	}
	return false
}

type Contact struct {
	PublicKey             string        `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" gorm:"primaryKey"`
	ConversationPublicKey string        `protobuf:"bytes,2,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty" gorm:"primaryKey"`
	Conversation          *Conversation `protobuf:"bytes,3,opt,name=conversation,proto3" json:"conversation,omitempty"`
	State                 Contact_State `protobuf:"varint,4,opt,name=state,proto3,enum=berty.messenger.v1.Contact_State" json:"state,omitempty"`
	DisplayName           string        `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreatedDate           int64         `protobuf:"varint,7,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	// specific to outgoing requests
	SentDate int64     `protobuf:"varint,8,opt,name=sent_date,json=sentDate,proto3" json:"sent_date,omitempty"`
	Devices  []*Device `protobuf:"bytes,6,rep,name=devices,proto3" json:"devices,omitempty" gorm:"foreignKey:MemberPublicKey;references:PublicKey"`
	InfoDate int64     `protobuf:"varint,10,opt,name=info_date,json=infoDate,proto3" json:"info_date,omitempty"`
}

func (m *Contact) Reset()         { *m = Contact{} }
func (m *Contact) String() string { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()    {}
func (*Contact) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{29}
}
func (m *Contact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contact.Merge(m, src)
}
func (m *Contact) XXX_Size() int {
	return m.Size()
}
func (m *Contact) XXX_DiscardUnknown() {
	xxx_messageInfo_Contact.DiscardUnknown(m)
}

var xxx_messageInfo_Contact proto.InternalMessageInfo

func (m *Contact) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Contact) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

func (m *Contact) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *Contact) GetState() Contact_State {
	if m != nil {
		return m.State
	}
	return Contact_Undefined
}

func (m *Contact) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Contact) GetCreatedDate() int64 {
	if m != nil {
		return m.CreatedDate
	}
	return 0
}

func (m *Contact) GetSentDate() int64 {
	if m != nil {
		return m.SentDate
	}
	return 0
}

func (m *Contact) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Contact) GetInfoDate() int64 {
	if m != nil {
		return m.InfoDate
	}
	return 0
}

type Conversation struct {
	PublicKey   string            `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" gorm:"primaryKey"`
	Type        Conversation_Type `protobuf:"varint,2,opt,name=type,proto3,enum=berty.messenger.v1.Conversation_Type" json:"type,omitempty"`
	IsOpen      bool              `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	DisplayName string            `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Link        string            `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	UnreadCount int32             `protobuf:"varint,6,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	// last_update is used to sort conversations, it should be updated for each "visible" event
	LastUpdate int64 `protobuf:"varint,7,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	// specific to ContactType conversations
	ContactPublicKey string `protobuf:"bytes,8,opt,name=contact_public_key,json=contactPublicKey,proto3" json:"contact_public_key,omitempty"`
	// specific to ContactType conversations
	Contact *Contact `protobuf:"bytes,9,opt,name=contact,proto3" json:"contact,omitempty"`
	// specific to MultiMemberType conversations
	Members                []*Member                      `protobuf:"bytes,10,rep,name=members,proto3" json:"members,omitempty"`
	AccountMemberPublicKey string                         `protobuf:"bytes,11,opt,name=account_member_public_key,json=accountMemberPublicKey,proto3" json:"account_member_public_key,omitempty"`
	LocalDevicePublicKey   string                         `protobuf:"bytes,12,opt,name=local_device_public_key,json=localDevicePublicKey,proto3" json:"local_device_public_key,omitempty"`
	CreatedDate            int64                          `protobuf:"varint,13,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ReplicationInfo        []*ConversationReplicationInfo `protobuf:"bytes,16,rep,name=replication_info,json=replicationInfo,proto3" json:"replication_info,omitempty" gorm:"foreignKey:ConversationPublicKey"`
	// info_date is used when SetGroupInfo is called
	InfoDate                    int64                         `protobuf:"varint,18,opt,name=info_date,json=infoDate,proto3" json:"info_date,omitempty"`
	LocalMemberPublicKey        string                        `protobuf:"bytes,19,opt,name=local_member_public_key,json=localMemberPublicKey,proto3" json:"local_member_public_key,omitempty"`
	MutedUntil                  int64                         `protobuf:"varint,20,opt,name=muted_until,json=mutedUntil,proto3" json:"muted_until,omitempty"`
	PushLocalDeviceSharedTokens []*PushLocalDeviceSharedToken `protobuf:"bytes,21,rep,name=push_local_device_shared_tokens,json=pushLocalDeviceSharedTokens,proto3" json:"push_local_device_shared_tokens,omitempty" gorm:"foreignKey:ConversationPublicKey"`
	PushMemberTokens            []*PushMemberToken            `protobuf:"bytes,22,rep,name=push_member_tokens,json=pushMemberTokens,proto3" json:"push_member_tokens,omitempty" gorm:"foreignKey:ConversationPublicKey"`
}

func (m *Conversation) Reset()         { *m = Conversation{} }
func (m *Conversation) String() string { return proto.CompactTextString(m) }
func (*Conversation) ProtoMessage()    {}
func (*Conversation) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{30}
}
func (m *Conversation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Conversation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Conversation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Conversation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conversation.Merge(m, src)
}
func (m *Conversation) XXX_Size() int {
	return m.Size()
}
func (m *Conversation) XXX_DiscardUnknown() {
	xxx_messageInfo_Conversation.DiscardUnknown(m)
}

var xxx_messageInfo_Conversation proto.InternalMessageInfo

func (m *Conversation) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Conversation) GetType() Conversation_Type {
	if m != nil {
		return m.Type
	}
	return Conversation_Undefined
}

func (m *Conversation) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (m *Conversation) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Conversation) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Conversation) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *Conversation) GetLastUpdate() int64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *Conversation) GetContactPublicKey() string {
	if m != nil {
		return m.ContactPublicKey
	}
	return ""
}

func (m *Conversation) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *Conversation) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Conversation) GetAccountMemberPublicKey() string {
	if m != nil {
		return m.AccountMemberPublicKey
	}
	return ""
}

func (m *Conversation) GetLocalDevicePublicKey() string {
	if m != nil {
		return m.LocalDevicePublicKey
	}
	return ""
}

func (m *Conversation) GetCreatedDate() int64 {
	if m != nil {
		return m.CreatedDate
	}
	return 0
}

func (m *Conversation) GetReplicationInfo() []*ConversationReplicationInfo {
	if m != nil {
		return m.ReplicationInfo
	}
	return nil
}

func (m *Conversation) GetInfoDate() int64 {
	if m != nil {
		return m.InfoDate
	}
	return 0
}

func (m *Conversation) GetLocalMemberPublicKey() string {
	if m != nil {
		return m.LocalMemberPublicKey
	}
	return ""
}

func (m *Conversation) GetMutedUntil() int64 {
	if m != nil {
		return m.MutedUntil
	}
	return 0
}

func (m *Conversation) GetPushLocalDeviceSharedTokens() []*PushLocalDeviceSharedToken {
	if m != nil {
		return m.PushLocalDeviceSharedTokens
	}
	return nil
}

func (m *Conversation) GetPushMemberTokens() []*PushMemberToken {
	if m != nil {
		return m.PushMemberTokens
	}
	return nil
}

type ConversationReplicationInfo struct {
	CID                   string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty" gorm:"primaryKey;column:cid"`
	ConversationPublicKey string `protobuf:"bytes,2,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty"`
	MemberPublicKey       string `protobuf:"bytes,3,opt,name=member_public_key,json=memberPublicKey,proto3" json:"member_public_key,omitempty"`
	AuthenticationURL     string `protobuf:"bytes,4,opt,name=authentication_url,json=authenticationUrl,proto3" json:"authentication_url,omitempty"`
	ReplicationServer     string `protobuf:"bytes,5,opt,name=replication_server,json=replicationServer,proto3" json:"replication_server,omitempty"`
}

func (m *ConversationReplicationInfo) Reset()         { *m = ConversationReplicationInfo{} }
func (m *ConversationReplicationInfo) String() string { return proto.CompactTextString(m) }
func (*ConversationReplicationInfo) ProtoMessage()    {}
func (*ConversationReplicationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{31}
}
func (m *ConversationReplicationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationReplicationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationReplicationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationReplicationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationReplicationInfo.Merge(m, src)
}
func (m *ConversationReplicationInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConversationReplicationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationReplicationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationReplicationInfo proto.InternalMessageInfo

func (m *ConversationReplicationInfo) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

func (m *ConversationReplicationInfo) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

func (m *ConversationReplicationInfo) GetMemberPublicKey() string {
	if m != nil {
		return m.MemberPublicKey
	}
	return ""
}

func (m *ConversationReplicationInfo) GetAuthenticationURL() string {
	if m != nil {
		return m.AuthenticationURL
	}
	return ""
}

func (m *ConversationReplicationInfo) GetReplicationServer() string {
	if m != nil {
		return m.ReplicationServer
	}
	return ""
}

type Member struct {
	PublicKey             string        `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" gorm:"primaryKey"`
	DisplayName           string        `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ConversationPublicKey string        `protobuf:"bytes,3,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty" gorm:"primaryKey"`
	IsMe                  bool          `protobuf:"varint,9,opt,name=is_me,json=isMe,proto3" json:"is_me,omitempty"`
	IsCreator             bool          `protobuf:"varint,8,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
	InfoDate              int64         `protobuf:"varint,7,opt,name=info_date,json=infoDate,proto3" json:"info_date,omitempty"`
	Conversation          *Conversation `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Devices               []*Device     `protobuf:"bytes,5,rep,name=devices,proto3" json:"devices,omitempty" gorm:"foreignKey:MemberPublicKey;references:PublicKey"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{32}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Member) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Member) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

func (m *Member) GetIsMe() bool {
	if m != nil {
		return m.IsMe
	}
	return false
}

func (m *Member) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *Member) GetInfoDate() int64 {
	if m != nil {
		return m.InfoDate
	}
	return 0
}

func (m *Member) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *Member) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type Device struct {
	PublicKey       string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" gorm:"primaryKey"`
	MemberPublicKey string `protobuf:"bytes,2,opt,name=member_public_key,json=memberPublicKey,proto3" json:"member_public_key,omitempty" gorm:"index"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{33}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Device) GetMemberPublicKey() string {
	if m != nil {
		return m.MemberPublicKey
	}
	return ""
}

type AccountVerifiedCredential struct {
	AccountPK        string `protobuf:"bytes,1,opt,name=account_pk,json=accountPk,proto3" json:"account_pk,omitempty"`
	Identifier       string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	RegistrationDate int64  `protobuf:"varint,3,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	ExpirationDate   int64  `protobuf:"varint,4,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Issuer           string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (m *AccountVerifiedCredential) Reset()         { *m = AccountVerifiedCredential{} }
func (m *AccountVerifiedCredential) String() string { return proto.CompactTextString(m) }
func (*AccountVerifiedCredential) ProtoMessage()    {}
func (*AccountVerifiedCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{34}
}
func (m *AccountVerifiedCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountVerifiedCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountVerifiedCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountVerifiedCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountVerifiedCredential.Merge(m, src)
}
func (m *AccountVerifiedCredential) XXX_Size() int {
	return m.Size()
}
func (m *AccountVerifiedCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountVerifiedCredential.DiscardUnknown(m)
}

var xxx_messageInfo_AccountVerifiedCredential proto.InternalMessageInfo

func (m *AccountVerifiedCredential) GetAccountPK() string {
	if m != nil {
		return m.AccountPK
	}
	return ""
}

func (m *AccountVerifiedCredential) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AccountVerifiedCredential) GetRegistrationDate() int64 {
	if m != nil {
		return m.RegistrationDate
	}
	return 0
}

func (m *AccountVerifiedCredential) GetExpirationDate() int64 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

func (m *AccountVerifiedCredential) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

type AccountDirectoryServiceRecord struct {
	AccountPK                      string `protobuf:"bytes,1,opt,name=account_pk,json=accountPk,proto3" json:"account_pk,omitempty"`
	Identifier                     string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty" gorm:"primaryKey"`
	IdentifierProofIssuer          string `protobuf:"bytes,3,opt,name=identifier_proof_issuer,json=identifierProofIssuer,proto3" json:"identifier_proof_issuer,omitempty"`
	ServerAddr                     string `protobuf:"bytes,4,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty" gorm:"primaryKey"`
	RegistrationDate               int64  `protobuf:"varint,5,opt,name=registration_date,json=registrationDate,proto3" json:"registration_date,omitempty"`
	ExpirationDate                 int64  `protobuf:"varint,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Revoked                        bool   `protobuf:"varint,7,opt,name=revoked,proto3" json:"revoked,omitempty"`
	DirectoryRecordToken           string `protobuf:"bytes,8,opt,name=directory_record_token,json=directoryRecordToken,proto3" json:"directory_record_token,omitempty"`
	DirectoryRecordUnregisterToken string `protobuf:"bytes,9,opt,name=directory_record_unregister_token,json=directoryRecordUnregisterToken,proto3" json:"directory_record_unregister_token,omitempty"`
}

func (m *AccountDirectoryServiceRecord) Reset()         { *m = AccountDirectoryServiceRecord{} }
func (m *AccountDirectoryServiceRecord) String() string { return proto.CompactTextString(m) }
func (*AccountDirectoryServiceRecord) ProtoMessage()    {}
func (*AccountDirectoryServiceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{35}
}
func (m *AccountDirectoryServiceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDirectoryServiceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDirectoryServiceRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDirectoryServiceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDirectoryServiceRecord.Merge(m, src)
}
func (m *AccountDirectoryServiceRecord) XXX_Size() int {
	return m.Size()
}
func (m *AccountDirectoryServiceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDirectoryServiceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDirectoryServiceRecord proto.InternalMessageInfo

func (m *AccountDirectoryServiceRecord) GetAccountPK() string {
	if m != nil {
		return m.AccountPK
	}
	return ""
}

func (m *AccountDirectoryServiceRecord) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AccountDirectoryServiceRecord) GetIdentifierProofIssuer() string {
	if m != nil {
		return m.IdentifierProofIssuer
	}
	return ""
}

func (m *AccountDirectoryServiceRecord) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *AccountDirectoryServiceRecord) GetRegistrationDate() int64 {
	if m != nil {
		return m.RegistrationDate
	}
	return 0
}

func (m *AccountDirectoryServiceRecord) GetExpirationDate() int64 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

func (m *AccountDirectoryServiceRecord) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *AccountDirectoryServiceRecord) GetDirectoryRecordToken() string {
	if m != nil {
		return m.DirectoryRecordToken
	}
	return ""
}

func (m *AccountDirectoryServiceRecord) GetDirectoryRecordUnregisterToken() string {
	if m != nil {
		return m.DirectoryRecordUnregisterToken
	}
	return ""
}

type PushDeviceToken struct {
	// account_pk is the account public key that owns the device token
	AccountPK string `protobuf:"bytes,1,opt,name=account_pk,json=accountPk,proto3" json:"account_pk,omitempty" gorm:"primaryKey"`
	// token_type is the type of the token used, it allows us to act as a proxy to the appropriate push server
	TokenType pushtypes.PushServiceTokenType `protobuf:"varint,2,opt,name=token_type,json=tokenType,proto3,enum=berty.push.v1.PushServiceTokenType" json:"token_type,omitempty"`
	// bundle_id is the app identifier
	BundleID string `protobuf:"bytes,3,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	// token is the device identifier used
	Token []byte `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// public_key is the public key which will be used to encrypt the payload
	PublicKey []byte `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *PushDeviceToken) Reset()         { *m = PushDeviceToken{} }
func (m *PushDeviceToken) String() string { return proto.CompactTextString(m) }
func (*PushDeviceToken) ProtoMessage()    {}
func (*PushDeviceToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{36}
}
func (m *PushDeviceToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushDeviceToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushDeviceToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushDeviceToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushDeviceToken.Merge(m, src)
}
func (m *PushDeviceToken) XXX_Size() int {
	return m.Size()
}
func (m *PushDeviceToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PushDeviceToken.DiscardUnknown(m)
}

var xxx_messageInfo_PushDeviceToken proto.InternalMessageInfo

func (m *PushDeviceToken) GetAccountPK() string {
	if m != nil {
		return m.AccountPK
	}
	return ""
}

func (m *PushDeviceToken) GetTokenType() pushtypes.PushServiceTokenType {
	if m != nil {
		return m.TokenType
	}
	return pushtypes.PushServiceTokenType_PushTokenUndefined
}

func (m *PushDeviceToken) GetBundleID() string {
	if m != nil {
		return m.BundleID
	}
	return ""
}

func (m *PushDeviceToken) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *PushDeviceToken) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type PushServerRecord struct {
	AccountPK  string `protobuf:"bytes,1,opt,name=account_pk,json=accountPk,proto3" json:"account_pk,omitempty" gorm:"primaryKey"`
	ServerAddr string `protobuf:"bytes,2,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty" gorm:"primaryKey"`
	ServerKey  []byte `protobuf:"bytes,3,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
}

func (m *PushServerRecord) Reset()         { *m = PushServerRecord{} }
func (m *PushServerRecord) String() string { return proto.CompactTextString(m) }
func (*PushServerRecord) ProtoMessage()    {}
func (*PushServerRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{37}
}
func (m *PushServerRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushServerRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushServerRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushServerRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushServerRecord.Merge(m, src)
}
func (m *PushServerRecord) XXX_Size() int {
	return m.Size()
}
func (m *PushServerRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PushServerRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PushServerRecord proto.InternalMessageInfo

func (m *PushServerRecord) GetAccountPK() string {
	if m != nil {
		return m.AccountPK
	}
	return ""
}

func (m *PushServerRecord) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *PushServerRecord) GetServerKey() []byte {
	if m != nil {
		return m.ServerKey
	}
	return nil
}

type ContactMetadata struct {
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *ContactMetadata) Reset()         { *m = ContactMetadata{} }
func (m *ContactMetadata) String() string { return proto.CompactTextString(m) }
func (*ContactMetadata) ProtoMessage()    {}
func (*ContactMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{38}
}
func (m *ContactMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactMetadata.Merge(m, src)
}
func (m *ContactMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ContactMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ContactMetadata proto.InternalMessageInfo

func (m *ContactMetadata) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type StreamEvent struct {
	Type    StreamEvent_Type `protobuf:"varint,1,opt,name=type,proto3,enum=berty.messenger.v1.StreamEvent_Type" json:"type,omitempty"`
	Payload []byte           `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// specific to "*Updated" events
	IsNew bool `protobuf:"varint,3,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
}

func (m *StreamEvent) Reset()         { *m = StreamEvent{} }
func (m *StreamEvent) String() string { return proto.CompactTextString(m) }
func (*StreamEvent) ProtoMessage()    {}
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39}
}
func (m *StreamEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent.Merge(m, src)
}
func (m *StreamEvent) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent proto.InternalMessageInfo

func (m *StreamEvent) GetType() StreamEvent_Type {
	if m != nil {
		return m.Type
	}
	return StreamEvent_Undefined
}

func (m *StreamEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *StreamEvent) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

type StreamEvent_ConversationUpdated struct {
	Conversation *Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
}

func (m *StreamEvent_ConversationUpdated) Reset()         { *m = StreamEvent_ConversationUpdated{} }
func (m *StreamEvent_ConversationUpdated) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_ConversationUpdated) ProtoMessage()    {}
func (*StreamEvent_ConversationUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 0}
}
func (m *StreamEvent_ConversationUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_ConversationUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_ConversationUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_ConversationUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_ConversationUpdated.Merge(m, src)
}
func (m *StreamEvent_ConversationUpdated) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_ConversationUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_ConversationUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_ConversationUpdated proto.InternalMessageInfo

func (m *StreamEvent_ConversationUpdated) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

type StreamEvent_ConversationDeleted struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *StreamEvent_ConversationDeleted) Reset()         { *m = StreamEvent_ConversationDeleted{} }
func (m *StreamEvent_ConversationDeleted) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_ConversationDeleted) ProtoMessage()    {}
func (*StreamEvent_ConversationDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 1}
}
func (m *StreamEvent_ConversationDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_ConversationDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_ConversationDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_ConversationDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_ConversationDeleted.Merge(m, src)
}
func (m *StreamEvent_ConversationDeleted) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_ConversationDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_ConversationDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_ConversationDeleted proto.InternalMessageInfo

func (m *StreamEvent_ConversationDeleted) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type StreamEvent_InteractionUpdated struct {
	Interaction *Interaction `protobuf:"bytes,1,opt,name=interaction,proto3" json:"interaction,omitempty"`
}

func (m *StreamEvent_InteractionUpdated) Reset()         { *m = StreamEvent_InteractionUpdated{} }
func (m *StreamEvent_InteractionUpdated) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_InteractionUpdated) ProtoMessage()    {}
func (*StreamEvent_InteractionUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 2}
}
func (m *StreamEvent_InteractionUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_InteractionUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_InteractionUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_InteractionUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_InteractionUpdated.Merge(m, src)
}
func (m *StreamEvent_InteractionUpdated) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_InteractionUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_InteractionUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_InteractionUpdated proto.InternalMessageInfo

func (m *StreamEvent_InteractionUpdated) GetInteraction() *Interaction {
	if m != nil {
		return m.Interaction
	}
	return nil
}

type StreamEvent_InteractionDeleted struct {
	CID                   string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	ConversationPublicKey string `protobuf:"bytes,2,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty"`
}

func (m *StreamEvent_InteractionDeleted) Reset()         { *m = StreamEvent_InteractionDeleted{} }
func (m *StreamEvent_InteractionDeleted) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_InteractionDeleted) ProtoMessage()    {}
func (*StreamEvent_InteractionDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 3}
}
func (m *StreamEvent_InteractionDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_InteractionDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_InteractionDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_InteractionDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_InteractionDeleted.Merge(m, src)
}
func (m *StreamEvent_InteractionDeleted) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_InteractionDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_InteractionDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_InteractionDeleted proto.InternalMessageInfo

func (m *StreamEvent_InteractionDeleted) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

func (m *StreamEvent_InteractionDeleted) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

type StreamEvent_ContactUpdated struct {
	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (m *StreamEvent_ContactUpdated) Reset()         { *m = StreamEvent_ContactUpdated{} }
func (m *StreamEvent_ContactUpdated) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_ContactUpdated) ProtoMessage()    {}
func (*StreamEvent_ContactUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 4}
}
func (m *StreamEvent_ContactUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_ContactUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_ContactUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_ContactUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_ContactUpdated.Merge(m, src)
}
func (m *StreamEvent_ContactUpdated) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_ContactUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_ContactUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_ContactUpdated proto.InternalMessageInfo

func (m *StreamEvent_ContactUpdated) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

type StreamEvent_AccountUpdated struct {
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *StreamEvent_AccountUpdated) Reset()         { *m = StreamEvent_AccountUpdated{} }
func (m *StreamEvent_AccountUpdated) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_AccountUpdated) ProtoMessage()    {}
func (*StreamEvent_AccountUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 5}
}
func (m *StreamEvent_AccountUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_AccountUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_AccountUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_AccountUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_AccountUpdated.Merge(m, src)
}
func (m *StreamEvent_AccountUpdated) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_AccountUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_AccountUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_AccountUpdated proto.InternalMessageInfo

func (m *StreamEvent_AccountUpdated) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type StreamEvent_MemberUpdated struct {
	Member *Member `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (m *StreamEvent_MemberUpdated) Reset()         { *m = StreamEvent_MemberUpdated{} }
func (m *StreamEvent_MemberUpdated) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_MemberUpdated) ProtoMessage()    {}
func (*StreamEvent_MemberUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 6}
}
func (m *StreamEvent_MemberUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_MemberUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_MemberUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_MemberUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_MemberUpdated.Merge(m, src)
}
func (m *StreamEvent_MemberUpdated) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_MemberUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_MemberUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_MemberUpdated proto.InternalMessageInfo

func (m *StreamEvent_MemberUpdated) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

type StreamEvent_DeviceUpdated struct {
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *StreamEvent_DeviceUpdated) Reset()         { *m = StreamEvent_DeviceUpdated{} }
func (m *StreamEvent_DeviceUpdated) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_DeviceUpdated) ProtoMessage()    {}
func (*StreamEvent_DeviceUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 7}
}
func (m *StreamEvent_DeviceUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_DeviceUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_DeviceUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_DeviceUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_DeviceUpdated.Merge(m, src)
}
func (m *StreamEvent_DeviceUpdated) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_DeviceUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_DeviceUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_DeviceUpdated proto.InternalMessageInfo

func (m *StreamEvent_DeviceUpdated) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type StreamEvent_ListEnded struct {
}

func (m *StreamEvent_ListEnded) Reset()         { *m = StreamEvent_ListEnded{} }
func (m *StreamEvent_ListEnded) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_ListEnded) ProtoMessage()    {}
func (*StreamEvent_ListEnded) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 8}
}
func (m *StreamEvent_ListEnded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_ListEnded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_ListEnded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_ListEnded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_ListEnded.Merge(m, src)
}
func (m *StreamEvent_ListEnded) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_ListEnded) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_ListEnded.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_ListEnded proto.InternalMessageInfo

type StreamEvent_ConversationPartialLoad struct {
	ConversationPK string         `protobuf:"bytes,1,opt,name=conversation_pk,json=conversationPk,proto3" json:"conversation_pk,omitempty"`
	Interactions   []*Interaction `protobuf:"bytes,2,rep,name=interactions,proto3" json:"interactions,omitempty"`
}

func (m *StreamEvent_ConversationPartialLoad) Reset()         { *m = StreamEvent_ConversationPartialLoad{} }
func (m *StreamEvent_ConversationPartialLoad) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_ConversationPartialLoad) ProtoMessage()    {}
func (*StreamEvent_ConversationPartialLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 9}
}
func (m *StreamEvent_ConversationPartialLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_ConversationPartialLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_ConversationPartialLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_ConversationPartialLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_ConversationPartialLoad.Merge(m, src)
}
func (m *StreamEvent_ConversationPartialLoad) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_ConversationPartialLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_ConversationPartialLoad.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_ConversationPartialLoad proto.InternalMessageInfo

func (m *StreamEvent_ConversationPartialLoad) GetConversationPK() string {
	if m != nil {
		return m.ConversationPK
	}
	return ""
}

func (m *StreamEvent_ConversationPartialLoad) GetInteractions() []*Interaction {
	if m != nil {
		return m.Interactions
	}
	return nil
}

type StreamEvent_Notified struct {
	Type    StreamEvent_Notified_Type `protobuf:"varint,1,opt,name=type,proto3,enum=berty.messenger.v1.StreamEvent_Notified_Type" json:"type,omitempty"`
	Title   string                    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Body    string                    `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Payload []byte                    `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *StreamEvent_Notified) Reset()         { *m = StreamEvent_Notified{} }
func (m *StreamEvent_Notified) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_Notified) ProtoMessage()    {}
func (*StreamEvent_Notified) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 10}
}
func (m *StreamEvent_Notified) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_Notified) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_Notified.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_Notified) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Notified.Merge(m, src)
}
func (m *StreamEvent_Notified) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_Notified) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Notified.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Notified proto.InternalMessageInfo

func (m *StreamEvent_Notified) GetType() StreamEvent_Notified_Type {
	if m != nil {
		return m.Type
	}
	return StreamEvent_Notified_Unknown
}

func (m *StreamEvent_Notified) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StreamEvent_Notified) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *StreamEvent_Notified) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type StreamEvent_Notified_Basic struct {
}

func (m *StreamEvent_Notified_Basic) Reset()         { *m = StreamEvent_Notified_Basic{} }
func (m *StreamEvent_Notified_Basic) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_Notified_Basic) ProtoMessage()    {}
func (*StreamEvent_Notified_Basic) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 10, 0}
}
func (m *StreamEvent_Notified_Basic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_Notified_Basic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_Notified_Basic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_Notified_Basic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Notified_Basic.Merge(m, src)
}
func (m *StreamEvent_Notified_Basic) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_Notified_Basic) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Notified_Basic.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Notified_Basic proto.InternalMessageInfo

type StreamEvent_Notified_MessageReceived struct {
	Interaction  *Interaction  `protobuf:"bytes,1,opt,name=interaction,proto3" json:"interaction,omitempty"`
	Conversation *Conversation `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Contact      *Contact      `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (m *StreamEvent_Notified_MessageReceived) Reset()         { *m = StreamEvent_Notified_MessageReceived{} }
func (m *StreamEvent_Notified_MessageReceived) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_Notified_MessageReceived) ProtoMessage()    {}
func (*StreamEvent_Notified_MessageReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 10, 1}
}
func (m *StreamEvent_Notified_MessageReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_Notified_MessageReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_Notified_MessageReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_Notified_MessageReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Notified_MessageReceived.Merge(m, src)
}
func (m *StreamEvent_Notified_MessageReceived) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_Notified_MessageReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Notified_MessageReceived.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Notified_MessageReceived proto.InternalMessageInfo

func (m *StreamEvent_Notified_MessageReceived) GetInteraction() *Interaction {
	if m != nil {
		return m.Interaction
	}
	return nil
}

func (m *StreamEvent_Notified_MessageReceived) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *StreamEvent_Notified_MessageReceived) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

type StreamEvent_Notified_ContactRequestSent struct {
	Contact *Contact `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (m *StreamEvent_Notified_ContactRequestSent) Reset() {
	*m = StreamEvent_Notified_ContactRequestSent{}
}
func (m *StreamEvent_Notified_ContactRequestSent) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_Notified_ContactRequestSent) ProtoMessage()    {}
func (*StreamEvent_Notified_ContactRequestSent) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 10, 2}
}
func (m *StreamEvent_Notified_ContactRequestSent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_Notified_ContactRequestSent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_Notified_ContactRequestSent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_Notified_ContactRequestSent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Notified_ContactRequestSent.Merge(m, src)
}
func (m *StreamEvent_Notified_ContactRequestSent) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_Notified_ContactRequestSent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Notified_ContactRequestSent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Notified_ContactRequestSent proto.InternalMessageInfo

func (m *StreamEvent_Notified_ContactRequestSent) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

type StreamEvent_Notified_ContactRequestReceived struct {
	Contact *Contact `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (m *StreamEvent_Notified_ContactRequestReceived) Reset() {
	*m = StreamEvent_Notified_ContactRequestReceived{}
}
func (m *StreamEvent_Notified_ContactRequestReceived) String() string {
	return proto.CompactTextString(m)
}
func (*StreamEvent_Notified_ContactRequestReceived) ProtoMessage() {}
func (*StreamEvent_Notified_ContactRequestReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 10, 3}
}
func (m *StreamEvent_Notified_ContactRequestReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_Notified_ContactRequestReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_Notified_ContactRequestReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_Notified_ContactRequestReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Notified_ContactRequestReceived.Merge(m, src)
}
func (m *StreamEvent_Notified_ContactRequestReceived) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_Notified_ContactRequestReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Notified_ContactRequestReceived.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Notified_ContactRequestReceived proto.InternalMessageInfo

func (m *StreamEvent_Notified_ContactRequestReceived) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

type StreamEvent_Notified_GroupInvitation struct {
	Conversation *Conversation `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Contact      *Contact      `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (m *StreamEvent_Notified_GroupInvitation) Reset()         { *m = StreamEvent_Notified_GroupInvitation{} }
func (m *StreamEvent_Notified_GroupInvitation) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_Notified_GroupInvitation) ProtoMessage()    {}
func (*StreamEvent_Notified_GroupInvitation) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 10, 4}
}
func (m *StreamEvent_Notified_GroupInvitation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_Notified_GroupInvitation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_Notified_GroupInvitation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_Notified_GroupInvitation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Notified_GroupInvitation.Merge(m, src)
}
func (m *StreamEvent_Notified_GroupInvitation) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_Notified_GroupInvitation) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Notified_GroupInvitation.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Notified_GroupInvitation proto.InternalMessageInfo

func (m *StreamEvent_Notified_GroupInvitation) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

func (m *StreamEvent_Notified_GroupInvitation) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

// status events
type StreamEvent_PeerStatusConnected struct {
	PeerID    string                                    `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Transport StreamEvent_PeerStatusConnected_Transport `protobuf:"varint,2,opt,name=transport,proto3,enum=berty.messenger.v1.StreamEvent_PeerStatusConnected_Transport" json:"transport,omitempty"`
}

func (m *StreamEvent_PeerStatusConnected) Reset()         { *m = StreamEvent_PeerStatusConnected{} }
func (m *StreamEvent_PeerStatusConnected) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_PeerStatusConnected) ProtoMessage()    {}
func (*StreamEvent_PeerStatusConnected) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 11}
}
func (m *StreamEvent_PeerStatusConnected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_PeerStatusConnected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_PeerStatusConnected.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_PeerStatusConnected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_PeerStatusConnected.Merge(m, src)
}
func (m *StreamEvent_PeerStatusConnected) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_PeerStatusConnected) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_PeerStatusConnected.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_PeerStatusConnected proto.InternalMessageInfo

func (m *StreamEvent_PeerStatusConnected) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *StreamEvent_PeerStatusConnected) GetTransport() StreamEvent_PeerStatusConnected_Transport {
	if m != nil {
		return m.Transport
	}
	return StreamEvent_PeerStatusConnected_Unknown
}

type StreamEvent_PeerStatusReconnecting struct {
	PeerID string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (m *StreamEvent_PeerStatusReconnecting) Reset()         { *m = StreamEvent_PeerStatusReconnecting{} }
func (m *StreamEvent_PeerStatusReconnecting) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_PeerStatusReconnecting) ProtoMessage()    {}
func (*StreamEvent_PeerStatusReconnecting) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 12}
}
func (m *StreamEvent_PeerStatusReconnecting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_PeerStatusReconnecting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_PeerStatusReconnecting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_PeerStatusReconnecting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_PeerStatusReconnecting.Merge(m, src)
}
func (m *StreamEvent_PeerStatusReconnecting) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_PeerStatusReconnecting) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_PeerStatusReconnecting.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_PeerStatusReconnecting proto.InternalMessageInfo

func (m *StreamEvent_PeerStatusReconnecting) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

type StreamEvent_PeerStatusDisconnected struct {
	PeerID string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (m *StreamEvent_PeerStatusDisconnected) Reset()         { *m = StreamEvent_PeerStatusDisconnected{} }
func (m *StreamEvent_PeerStatusDisconnected) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_PeerStatusDisconnected) ProtoMessage()    {}
func (*StreamEvent_PeerStatusDisconnected) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 13}
}
func (m *StreamEvent_PeerStatusDisconnected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_PeerStatusDisconnected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_PeerStatusDisconnected.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_PeerStatusDisconnected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_PeerStatusDisconnected.Merge(m, src)
}
func (m *StreamEvent_PeerStatusDisconnected) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_PeerStatusDisconnected) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_PeerStatusDisconnected.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_PeerStatusDisconnected proto.InternalMessageInfo

func (m *StreamEvent_PeerStatusDisconnected) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

type StreamEvent_PeerStatusGroupAssociated struct {
	PeerID   string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	DevicePK string `protobuf:"bytes,2,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	GroupPK  string `protobuf:"bytes,3,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
}

func (m *StreamEvent_PeerStatusGroupAssociated) Reset()         { *m = StreamEvent_PeerStatusGroupAssociated{} }
func (m *StreamEvent_PeerStatusGroupAssociated) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_PeerStatusGroupAssociated) ProtoMessage()    {}
func (*StreamEvent_PeerStatusGroupAssociated) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 14}
}
func (m *StreamEvent_PeerStatusGroupAssociated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_PeerStatusGroupAssociated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_PeerStatusGroupAssociated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_PeerStatusGroupAssociated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_PeerStatusGroupAssociated.Merge(m, src)
}
func (m *StreamEvent_PeerStatusGroupAssociated) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_PeerStatusGroupAssociated) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_PeerStatusGroupAssociated.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_PeerStatusGroupAssociated proto.InternalMessageInfo

func (m *StreamEvent_PeerStatusGroupAssociated) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *StreamEvent_PeerStatusGroupAssociated) GetDevicePK() string {
	if m != nil {
		return m.DevicePK
	}
	return ""
}

func (m *StreamEvent_PeerStatusGroupAssociated) GetGroupPK() string {
	if m != nil {
		return m.GroupPK
	}
	return ""
}

type StreamEvent_ServiceTokenAdded struct {
	Token *ServiceToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *StreamEvent_ServiceTokenAdded) Reset()         { *m = StreamEvent_ServiceTokenAdded{} }
func (m *StreamEvent_ServiceTokenAdded) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_ServiceTokenAdded) ProtoMessage()    {}
func (*StreamEvent_ServiceTokenAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{39, 15}
}
func (m *StreamEvent_ServiceTokenAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent_ServiceTokenAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent_ServiceTokenAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent_ServiceTokenAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_ServiceTokenAdded.Merge(m, src)
}
func (m *StreamEvent_ServiceTokenAdded) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent_ServiceTokenAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_ServiceTokenAdded.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_ServiceTokenAdded proto.InternalMessageInfo

func (m *StreamEvent_ServiceTokenAdded) GetToken() *ServiceToken {
	if m != nil {
		return m.Token
	}
	return nil
}

type ConversationStream struct {
}

func (m *ConversationStream) Reset()         { *m = ConversationStream{} }
func (m *ConversationStream) String() string { return proto.CompactTextString(m) }
func (*ConversationStream) ProtoMessage()    {}
func (*ConversationStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{40}
}
func (m *ConversationStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationStream.Merge(m, src)
}
func (m *ConversationStream) XXX_Size() int {
	return m.Size()
}
func (m *ConversationStream) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationStream.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationStream proto.InternalMessageInfo

type ConversationStream_Request struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Page  uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *ConversationStream_Request) Reset()         { *m = ConversationStream_Request{} }
func (m *ConversationStream_Request) String() string { return proto.CompactTextString(m) }
func (*ConversationStream_Request) ProtoMessage()    {}
func (*ConversationStream_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{40, 0}
}
func (m *ConversationStream_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationStream_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationStream_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationStream_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationStream_Request.Merge(m, src)
}
func (m *ConversationStream_Request) XXX_Size() int {
	return m.Size()
}
func (m *ConversationStream_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationStream_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationStream_Request proto.InternalMessageInfo

func (m *ConversationStream_Request) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ConversationStream_Request) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ConversationStream_Reply struct {
	Conversation *Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
}

func (m *ConversationStream_Reply) Reset()         { *m = ConversationStream_Reply{} }
func (m *ConversationStream_Reply) String() string { return proto.CompactTextString(m) }
func (*ConversationStream_Reply) ProtoMessage()    {}
func (*ConversationStream_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{40, 1}
}
func (m *ConversationStream_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationStream_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationStream_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationStream_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationStream_Reply.Merge(m, src)
}
func (m *ConversationStream_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ConversationStream_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationStream_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationStream_Reply proto.InternalMessageInfo

func (m *ConversationStream_Reply) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

type ConversationCreate struct {
}

func (m *ConversationCreate) Reset()         { *m = ConversationCreate{} }
func (m *ConversationCreate) String() string { return proto.CompactTextString(m) }
func (*ConversationCreate) ProtoMessage()    {}
func (*ConversationCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{41}
}
func (m *ConversationCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationCreate.Merge(m, src)
}
func (m *ConversationCreate) XXX_Size() int {
	return m.Size()
}
func (m *ConversationCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationCreate proto.InternalMessageInfo

type ConversationCreate_Request struct {
	DisplayName      string   `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ContactsToInvite []string `protobuf:"bytes,2,rep,name=contacts_to_invite,json=contactsToInvite,proto3" json:"contacts_to_invite,omitempty"`
}

func (m *ConversationCreate_Request) Reset()         { *m = ConversationCreate_Request{} }
func (m *ConversationCreate_Request) String() string { return proto.CompactTextString(m) }
func (*ConversationCreate_Request) ProtoMessage()    {}
func (*ConversationCreate_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{41, 0}
}
func (m *ConversationCreate_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationCreate_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationCreate_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationCreate_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationCreate_Request.Merge(m, src)
}
func (m *ConversationCreate_Request) XXX_Size() int {
	return m.Size()
}
func (m *ConversationCreate_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationCreate_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationCreate_Request proto.InternalMessageInfo

func (m *ConversationCreate_Request) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ConversationCreate_Request) GetContactsToInvite() []string {
	if m != nil {
		return m.ContactsToInvite
	}
	return nil
}

type ConversationCreate_Reply struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *ConversationCreate_Reply) Reset()         { *m = ConversationCreate_Reply{} }
func (m *ConversationCreate_Reply) String() string { return proto.CompactTextString(m) }
func (*ConversationCreate_Reply) ProtoMessage()    {}
func (*ConversationCreate_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{41, 1}
}
func (m *ConversationCreate_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationCreate_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationCreate_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationCreate_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationCreate_Reply.Merge(m, src)
}
func (m *ConversationCreate_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ConversationCreate_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationCreate_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationCreate_Reply proto.InternalMessageInfo

func (m *ConversationCreate_Reply) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type AccountGet struct {
}

func (m *AccountGet) Reset()         { *m = AccountGet{} }
func (m *AccountGet) String() string { return proto.CompactTextString(m) }
func (*AccountGet) ProtoMessage()    {}
func (*AccountGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{42}
}
func (m *AccountGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountGet.Merge(m, src)
}
func (m *AccountGet) XXX_Size() int {
	return m.Size()
}
func (m *AccountGet) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountGet.DiscardUnknown(m)
}

var xxx_messageInfo_AccountGet proto.InternalMessageInfo

type AccountGet_Request struct {
}

func (m *AccountGet_Request) Reset()         { *m = AccountGet_Request{} }
func (m *AccountGet_Request) String() string { return proto.CompactTextString(m) }
func (*AccountGet_Request) ProtoMessage()    {}
func (*AccountGet_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{42, 0}
}
func (m *AccountGet_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountGet_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountGet_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountGet_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountGet_Request.Merge(m, src)
}
func (m *AccountGet_Request) XXX_Size() int {
	return m.Size()
}
func (m *AccountGet_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountGet_Request.DiscardUnknown(m)
}

var xxx_messageInfo_AccountGet_Request proto.InternalMessageInfo

type AccountGet_Reply struct {
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *AccountGet_Reply) Reset()         { *m = AccountGet_Reply{} }
func (m *AccountGet_Reply) String() string { return proto.CompactTextString(m) }
func (*AccountGet_Reply) ProtoMessage()    {}
func (*AccountGet_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{42, 1}
}
func (m *AccountGet_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountGet_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountGet_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountGet_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountGet_Reply.Merge(m, src)
}
func (m *AccountGet_Reply) XXX_Size() int {
	return m.Size()
}
func (m *AccountGet_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountGet_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_AccountGet_Reply proto.InternalMessageInfo

func (m *AccountGet_Reply) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type EventStream struct {
}

func (m *EventStream) Reset()         { *m = EventStream{} }
func (m *EventStream) String() string { return proto.CompactTextString(m) }
func (*EventStream) ProtoMessage()    {}
func (*EventStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{43}
}
func (m *EventStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStream.Merge(m, src)
}
func (m *EventStream) XXX_Size() int {
	return m.Size()
}
func (m *EventStream) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStream.DiscardUnknown(m)
}

var xxx_messageInfo_EventStream proto.InternalMessageInfo

type EventStream_Request struct {
	ShallowAmount int32 `protobuf:"varint,1,opt,name=shallow_amount,json=shallowAmount,proto3" json:"shallow_amount,omitempty"`
}

func (m *EventStream_Request) Reset()         { *m = EventStream_Request{} }
func (m *EventStream_Request) String() string { return proto.CompactTextString(m) }
func (*EventStream_Request) ProtoMessage()    {}
func (*EventStream_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{43, 0}
}
func (m *EventStream_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStream_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStream_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStream_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStream_Request.Merge(m, src)
}
func (m *EventStream_Request) XXX_Size() int {
	return m.Size()
}
func (m *EventStream_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStream_Request.DiscardUnknown(m)
}

var xxx_messageInfo_EventStream_Request proto.InternalMessageInfo

func (m *EventStream_Request) GetShallowAmount() int32 {
	if m != nil {
		return m.ShallowAmount
	}
	return 0
}

type EventStream_Reply struct {
	Event *StreamEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *EventStream_Reply) Reset()         { *m = EventStream_Reply{} }
func (m *EventStream_Reply) String() string { return proto.CompactTextString(m) }
func (*EventStream_Reply) ProtoMessage()    {}
func (*EventStream_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{43, 1}
}
func (m *EventStream_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStream_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStream_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStream_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStream_Reply.Merge(m, src)
}
func (m *EventStream_Reply) XXX_Size() int {
	return m.Size()
}
func (m *EventStream_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStream_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_EventStream_Reply proto.InternalMessageInfo

func (m *EventStream_Reply) GetEvent() *StreamEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

type AccountUpdate struct {
}

func (m *AccountUpdate) Reset()         { *m = AccountUpdate{} }
func (m *AccountUpdate) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate) ProtoMessage()    {}
func (*AccountUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{44}
}
func (m *AccountUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate.Merge(m, src)
}
func (m *AccountUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate proto.InternalMessageInfo

type AccountUpdate_Request struct {
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *AccountUpdate_Request) Reset()         { *m = AccountUpdate_Request{} }
func (m *AccountUpdate_Request) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_Request) ProtoMessage()    {}
func (*AccountUpdate_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{44, 0}
}
func (m *AccountUpdate_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_Request.Merge(m, src)
}
func (m *AccountUpdate_Request) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_Request.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_Request proto.InternalMessageInfo

func (m *AccountUpdate_Request) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type AccountUpdate_Reply struct {
}

func (m *AccountUpdate_Reply) Reset()         { *m = AccountUpdate_Reply{} }
func (m *AccountUpdate_Reply) String() string { return proto.CompactTextString(m) }
func (*AccountUpdate_Reply) ProtoMessage()    {}
func (*AccountUpdate_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{44, 1}
}
func (m *AccountUpdate_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUpdate_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUpdate_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUpdate_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUpdate_Reply.Merge(m, src)
}
func (m *AccountUpdate_Reply) XXX_Size() int {
	return m.Size()
}
func (m *AccountUpdate_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUpdate_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUpdate_Reply proto.InternalMessageInfo

type AccountPushConfigure struct {
}

func (m *AccountPushConfigure) Reset()         { *m = AccountPushConfigure{} }
func (m *AccountPushConfigure) String() string { return proto.CompactTextString(m) }
func (*AccountPushConfigure) ProtoMessage()    {}
func (*AccountPushConfigure) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{45}
}
func (m *AccountPushConfigure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPushConfigure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPushConfigure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPushConfigure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPushConfigure.Merge(m, src)
}
func (m *AccountPushConfigure) XXX_Size() int {
	return m.Size()
}
func (m *AccountPushConfigure) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPushConfigure.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPushConfigure proto.InternalMessageInfo

type AccountPushConfigure_Request struct {
	MutedUntil             int64 `protobuf:"varint,1,opt,name=muted_until,json=mutedUntil,proto3" json:"muted_until,omitempty"`
	Unmute                 bool  `protobuf:"varint,2,opt,name=unmute,proto3" json:"unmute,omitempty"`
	MuteForever            bool  `protobuf:"varint,3,opt,name=mute_forever,json=muteForever,proto3" json:"mute_forever,omitempty"`
	HideInAppNotifications bool  `protobuf:"varint,4,opt,name=hide_in_app_notifications,json=hideInAppNotifications,proto3" json:"hide_in_app_notifications,omitempty"`
	HidePushPreviews       bool  `protobuf:"varint,5,opt,name=hide_push_previews,json=hidePushPreviews,proto3" json:"hide_push_previews,omitempty"`
	ShowInAppNotifications bool  `protobuf:"varint,6,opt,name=show_in_app_notifications,json=showInAppNotifications,proto3" json:"show_in_app_notifications,omitempty"`
	ShowPushPreviews       bool  `protobuf:"varint,7,opt,name=show_push_previews,json=showPushPreviews,proto3" json:"show_push_previews,omitempty"`
}

func (m *AccountPushConfigure_Request) Reset()         { *m = AccountPushConfigure_Request{} }
func (m *AccountPushConfigure_Request) String() string { return proto.CompactTextString(m) }
func (*AccountPushConfigure_Request) ProtoMessage()    {}
func (*AccountPushConfigure_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{45, 0}
}
func (m *AccountPushConfigure_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPushConfigure_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPushConfigure_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPushConfigure_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPushConfigure_Request.Merge(m, src)
}
func (m *AccountPushConfigure_Request) XXX_Size() int {
	return m.Size()
}
func (m *AccountPushConfigure_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPushConfigure_Request.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPushConfigure_Request proto.InternalMessageInfo

func (m *AccountPushConfigure_Request) GetMutedUntil() int64 {
	if m != nil {
		return m.MutedUntil
	}
	return 0
}

func (m *AccountPushConfigure_Request) GetUnmute() bool {
	if m != nil {
		return m.Unmute
	}
	return false
}

func (m *AccountPushConfigure_Request) GetMuteForever() bool {
	if m != nil {
		return m.MuteForever
	}
	return false
}

func (m *AccountPushConfigure_Request) GetHideInAppNotifications() bool {
	if m != nil {
		return m.HideInAppNotifications
	}
	return false
}

func (m *AccountPushConfigure_Request) GetHidePushPreviews() bool {
	if m != nil {
		return m.HidePushPreviews
	}
	return false
}

func (m *AccountPushConfigure_Request) GetShowInAppNotifications() bool {
	if m != nil {
		return m.ShowInAppNotifications
	}
	return false
}

func (m *AccountPushConfigure_Request) GetShowPushPreviews() bool {
	if m != nil {
		return m.ShowPushPreviews
	}
	return false
}

type AccountPushConfigure_Reply struct {
}

func (m *AccountPushConfigure_Reply) Reset()         { *m = AccountPushConfigure_Reply{} }
func (m *AccountPushConfigure_Reply) String() string { return proto.CompactTextString(m) }
func (*AccountPushConfigure_Reply) ProtoMessage()    {}
func (*AccountPushConfigure_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{45, 1}
}
func (m *AccountPushConfigure_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPushConfigure_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPushConfigure_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPushConfigure_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPushConfigure_Reply.Merge(m, src)
}
func (m *AccountPushConfigure_Reply) XXX_Size() int {
	return m.Size()
}
func (m *AccountPushConfigure_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPushConfigure_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPushConfigure_Reply proto.InternalMessageInfo

type ContactRequest struct {
}

func (m *ContactRequest) Reset()         { *m = ContactRequest{} }
func (m *ContactRequest) String() string { return proto.CompactTextString(m) }
func (*ContactRequest) ProtoMessage()    {}
func (*ContactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{46}
}
func (m *ContactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequest.Merge(m, src)
}
func (m *ContactRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequest proto.InternalMessageInfo

type ContactRequest_Request struct {
	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	// optional passphase to decrypt the link
	Passphrase []byte `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *ContactRequest_Request) Reset()         { *m = ContactRequest_Request{} }
func (m *ContactRequest_Request) String() string { return proto.CompactTextString(m) }
func (*ContactRequest_Request) ProtoMessage()    {}
func (*ContactRequest_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{46, 0}
}
func (m *ContactRequest_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequest_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequest_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequest_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequest_Request.Merge(m, src)
}
func (m *ContactRequest_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequest_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequest_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequest_Request proto.InternalMessageInfo

func (m *ContactRequest_Request) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ContactRequest_Request) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type ContactRequest_Reply struct {
}

func (m *ContactRequest_Reply) Reset()         { *m = ContactRequest_Reply{} }
func (m *ContactRequest_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactRequest_Reply) ProtoMessage()    {}
func (*ContactRequest_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{46, 1}
}
func (m *ContactRequest_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRequest_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRequest_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRequest_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequest_Reply.Merge(m, src)
}
func (m *ContactRequest_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactRequest_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequest_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequest_Reply proto.InternalMessageInfo

type ContactAccept struct {
}

func (m *ContactAccept) Reset()         { *m = ContactAccept{} }
func (m *ContactAccept) String() string { return proto.CompactTextString(m) }
func (*ContactAccept) ProtoMessage()    {}
func (*ContactAccept) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{47}
}
func (m *ContactAccept) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactAccept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactAccept.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactAccept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactAccept.Merge(m, src)
}
func (m *ContactAccept) XXX_Size() int {
	return m.Size()
}
func (m *ContactAccept) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactAccept.DiscardUnknown(m)
}

var xxx_messageInfo_ContactAccept proto.InternalMessageInfo

type ContactAccept_Request struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *ContactAccept_Request) Reset()         { *m = ContactAccept_Request{} }
func (m *ContactAccept_Request) String() string { return proto.CompactTextString(m) }
func (*ContactAccept_Request) ProtoMessage()    {}
func (*ContactAccept_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{47, 0}
}
func (m *ContactAccept_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactAccept_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactAccept_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactAccept_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactAccept_Request.Merge(m, src)
}
func (m *ContactAccept_Request) XXX_Size() int {
	return m.Size()
}
func (m *ContactAccept_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactAccept_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ContactAccept_Request proto.InternalMessageInfo

func (m *ContactAccept_Request) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type ContactAccept_Reply struct {
}

func (m *ContactAccept_Reply) Reset()         { *m = ContactAccept_Reply{} }
func (m *ContactAccept_Reply) String() string { return proto.CompactTextString(m) }
func (*ContactAccept_Reply) ProtoMessage()    {}
func (*ContactAccept_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{47, 1}
}
func (m *ContactAccept_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactAccept_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactAccept_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactAccept_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactAccept_Reply.Merge(m, src)
}
func (m *ContactAccept_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ContactAccept_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactAccept_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ContactAccept_Reply proto.InternalMessageInfo

type Interact struct {
}

func (m *Interact) Reset()         { *m = Interact{} }
func (m *Interact) String() string { return proto.CompactTextString(m) }
func (*Interact) ProtoMessage()    {}
func (*Interact) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{48}
}
func (m *Interact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interact.Merge(m, src)
}
func (m *Interact) XXX_Size() int {
	return m.Size()
}
func (m *Interact) XXX_DiscardUnknown() {
	xxx_messageInfo_Interact.DiscardUnknown(m)
}

var xxx_messageInfo_Interact proto.InternalMessageInfo

type Interact_Request struct {
	Type                  AppMessage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=berty.messenger.v1.AppMessage_Type" json:"type,omitempty"`
	Payload               []byte          `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	ConversationPublicKey string          `protobuf:"bytes,3,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty"`
	TargetCID             string          `protobuf:"bytes,5,opt,name=target_cid,json=targetCid,proto3" json:"target_cid,omitempty"`
	Metadata              bool            `protobuf:"varint,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Interact_Request) Reset()         { *m = Interact_Request{} }
func (m *Interact_Request) String() string { return proto.CompactTextString(m) }
func (*Interact_Request) ProtoMessage()    {}
func (*Interact_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{48, 0}
}
func (m *Interact_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interact_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interact_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interact_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interact_Request.Merge(m, src)
}
func (m *Interact_Request) XXX_Size() int {
	return m.Size()
}
func (m *Interact_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Interact_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Interact_Request proto.InternalMessageInfo

func (m *Interact_Request) GetType() AppMessage_Type {
	if m != nil {
		return m.Type
	}
	return AppMessage_Undefined
}

func (m *Interact_Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Interact_Request) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

func (m *Interact_Request) GetTargetCID() string {
	if m != nil {
		return m.TargetCID
	}
	return ""
}

func (m *Interact_Request) GetMetadata() bool {
	if m != nil {
		return m.Metadata
	}
	return false
}

type Interact_Reply struct {
	CID string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *Interact_Reply) Reset()         { *m = Interact_Reply{} }
func (m *Interact_Reply) String() string { return proto.CompactTextString(m) }
func (*Interact_Reply) ProtoMessage()    {}
func (*Interact_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{48, 1}
}
func (m *Interact_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interact_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interact_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interact_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interact_Reply.Merge(m, src)
}
func (m *Interact_Reply) XXX_Size() int {
	return m.Size()
}
func (m *Interact_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Interact_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Interact_Reply proto.InternalMessageInfo

func (m *Interact_Reply) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

type ReplicationServiceRegisterGroup struct {
}

func (m *ReplicationServiceRegisterGroup) Reset()         { *m = ReplicationServiceRegisterGroup{} }
func (m *ReplicationServiceRegisterGroup) String() string { return proto.CompactTextString(m) }
func (*ReplicationServiceRegisterGroup) ProtoMessage()    {}
func (*ReplicationServiceRegisterGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{49}
}
func (m *ReplicationServiceRegisterGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationServiceRegisterGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationServiceRegisterGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationServiceRegisterGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationServiceRegisterGroup.Merge(m, src)
}
func (m *ReplicationServiceRegisterGroup) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationServiceRegisterGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationServiceRegisterGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationServiceRegisterGroup proto.InternalMessageInfo

type ReplicationServiceRegisterGroup_Request struct {
	TokenID               string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	ConversationPublicKey string `protobuf:"bytes,2,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty"`
}

func (m *ReplicationServiceRegisterGroup_Request) Reset() {
	*m = ReplicationServiceRegisterGroup_Request{}
}
func (m *ReplicationServiceRegisterGroup_Request) String() string { return proto.CompactTextString(m) }
func (*ReplicationServiceRegisterGroup_Request) ProtoMessage()    {}
func (*ReplicationServiceRegisterGroup_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{49, 0}
}
func (m *ReplicationServiceRegisterGroup_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationServiceRegisterGroup_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationServiceRegisterGroup_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationServiceRegisterGroup_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationServiceRegisterGroup_Request.Merge(m, src)
}
func (m *ReplicationServiceRegisterGroup_Request) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationServiceRegisterGroup_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationServiceRegisterGroup_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationServiceRegisterGroup_Request proto.InternalMessageInfo

func (m *ReplicationServiceRegisterGroup_Request) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

func (m *ReplicationServiceRegisterGroup_Request) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

type ReplicationServiceRegisterGroup_Reply struct {
}

func (m *ReplicationServiceRegisterGroup_Reply) Reset()         { *m = ReplicationServiceRegisterGroup_Reply{} }
func (m *ReplicationServiceRegisterGroup_Reply) String() string { return proto.CompactTextString(m) }
func (*ReplicationServiceRegisterGroup_Reply) ProtoMessage()    {}
func (*ReplicationServiceRegisterGroup_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{49, 1}
}
func (m *ReplicationServiceRegisterGroup_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationServiceRegisterGroup_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationServiceRegisterGroup_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationServiceRegisterGroup_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationServiceRegisterGroup_Reply.Merge(m, src)
}
func (m *ReplicationServiceRegisterGroup_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationServiceRegisterGroup_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationServiceRegisterGroup_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationServiceRegisterGroup_Reply proto.InternalMessageInfo

type ReplicationSetAutoEnable struct {
}

func (m *ReplicationSetAutoEnable) Reset()         { *m = ReplicationSetAutoEnable{} }
func (m *ReplicationSetAutoEnable) String() string { return proto.CompactTextString(m) }
func (*ReplicationSetAutoEnable) ProtoMessage()    {}
func (*ReplicationSetAutoEnable) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{50}
}
func (m *ReplicationSetAutoEnable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationSetAutoEnable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationSetAutoEnable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationSetAutoEnable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationSetAutoEnable.Merge(m, src)
}
func (m *ReplicationSetAutoEnable) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationSetAutoEnable) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationSetAutoEnable.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationSetAutoEnable proto.InternalMessageInfo

type ReplicationSetAutoEnable_Request struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *ReplicationSetAutoEnable_Request) Reset()         { *m = ReplicationSetAutoEnable_Request{} }
func (m *ReplicationSetAutoEnable_Request) String() string { return proto.CompactTextString(m) }
func (*ReplicationSetAutoEnable_Request) ProtoMessage()    {}
func (*ReplicationSetAutoEnable_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{50, 0}
}
func (m *ReplicationSetAutoEnable_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationSetAutoEnable_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationSetAutoEnable_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationSetAutoEnable_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationSetAutoEnable_Request.Merge(m, src)
}
func (m *ReplicationSetAutoEnable_Request) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationSetAutoEnable_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationSetAutoEnable_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationSetAutoEnable_Request proto.InternalMessageInfo

func (m *ReplicationSetAutoEnable_Request) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type ReplicationSetAutoEnable_Reply struct {
}

func (m *ReplicationSetAutoEnable_Reply) Reset()         { *m = ReplicationSetAutoEnable_Reply{} }
func (m *ReplicationSetAutoEnable_Reply) String() string { return proto.CompactTextString(m) }
func (*ReplicationSetAutoEnable_Reply) ProtoMessage()    {}
func (*ReplicationSetAutoEnable_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{50, 1}
}
func (m *ReplicationSetAutoEnable_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationSetAutoEnable_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationSetAutoEnable_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationSetAutoEnable_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationSetAutoEnable_Reply.Merge(m, src)
}
func (m *ReplicationSetAutoEnable_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationSetAutoEnable_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationSetAutoEnable_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationSetAutoEnable_Reply proto.InternalMessageInfo

type BannerQuote struct {
}

func (m *BannerQuote) Reset()         { *m = BannerQuote{} }
func (m *BannerQuote) String() string { return proto.CompactTextString(m) }
func (*BannerQuote) ProtoMessage()    {}
func (*BannerQuote) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{51}
}
func (m *BannerQuote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannerQuote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannerQuote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannerQuote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannerQuote.Merge(m, src)
}
func (m *BannerQuote) XXX_Size() int {
	return m.Size()
}
func (m *BannerQuote) XXX_DiscardUnknown() {
	xxx_messageInfo_BannerQuote.DiscardUnknown(m)
}

var xxx_messageInfo_BannerQuote proto.InternalMessageInfo

type BannerQuote_Request struct {
	Random bool `protobuf:"varint,1,opt,name=random,proto3" json:"random,omitempty"`
}

func (m *BannerQuote_Request) Reset()         { *m = BannerQuote_Request{} }
func (m *BannerQuote_Request) String() string { return proto.CompactTextString(m) }
func (*BannerQuote_Request) ProtoMessage()    {}
func (*BannerQuote_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{51, 0}
}
func (m *BannerQuote_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannerQuote_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannerQuote_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannerQuote_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannerQuote_Request.Merge(m, src)
}
func (m *BannerQuote_Request) XXX_Size() int {
	return m.Size()
}
func (m *BannerQuote_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_BannerQuote_Request.DiscardUnknown(m)
}

var xxx_messageInfo_BannerQuote_Request proto.InternalMessageInfo

func (m *BannerQuote_Request) GetRandom() bool {
	if m != nil {
		return m.Random
	}
	return false
}

type BannerQuote_Reply struct {
	Quote  string `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty"`
	Author string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
}

func (m *BannerQuote_Reply) Reset()         { *m = BannerQuote_Reply{} }
func (m *BannerQuote_Reply) String() string { return proto.CompactTextString(m) }
func (*BannerQuote_Reply) ProtoMessage()    {}
func (*BannerQuote_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{51, 1}
}
func (m *BannerQuote_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannerQuote_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannerQuote_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannerQuote_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannerQuote_Reply.Merge(m, src)
}
func (m *BannerQuote_Reply) XXX_Size() int {
	return m.Size()
}
func (m *BannerQuote_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_BannerQuote_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_BannerQuote_Reply proto.InternalMessageInfo

func (m *BannerQuote_Reply) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

func (m *BannerQuote_Reply) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type InstanceExportData struct {
}

func (m *InstanceExportData) Reset()         { *m = InstanceExportData{} }
func (m *InstanceExportData) String() string { return proto.CompactTextString(m) }
func (*InstanceExportData) ProtoMessage()    {}
func (*InstanceExportData) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{52}
}
func (m *InstanceExportData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceExportData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceExportData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceExportData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceExportData.Merge(m, src)
}
func (m *InstanceExportData) XXX_Size() int {
	return m.Size()
}
func (m *InstanceExportData) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceExportData.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceExportData proto.InternalMessageInfo

type InstanceExportData_Request struct {
}

func (m *InstanceExportData_Request) Reset()         { *m = InstanceExportData_Request{} }
func (m *InstanceExportData_Request) String() string { return proto.CompactTextString(m) }
func (*InstanceExportData_Request) ProtoMessage()    {}
func (*InstanceExportData_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{52, 0}
}
func (m *InstanceExportData_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceExportData_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceExportData_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceExportData_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceExportData_Request.Merge(m, src)
}
func (m *InstanceExportData_Request) XXX_Size() int {
	return m.Size()
}
func (m *InstanceExportData_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceExportData_Request.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceExportData_Request proto.InternalMessageInfo

type InstanceExportData_Reply struct {
	ExportedData []byte `protobuf:"bytes,1,opt,name=exported_data,json=exportedData,proto3" json:"exported_data,omitempty"`
}

func (m *InstanceExportData_Reply) Reset()         { *m = InstanceExportData_Reply{} }
func (m *InstanceExportData_Reply) String() string { return proto.CompactTextString(m) }
func (*InstanceExportData_Reply) ProtoMessage()    {}
func (*InstanceExportData_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{52, 1}
}
func (m *InstanceExportData_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceExportData_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceExportData_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceExportData_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceExportData_Reply.Merge(m, src)
}
func (m *InstanceExportData_Reply) XXX_Size() int {
	return m.Size()
}
func (m *InstanceExportData_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceExportData_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceExportData_Reply proto.InternalMessageInfo

func (m *InstanceExportData_Reply) GetExportedData() []byte {
	if m != nil {
		return m.ExportedData
	}
	return nil
}

type LocalDatabaseState struct {
	PublicKey               string                    `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	DisplayName             string                    `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ReplicateFlag           bool                      `protobuf:"varint,3,opt,name=replicate_flag,json=replicateFlag,proto3" json:"replicate_flag,omitempty"`
	LocalConversationsState []*LocalConversationState `protobuf:"bytes,4,rep,name=local_conversations_state,json=localConversationsState,proto3" json:"local_conversations_state,omitempty"`
	AccountLink             string                    `protobuf:"bytes,5,opt,name=account_link,json=accountLink,proto3" json:"account_link,omitempty"`
	AutoSharePushTokenFlag  bool                      `protobuf:"varint,6,opt,name=auto_share_push_token_flag,json=autoSharePushTokenFlag,proto3" json:"auto_share_push_token_flag,omitempty"`
}

func (m *LocalDatabaseState) Reset()         { *m = LocalDatabaseState{} }
func (m *LocalDatabaseState) String() string { return proto.CompactTextString(m) }
func (*LocalDatabaseState) ProtoMessage()    {}
func (*LocalDatabaseState) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{53}
}
func (m *LocalDatabaseState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalDatabaseState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalDatabaseState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalDatabaseState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalDatabaseState.Merge(m, src)
}
func (m *LocalDatabaseState) XXX_Size() int {
	return m.Size()
}
func (m *LocalDatabaseState) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalDatabaseState.DiscardUnknown(m)
}

var xxx_messageInfo_LocalDatabaseState proto.InternalMessageInfo

func (m *LocalDatabaseState) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *LocalDatabaseState) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LocalDatabaseState) GetReplicateFlag() bool {
	if m != nil {
		return m.ReplicateFlag
	}
	return false
}

func (m *LocalDatabaseState) GetLocalConversationsState() []*LocalConversationState {
	if m != nil {
		return m.LocalConversationsState
	}
	return nil
}

func (m *LocalDatabaseState) GetAccountLink() string {
	if m != nil {
		return m.AccountLink
	}
	return ""
}

func (m *LocalDatabaseState) GetAutoSharePushTokenFlag() bool {
	if m != nil {
		return m.AutoSharePushTokenFlag
	}
	return false
}

type LocalConversationState struct {
	PublicKey   string            `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	UnreadCount int32             `protobuf:"varint,2,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	IsOpen      bool              `protobuf:"varint,3,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	Type        Conversation_Type `protobuf:"varint,4,opt,name=type,proto3,enum=berty.messenger.v1.Conversation_Type" json:"type,omitempty"`
}

func (m *LocalConversationState) Reset()         { *m = LocalConversationState{} }
func (m *LocalConversationState) String() string { return proto.CompactTextString(m) }
func (*LocalConversationState) ProtoMessage()    {}
func (*LocalConversationState) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{54}
}
func (m *LocalConversationState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalConversationState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalConversationState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalConversationState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalConversationState.Merge(m, src)
}
func (m *LocalConversationState) XXX_Size() int {
	return m.Size()
}
func (m *LocalConversationState) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalConversationState.DiscardUnknown(m)
}

var xxx_messageInfo_LocalConversationState proto.InternalMessageInfo

func (m *LocalConversationState) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *LocalConversationState) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *LocalConversationState) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (m *LocalConversationState) GetType() Conversation_Type {
	if m != nil {
		return m.Type
	}
	return Conversation_Undefined
}

type MessageSearch struct {
}

func (m *MessageSearch) Reset()         { *m = MessageSearch{} }
func (m *MessageSearch) String() string { return proto.CompactTextString(m) }
func (*MessageSearch) ProtoMessage()    {}
func (*MessageSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{55}
}
func (m *MessageSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSearch.Merge(m, src)
}
func (m *MessageSearch) XXX_Size() int {
	return m.Size()
}
func (m *MessageSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSearch.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSearch proto.InternalMessageInfo

type MessageSearch_Request struct {
	Query          string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	BeforeDate     int64  `protobuf:"varint,2,opt,name=before_date,json=beforeDate,proto3" json:"before_date,omitempty"`
	AfterDate      int64  `protobuf:"varint,3,opt,name=after_date,json=afterDate,proto3" json:"after_date,omitempty"`
	Limit          int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	RefCID         string `protobuf:"bytes,5,opt,name=ref_cid,json=refCid,proto3" json:"ref_cid,omitempty"`
	OldestToNewest bool   `protobuf:"varint,6,opt,name=oldest_to_newest,json=oldestToNewest,proto3" json:"oldest_to_newest,omitempty"`
}

func (m *MessageSearch_Request) Reset()         { *m = MessageSearch_Request{} }
func (m *MessageSearch_Request) String() string { return proto.CompactTextString(m) }
func (*MessageSearch_Request) ProtoMessage()    {}
func (*MessageSearch_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{55, 0}
}
func (m *MessageSearch_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSearch_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSearch_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSearch_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSearch_Request.Merge(m, src)
}
func (m *MessageSearch_Request) XXX_Size() int {
	return m.Size()
}
func (m *MessageSearch_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSearch_Request.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSearch_Request proto.InternalMessageInfo

func (m *MessageSearch_Request) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *MessageSearch_Request) GetBeforeDate() int64 {
	if m != nil {
		return m.BeforeDate
	}
	return 0
}

func (m *MessageSearch_Request) GetAfterDate() int64 {
	if m != nil {
		return m.AfterDate
	}
	return 0
}

func (m *MessageSearch_Request) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MessageSearch_Request) GetRefCID() string {
	if m != nil {
		return m.RefCID
	}
	return ""
}

func (m *MessageSearch_Request) GetOldestToNewest() bool {
	if m != nil {
		return m.OldestToNewest
	}
	return false
}

type MessageSearch_Reply struct {
	Results []*Interaction `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *MessageSearch_Reply) Reset()         { *m = MessageSearch_Reply{} }
func (m *MessageSearch_Reply) String() string { return proto.CompactTextString(m) }
func (*MessageSearch_Reply) ProtoMessage()    {}
func (*MessageSearch_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{55, 1}
}
func (m *MessageSearch_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSearch_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSearch_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSearch_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSearch_Reply.Merge(m, src)
}
func (m *MessageSearch_Reply) XXX_Size() int {
	return m.Size()
}
func (m *MessageSearch_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSearch_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSearch_Reply proto.InternalMessageInfo

func (m *MessageSearch_Reply) GetResults() []*Interaction {
	if m != nil {
		return m.Results
	}
	return nil
}

type TyberHostSearch struct {
}

func (m *TyberHostSearch) Reset()         { *m = TyberHostSearch{} }
func (m *TyberHostSearch) String() string { return proto.CompactTextString(m) }
func (*TyberHostSearch) ProtoMessage()    {}
func (*TyberHostSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{56}
}
func (m *TyberHostSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TyberHostSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TyberHostSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TyberHostSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TyberHostSearch.Merge(m, src)
}
func (m *TyberHostSearch) XXX_Size() int {
	return m.Size()
}
func (m *TyberHostSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_TyberHostSearch.DiscardUnknown(m)
}

var xxx_messageInfo_TyberHostSearch proto.InternalMessageInfo

type TyberHostSearch_Request struct {
}

func (m *TyberHostSearch_Request) Reset()         { *m = TyberHostSearch_Request{} }
func (m *TyberHostSearch_Request) String() string { return proto.CompactTextString(m) }
func (*TyberHostSearch_Request) ProtoMessage()    {}
func (*TyberHostSearch_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{56, 0}
}
func (m *TyberHostSearch_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TyberHostSearch_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TyberHostSearch_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TyberHostSearch_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TyberHostSearch_Request.Merge(m, src)
}
func (m *TyberHostSearch_Request) XXX_Size() int {
	return m.Size()
}
func (m *TyberHostSearch_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_TyberHostSearch_Request.DiscardUnknown(m)
}

var xxx_messageInfo_TyberHostSearch_Request proto.InternalMessageInfo

type TyberHostSearch_Reply struct {
	Hostname string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IPv4     []string `protobuf:"bytes,2,rep,name=ipv4,proto3" json:"ipv4,omitempty"`
	IPv6     []string `protobuf:"bytes,3,rep,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (m *TyberHostSearch_Reply) Reset()         { *m = TyberHostSearch_Reply{} }
func (m *TyberHostSearch_Reply) String() string { return proto.CompactTextString(m) }
func (*TyberHostSearch_Reply) ProtoMessage()    {}
func (*TyberHostSearch_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{56, 1}
}
func (m *TyberHostSearch_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TyberHostSearch_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TyberHostSearch_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TyberHostSearch_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TyberHostSearch_Reply.Merge(m, src)
}
func (m *TyberHostSearch_Reply) XXX_Size() int {
	return m.Size()
}
func (m *TyberHostSearch_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_TyberHostSearch_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_TyberHostSearch_Reply proto.InternalMessageInfo

func (m *TyberHostSearch_Reply) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *TyberHostSearch_Reply) GetIPv4() []string {
	if m != nil {
		return m.IPv4
	}
	return nil
}

func (m *TyberHostSearch_Reply) GetIPv6() []string {
	if m != nil {
		return m.IPv6
	}
	return nil
}

type TyberHostAttach struct {
}

func (m *TyberHostAttach) Reset()         { *m = TyberHostAttach{} }
func (m *TyberHostAttach) String() string { return proto.CompactTextString(m) }
func (*TyberHostAttach) ProtoMessage()    {}
func (*TyberHostAttach) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{57}
}
func (m *TyberHostAttach) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TyberHostAttach) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TyberHostAttach.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TyberHostAttach) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TyberHostAttach.Merge(m, src)
}
func (m *TyberHostAttach) XXX_Size() int {
	return m.Size()
}
func (m *TyberHostAttach) XXX_DiscardUnknown() {
	xxx_messageInfo_TyberHostAttach.DiscardUnknown(m)
}

var xxx_messageInfo_TyberHostAttach proto.InternalMessageInfo

type TyberHostAttach_Request struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *TyberHostAttach_Request) Reset()         { *m = TyberHostAttach_Request{} }
func (m *TyberHostAttach_Request) String() string { return proto.CompactTextString(m) }
func (*TyberHostAttach_Request) ProtoMessage()    {}
func (*TyberHostAttach_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{57, 0}
}
func (m *TyberHostAttach_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TyberHostAttach_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TyberHostAttach_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TyberHostAttach_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TyberHostAttach_Request.Merge(m, src)
}
func (m *TyberHostAttach_Request) XXX_Size() int {
	return m.Size()
}
func (m *TyberHostAttach_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_TyberHostAttach_Request.DiscardUnknown(m)
}

var xxx_messageInfo_TyberHostAttach_Request proto.InternalMessageInfo

func (m *TyberHostAttach_Request) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type TyberHostAttach_Reply struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *TyberHostAttach_Reply) Reset()         { *m = TyberHostAttach_Reply{} }
func (m *TyberHostAttach_Reply) String() string { return proto.CompactTextString(m) }
func (*TyberHostAttach_Reply) ProtoMessage()    {}
func (*TyberHostAttach_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{57, 1}
}
func (m *TyberHostAttach_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TyberHostAttach_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TyberHostAttach_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TyberHostAttach_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TyberHostAttach_Reply.Merge(m, src)
}
func (m *TyberHostAttach_Reply) XXX_Size() int {
	return m.Size()
}
func (m *TyberHostAttach_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_TyberHostAttach_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_TyberHostAttach_Reply proto.InternalMessageInfo

func (m *TyberHostAttach_Reply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type PushSetDeviceToken struct {
}

func (m *PushSetDeviceToken) Reset()         { *m = PushSetDeviceToken{} }
func (m *PushSetDeviceToken) String() string { return proto.CompactTextString(m) }
func (*PushSetDeviceToken) ProtoMessage()    {}
func (*PushSetDeviceToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{58}
}
func (m *PushSetDeviceToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetDeviceToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetDeviceToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetDeviceToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetDeviceToken.Merge(m, src)
}
func (m *PushSetDeviceToken) XXX_Size() int {
	return m.Size()
}
func (m *PushSetDeviceToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetDeviceToken.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetDeviceToken proto.InternalMessageInfo

type PushSetDeviceToken_Request struct {
	Receiver *pushtypes.PushServiceReceiver `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *PushSetDeviceToken_Request) Reset()         { *m = PushSetDeviceToken_Request{} }
func (m *PushSetDeviceToken_Request) String() string { return proto.CompactTextString(m) }
func (*PushSetDeviceToken_Request) ProtoMessage()    {}
func (*PushSetDeviceToken_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{58, 0}
}
func (m *PushSetDeviceToken_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetDeviceToken_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetDeviceToken_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetDeviceToken_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetDeviceToken_Request.Merge(m, src)
}
func (m *PushSetDeviceToken_Request) XXX_Size() int {
	return m.Size()
}
func (m *PushSetDeviceToken_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetDeviceToken_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetDeviceToken_Request proto.InternalMessageInfo

func (m *PushSetDeviceToken_Request) GetReceiver() *pushtypes.PushServiceReceiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

type PushSetDeviceToken_Reply struct {
}

func (m *PushSetDeviceToken_Reply) Reset()         { *m = PushSetDeviceToken_Reply{} }
func (m *PushSetDeviceToken_Reply) String() string { return proto.CompactTextString(m) }
func (*PushSetDeviceToken_Reply) ProtoMessage()    {}
func (*PushSetDeviceToken_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{58, 1}
}
func (m *PushSetDeviceToken_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetDeviceToken_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetDeviceToken_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetDeviceToken_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetDeviceToken_Reply.Merge(m, src)
}
func (m *PushSetDeviceToken_Reply) XXX_Size() int {
	return m.Size()
}
func (m *PushSetDeviceToken_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetDeviceToken_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetDeviceToken_Reply proto.InternalMessageInfo

type PushSetAutoShare struct {
}

func (m *PushSetAutoShare) Reset()         { *m = PushSetAutoShare{} }
func (m *PushSetAutoShare) String() string { return proto.CompactTextString(m) }
func (*PushSetAutoShare) ProtoMessage()    {}
func (*PushSetAutoShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{59}
}
func (m *PushSetAutoShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetAutoShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetAutoShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetAutoShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetAutoShare.Merge(m, src)
}
func (m *PushSetAutoShare) XXX_Size() int {
	return m.Size()
}
func (m *PushSetAutoShare) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetAutoShare.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetAutoShare proto.InternalMessageInfo

type PushSetAutoShare_Request struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *PushSetAutoShare_Request) Reset()         { *m = PushSetAutoShare_Request{} }
func (m *PushSetAutoShare_Request) String() string { return proto.CompactTextString(m) }
func (*PushSetAutoShare_Request) ProtoMessage()    {}
func (*PushSetAutoShare_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{59, 0}
}
func (m *PushSetAutoShare_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetAutoShare_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetAutoShare_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetAutoShare_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetAutoShare_Request.Merge(m, src)
}
func (m *PushSetAutoShare_Request) XXX_Size() int {
	return m.Size()
}
func (m *PushSetAutoShare_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetAutoShare_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetAutoShare_Request proto.InternalMessageInfo

func (m *PushSetAutoShare_Request) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type PushSetAutoShare_Reply struct {
}

func (m *PushSetAutoShare_Reply) Reset()         { *m = PushSetAutoShare_Reply{} }
func (m *PushSetAutoShare_Reply) String() string { return proto.CompactTextString(m) }
func (*PushSetAutoShare_Reply) ProtoMessage()    {}
func (*PushSetAutoShare_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{59, 1}
}
func (m *PushSetAutoShare_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetAutoShare_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetAutoShare_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetAutoShare_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetAutoShare_Reply.Merge(m, src)
}
func (m *PushSetAutoShare_Reply) XXX_Size() int {
	return m.Size()
}
func (m *PushSetAutoShare_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetAutoShare_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetAutoShare_Reply proto.InternalMessageInfo

type PushReceivedData struct {
	ProtocolData      *protocoltypes.OutOfStoreReceive_Reply `protobuf:"bytes,1,opt,name=protocol_data,json=protocolData,proto3" json:"protocol_data,omitempty"`
	Interaction       *Interaction                           `protobuf:"bytes,2,opt,name=interaction,proto3" json:"interaction,omitempty"`
	AlreadyReceived   bool                                   `protobuf:"varint,3,opt,name=already_received,json=alreadyReceived,proto3" json:"already_received,omitempty"`
	AccountMuted      bool                                   `protobuf:"varint,4,opt,name=account_muted,json=accountMuted,proto3" json:"account_muted,omitempty"`
	ConversationMuted bool                                   `protobuf:"varint,5,opt,name=conversation_muted,json=conversationMuted,proto3" json:"conversation_muted,omitempty"`
	HidePreview       bool                                   `protobuf:"varint,6,opt,name=hide_preview,json=hidePreview,proto3" json:"hide_preview,omitempty"`
}

func (m *PushReceivedData) Reset()         { *m = PushReceivedData{} }
func (m *PushReceivedData) String() string { return proto.CompactTextString(m) }
func (*PushReceivedData) ProtoMessage()    {}
func (*PushReceivedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{60}
}
func (m *PushReceivedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushReceivedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushReceivedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushReceivedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReceivedData.Merge(m, src)
}
func (m *PushReceivedData) XXX_Size() int {
	return m.Size()
}
func (m *PushReceivedData) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReceivedData.DiscardUnknown(m)
}

var xxx_messageInfo_PushReceivedData proto.InternalMessageInfo

func (m *PushReceivedData) GetProtocolData() *protocoltypes.OutOfStoreReceive_Reply {
	if m != nil {
		return m.ProtocolData
	}
	return nil
}

func (m *PushReceivedData) GetInteraction() *Interaction {
	if m != nil {
		return m.Interaction
	}
	return nil
}

func (m *PushReceivedData) GetAlreadyReceived() bool {
	if m != nil {
		return m.AlreadyReceived
	}
	return false
}

func (m *PushReceivedData) GetAccountMuted() bool {
	if m != nil {
		return m.AccountMuted
	}
	return false
}

func (m *PushReceivedData) GetConversationMuted() bool {
	if m != nil {
		return m.ConversationMuted
	}
	return false
}

func (m *PushReceivedData) GetHidePreview() bool {
	if m != nil {
		return m.HidePreview
	}
	return false
}

type PushReceive struct {
}

func (m *PushReceive) Reset()         { *m = PushReceive{} }
func (m *PushReceive) String() string { return proto.CompactTextString(m) }
func (*PushReceive) ProtoMessage()    {}
func (*PushReceive) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{61}
}
func (m *PushReceive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushReceive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushReceive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushReceive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReceive.Merge(m, src)
}
func (m *PushReceive) XXX_Size() int {
	return m.Size()
}
func (m *PushReceive) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReceive.DiscardUnknown(m)
}

var xxx_messageInfo_PushReceive proto.InternalMessageInfo

type PushReceive_Request struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PushReceive_Request) Reset()         { *m = PushReceive_Request{} }
func (m *PushReceive_Request) String() string { return proto.CompactTextString(m) }
func (*PushReceive_Request) ProtoMessage()    {}
func (*PushReceive_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{61, 0}
}
func (m *PushReceive_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushReceive_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushReceive_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushReceive_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReceive_Request.Merge(m, src)
}
func (m *PushReceive_Request) XXX_Size() int {
	return m.Size()
}
func (m *PushReceive_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReceive_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PushReceive_Request proto.InternalMessageInfo

func (m *PushReceive_Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PushReceive_Reply struct {
	Data *PushReceivedData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PushReceive_Reply) Reset()         { *m = PushReceive_Reply{} }
func (m *PushReceive_Reply) String() string { return proto.CompactTextString(m) }
func (*PushReceive_Reply) ProtoMessage()    {}
func (*PushReceive_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{61, 1}
}
func (m *PushReceive_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushReceive_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushReceive_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushReceive_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReceive_Reply.Merge(m, src)
}
func (m *PushReceive_Reply) XXX_Size() int {
	return m.Size()
}
func (m *PushReceive_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReceive_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PushReceive_Reply proto.InternalMessageInfo

func (m *PushReceive_Reply) GetData() *PushReceivedData {
	if m != nil {
		return m.Data
	}
	return nil
}

type ListMemberDevices struct {
}

func (m *ListMemberDevices) Reset()         { *m = ListMemberDevices{} }
func (m *ListMemberDevices) String() string { return proto.CompactTextString(m) }
func (*ListMemberDevices) ProtoMessage()    {}
func (*ListMemberDevices) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{62}
}
func (m *ListMemberDevices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMemberDevices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMemberDevices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMemberDevices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMemberDevices.Merge(m, src)
}
func (m *ListMemberDevices) XXX_Size() int {
	return m.Size()
}
func (m *ListMemberDevices) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMemberDevices.DiscardUnknown(m)
}

var xxx_messageInfo_ListMemberDevices proto.InternalMessageInfo

type ListMemberDevices_Request struct {
	ConversationPK string `protobuf:"bytes,1,opt,name=conversation_pk,json=conversationPk,proto3" json:"conversation_pk,omitempty"`
	MemberPK       string `protobuf:"bytes,2,opt,name=member_pk,json=memberPk,proto3" json:"member_pk,omitempty"`
}

func (m *ListMemberDevices_Request) Reset()         { *m = ListMemberDevices_Request{} }
func (m *ListMemberDevices_Request) String() string { return proto.CompactTextString(m) }
func (*ListMemberDevices_Request) ProtoMessage()    {}
func (*ListMemberDevices_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{62, 0}
}
func (m *ListMemberDevices_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMemberDevices_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMemberDevices_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMemberDevices_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMemberDevices_Request.Merge(m, src)
}
func (m *ListMemberDevices_Request) XXX_Size() int {
	return m.Size()
}
func (m *ListMemberDevices_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMemberDevices_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ListMemberDevices_Request proto.InternalMessageInfo

func (m *ListMemberDevices_Request) GetConversationPK() string {
	if m != nil {
		return m.ConversationPK
	}
	return ""
}

func (m *ListMemberDevices_Request) GetMemberPK() string {
	if m != nil {
		return m.MemberPK
	}
	return ""
}

type ListMemberDevices_Reply struct {
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *ListMemberDevices_Reply) Reset()         { *m = ListMemberDevices_Reply{} }
func (m *ListMemberDevices_Reply) String() string { return proto.CompactTextString(m) }
func (*ListMemberDevices_Reply) ProtoMessage()    {}
func (*ListMemberDevices_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{62, 1}
}
func (m *ListMemberDevices_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMemberDevices_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMemberDevices_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMemberDevices_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMemberDevices_Reply.Merge(m, src)
}
func (m *ListMemberDevices_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ListMemberDevices_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMemberDevices_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ListMemberDevices_Reply proto.InternalMessageInfo

func (m *ListMemberDevices_Reply) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type PushShareTokenForConversation struct {
}

func (m *PushShareTokenForConversation) Reset()         { *m = PushShareTokenForConversation{} }
func (m *PushShareTokenForConversation) String() string { return proto.CompactTextString(m) }
func (*PushShareTokenForConversation) ProtoMessage()    {}
func (*PushShareTokenForConversation) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{63}
}
func (m *PushShareTokenForConversation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushShareTokenForConversation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushShareTokenForConversation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushShareTokenForConversation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushShareTokenForConversation.Merge(m, src)
}
func (m *PushShareTokenForConversation) XXX_Size() int {
	return m.Size()
}
func (m *PushShareTokenForConversation) XXX_DiscardUnknown() {
	xxx_messageInfo_PushShareTokenForConversation.DiscardUnknown(m)
}

var xxx_messageInfo_PushShareTokenForConversation proto.InternalMessageInfo

type PushShareTokenForConversation_Request struct {
	ConversationPK string `protobuf:"bytes,1,opt,name=conversation_pk,json=conversationPk,proto3" json:"conversation_pk,omitempty"`
}

func (m *PushShareTokenForConversation_Request) Reset()         { *m = PushShareTokenForConversation_Request{} }
func (m *PushShareTokenForConversation_Request) String() string { return proto.CompactTextString(m) }
func (*PushShareTokenForConversation_Request) ProtoMessage()    {}
func (*PushShareTokenForConversation_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{63, 0}
}
func (m *PushShareTokenForConversation_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushShareTokenForConversation_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushShareTokenForConversation_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushShareTokenForConversation_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushShareTokenForConversation_Request.Merge(m, src)
}
func (m *PushShareTokenForConversation_Request) XXX_Size() int {
	return m.Size()
}
func (m *PushShareTokenForConversation_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PushShareTokenForConversation_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PushShareTokenForConversation_Request proto.InternalMessageInfo

func (m *PushShareTokenForConversation_Request) GetConversationPK() string {
	if m != nil {
		return m.ConversationPK
	}
	return ""
}

type PushShareTokenForConversation_Reply struct {
}

func (m *PushShareTokenForConversation_Reply) Reset()         { *m = PushShareTokenForConversation_Reply{} }
func (m *PushShareTokenForConversation_Reply) String() string { return proto.CompactTextString(m) }
func (*PushShareTokenForConversation_Reply) ProtoMessage()    {}
func (*PushShareTokenForConversation_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{63, 1}
}
func (m *PushShareTokenForConversation_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushShareTokenForConversation_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushShareTokenForConversation_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushShareTokenForConversation_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushShareTokenForConversation_Reply.Merge(m, src)
}
func (m *PushShareTokenForConversation_Reply) XXX_Size() int {
	return m.Size()
}
func (m *PushShareTokenForConversation_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushShareTokenForConversation_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PushShareTokenForConversation_Reply proto.InternalMessageInfo

type PushTokenSharedForConversation struct {
}

func (m *PushTokenSharedForConversation) Reset()         { *m = PushTokenSharedForConversation{} }
func (m *PushTokenSharedForConversation) String() string { return proto.CompactTextString(m) }
func (*PushTokenSharedForConversation) ProtoMessage()    {}
func (*PushTokenSharedForConversation) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{64}
}
func (m *PushTokenSharedForConversation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushTokenSharedForConversation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushTokenSharedForConversation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushTokenSharedForConversation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushTokenSharedForConversation.Merge(m, src)
}
func (m *PushTokenSharedForConversation) XXX_Size() int {
	return m.Size()
}
func (m *PushTokenSharedForConversation) XXX_DiscardUnknown() {
	xxx_messageInfo_PushTokenSharedForConversation.DiscardUnknown(m)
}

var xxx_messageInfo_PushTokenSharedForConversation proto.InternalMessageInfo

type PushTokenSharedForConversation_Request struct {
	ConversationPK string `protobuf:"bytes,1,opt,name=conversation_pk,json=conversationPk,proto3" json:"conversation_pk,omitempty"`
}

func (m *PushTokenSharedForConversation_Request) Reset() {
	*m = PushTokenSharedForConversation_Request{}
}
func (m *PushTokenSharedForConversation_Request) String() string { return proto.CompactTextString(m) }
func (*PushTokenSharedForConversation_Request) ProtoMessage()    {}
func (*PushTokenSharedForConversation_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{64, 0}
}
func (m *PushTokenSharedForConversation_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushTokenSharedForConversation_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushTokenSharedForConversation_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushTokenSharedForConversation_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushTokenSharedForConversation_Request.Merge(m, src)
}
func (m *PushTokenSharedForConversation_Request) XXX_Size() int {
	return m.Size()
}
func (m *PushTokenSharedForConversation_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PushTokenSharedForConversation_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PushTokenSharedForConversation_Request proto.InternalMessageInfo

func (m *PushTokenSharedForConversation_Request) GetConversationPK() string {
	if m != nil {
		return m.ConversationPK
	}
	return ""
}

type PushTokenSharedForConversation_Reply struct {
	Token *PushMemberToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *PushTokenSharedForConversation_Reply) Reset()         { *m = PushTokenSharedForConversation_Reply{} }
func (m *PushTokenSharedForConversation_Reply) String() string { return proto.CompactTextString(m) }
func (*PushTokenSharedForConversation_Reply) ProtoMessage()    {}
func (*PushTokenSharedForConversation_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{64, 1}
}
func (m *PushTokenSharedForConversation_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushTokenSharedForConversation_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushTokenSharedForConversation_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushTokenSharedForConversation_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushTokenSharedForConversation_Reply.Merge(m, src)
}
func (m *PushTokenSharedForConversation_Reply) XXX_Size() int {
	return m.Size()
}
func (m *PushTokenSharedForConversation_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushTokenSharedForConversation_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PushTokenSharedForConversation_Reply proto.InternalMessageInfo

func (m *PushTokenSharedForConversation_Reply) GetToken() *PushMemberToken {
	if m != nil {
		return m.Token
	}
	return nil
}

type DirectoryServiceRegister struct {
}

func (m *DirectoryServiceRegister) Reset()         { *m = DirectoryServiceRegister{} }
func (m *DirectoryServiceRegister) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceRegister) ProtoMessage()    {}
func (*DirectoryServiceRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{65}
}
func (m *DirectoryServiceRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceRegister.Merge(m, src)
}
func (m *DirectoryServiceRegister) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceRegister.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceRegister proto.InternalMessageInfo

type DirectoryServiceRegister_Request struct {
	Identifier     string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ProofIssuer    string `protobuf:"bytes,2,opt,name=proof_issuer,json=proofIssuer,proto3" json:"proof_issuer,omitempty"`
	ServerAddr     string `protobuf:"bytes,3,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	ExpirationDate int64  `protobuf:"varint,4,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (m *DirectoryServiceRegister_Request) Reset()         { *m = DirectoryServiceRegister_Request{} }
func (m *DirectoryServiceRegister_Request) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceRegister_Request) ProtoMessage()    {}
func (*DirectoryServiceRegister_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{65, 0}
}
func (m *DirectoryServiceRegister_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceRegister_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceRegister_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceRegister_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceRegister_Request.Merge(m, src)
}
func (m *DirectoryServiceRegister_Request) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceRegister_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceRegister_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceRegister_Request proto.InternalMessageInfo

func (m *DirectoryServiceRegister_Request) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *DirectoryServiceRegister_Request) GetProofIssuer() string {
	if m != nil {
		return m.ProofIssuer
	}
	return ""
}

func (m *DirectoryServiceRegister_Request) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *DirectoryServiceRegister_Request) GetExpirationDate() int64 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

type DirectoryServiceRegister_Reply struct {
	DirectoryRecordToken string `protobuf:"bytes,1,opt,name=directory_record_token,json=directoryRecordToken,proto3" json:"directory_record_token,omitempty"`
}

func (m *DirectoryServiceRegister_Reply) Reset()         { *m = DirectoryServiceRegister_Reply{} }
func (m *DirectoryServiceRegister_Reply) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceRegister_Reply) ProtoMessage()    {}
func (*DirectoryServiceRegister_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{65, 1}
}
func (m *DirectoryServiceRegister_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceRegister_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceRegister_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceRegister_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceRegister_Reply.Merge(m, src)
}
func (m *DirectoryServiceRegister_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceRegister_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceRegister_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceRegister_Reply proto.InternalMessageInfo

func (m *DirectoryServiceRegister_Reply) GetDirectoryRecordToken() string {
	if m != nil {
		return m.DirectoryRecordToken
	}
	return ""
}

type DirectoryServiceUnregister struct {
}

func (m *DirectoryServiceUnregister) Reset()         { *m = DirectoryServiceUnregister{} }
func (m *DirectoryServiceUnregister) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceUnregister) ProtoMessage()    {}
func (*DirectoryServiceUnregister) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{66}
}
func (m *DirectoryServiceUnregister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceUnregister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceUnregister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceUnregister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceUnregister.Merge(m, src)
}
func (m *DirectoryServiceUnregister) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceUnregister) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceUnregister.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceUnregister proto.InternalMessageInfo

type DirectoryServiceUnregister_Request struct {
	ServerAddr           string `protobuf:"bytes,1,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	DirectoryRecordToken string `protobuf:"bytes,2,opt,name=directory_record_token,json=directoryRecordToken,proto3" json:"directory_record_token,omitempty"`
}

func (m *DirectoryServiceUnregister_Request) Reset()         { *m = DirectoryServiceUnregister_Request{} }
func (m *DirectoryServiceUnregister_Request) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceUnregister_Request) ProtoMessage()    {}
func (*DirectoryServiceUnregister_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{66, 0}
}
func (m *DirectoryServiceUnregister_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceUnregister_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceUnregister_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceUnregister_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceUnregister_Request.Merge(m, src)
}
func (m *DirectoryServiceUnregister_Request) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceUnregister_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceUnregister_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceUnregister_Request proto.InternalMessageInfo

func (m *DirectoryServiceUnregister_Request) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *DirectoryServiceUnregister_Request) GetDirectoryRecordToken() string {
	if m != nil {
		return m.DirectoryRecordToken
	}
	return ""
}

type DirectoryServiceUnregister_Reply struct {
}

func (m *DirectoryServiceUnregister_Reply) Reset()         { *m = DirectoryServiceUnregister_Reply{} }
func (m *DirectoryServiceUnregister_Reply) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceUnregister_Reply) ProtoMessage()    {}
func (*DirectoryServiceUnregister_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{66, 1}
}
func (m *DirectoryServiceUnregister_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceUnregister_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceUnregister_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceUnregister_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceUnregister_Reply.Merge(m, src)
}
func (m *DirectoryServiceUnregister_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceUnregister_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceUnregister_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceUnregister_Reply proto.InternalMessageInfo

type DirectoryServiceQuery struct {
}

func (m *DirectoryServiceQuery) Reset()         { *m = DirectoryServiceQuery{} }
func (m *DirectoryServiceQuery) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceQuery) ProtoMessage()    {}
func (*DirectoryServiceQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{67}
}
func (m *DirectoryServiceQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceQuery.Merge(m, src)
}
func (m *DirectoryServiceQuery) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceQuery proto.InternalMessageInfo

type DirectoryServiceQuery_Request struct {
	ServerAddr  string   `protobuf:"bytes,1,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	Identifiers []string `protobuf:"bytes,2,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
}

func (m *DirectoryServiceQuery_Request) Reset()         { *m = DirectoryServiceQuery_Request{} }
func (m *DirectoryServiceQuery_Request) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceQuery_Request) ProtoMessage()    {}
func (*DirectoryServiceQuery_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{67, 0}
}
func (m *DirectoryServiceQuery_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceQuery_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceQuery_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceQuery_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceQuery_Request.Merge(m, src)
}
func (m *DirectoryServiceQuery_Request) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceQuery_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceQuery_Request.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceQuery_Request proto.InternalMessageInfo

func (m *DirectoryServiceQuery_Request) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *DirectoryServiceQuery_Request) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

type DirectoryServiceQuery_Reply struct {
	DirectoryIdentifier string `protobuf:"bytes,1,opt,name=directory_identifier,json=directoryIdentifier,proto3" json:"directory_identifier,omitempty"`
	ExpiresAt           int64  `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	AccountURI          string `protobuf:"bytes,3,opt,name=account_uri,json=accountUri,proto3" json:"account_uri,omitempty"`
	VerifiedCredential  []byte `protobuf:"bytes,4,opt,name=verified_credential,json=verifiedCredential,proto3" json:"verified_credential,omitempty"`
}

func (m *DirectoryServiceQuery_Reply) Reset()         { *m = DirectoryServiceQuery_Reply{} }
func (m *DirectoryServiceQuery_Reply) String() string { return proto.CompactTextString(m) }
func (*DirectoryServiceQuery_Reply) ProtoMessage()    {}
func (*DirectoryServiceQuery_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{67, 1}
}
func (m *DirectoryServiceQuery_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryServiceQuery_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryServiceQuery_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryServiceQuery_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryServiceQuery_Reply.Merge(m, src)
}
func (m *DirectoryServiceQuery_Reply) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryServiceQuery_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryServiceQuery_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryServiceQuery_Reply proto.InternalMessageInfo

func (m *DirectoryServiceQuery_Reply) GetDirectoryIdentifier() string {
	if m != nil {
		return m.DirectoryIdentifier
	}
	return ""
}

func (m *DirectoryServiceQuery_Reply) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *DirectoryServiceQuery_Reply) GetAccountURI() string {
	if m != nil {
		return m.AccountURI
	}
	return ""
}

func (m *DirectoryServiceQuery_Reply) GetVerifiedCredential() []byte {
	if m != nil {
		return m.VerifiedCredential
	}
	return nil
}

type PushServer struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PushServer) Reset()         { *m = PushServer{} }
func (m *PushServer) String() string { return proto.CompactTextString(m) }
func (*PushServer) ProtoMessage()    {}
func (*PushServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{68}
}
func (m *PushServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushServer.Merge(m, src)
}
func (m *PushServer) XXX_Size() int {
	return m.Size()
}
func (m *PushServer) XXX_DiscardUnknown() {
	xxx_messageInfo_PushServer.DiscardUnknown(m)
}

var xxx_messageInfo_PushServer proto.InternalMessageInfo

func (m *PushServer) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *PushServer) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type PushLocalDeviceSharedToken struct {
	TokenID string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty" gorm:"primaryKey"`
	// group_pk is the public key of the group for whom the token is for
	ConversationPublicKey string `protobuf:"bytes,2,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty"`
}

func (m *PushLocalDeviceSharedToken) Reset()         { *m = PushLocalDeviceSharedToken{} }
func (m *PushLocalDeviceSharedToken) String() string { return proto.CompactTextString(m) }
func (*PushLocalDeviceSharedToken) ProtoMessage()    {}
func (*PushLocalDeviceSharedToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{69}
}
func (m *PushLocalDeviceSharedToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushLocalDeviceSharedToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushLocalDeviceSharedToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushLocalDeviceSharedToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushLocalDeviceSharedToken.Merge(m, src)
}
func (m *PushLocalDeviceSharedToken) XXX_Size() int {
	return m.Size()
}
func (m *PushLocalDeviceSharedToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PushLocalDeviceSharedToken.DiscardUnknown(m)
}

var xxx_messageInfo_PushLocalDeviceSharedToken proto.InternalMessageInfo

func (m *PushLocalDeviceSharedToken) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

func (m *PushLocalDeviceSharedToken) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

type PushMemberToken struct {
	// token_id is the id of the token
	TokenID string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty" gorm:"primaryKey"`
	// group_pk is the public key of the group for whom the token is for
	ConversationPublicKey string `protobuf:"bytes,2,opt,name=conversation_public_key,json=conversationPublicKey,proto3" json:"conversation_public_key,omitempty"`
	// device_pk is the public key of the device sending the message
	DevicePK string `protobuf:"bytes,3,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// server_addr is the push server address
	ServerAddr string `protobuf:"bytes,4,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	// server_key is the push server public key
	ServerKey []byte `protobuf:"bytes,5,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	// token is the sealed token of the device
	Token []byte `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *PushMemberToken) Reset()         { *m = PushMemberToken{} }
func (m *PushMemberToken) String() string { return proto.CompactTextString(m) }
func (*PushMemberToken) ProtoMessage()    {}
func (*PushMemberToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{70}
}
func (m *PushMemberToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushMemberToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushMemberToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushMemberToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMemberToken.Merge(m, src)
}
func (m *PushMemberToken) XXX_Size() int {
	return m.Size()
}
func (m *PushMemberToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMemberToken.DiscardUnknown(m)
}

var xxx_messageInfo_PushMemberToken proto.InternalMessageInfo

func (m *PushMemberToken) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

func (m *PushMemberToken) GetConversationPublicKey() string {
	if m != nil {
		return m.ConversationPublicKey
	}
	return ""
}

func (m *PushMemberToken) GetDevicePK() string {
	if m != nil {
		return m.DevicePK
	}
	return ""
}

func (m *PushMemberToken) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *PushMemberToken) GetServerKey() []byte {
	if m != nil {
		return m.ServerKey
	}
	return nil
}

func (m *PushMemberToken) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type PushMemberTokenUpdate struct {
	// device_pk is the public key of the device sending the message
	DevicePK string `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	// server is the push server to use
	Server *PushServer `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	// token is the sealed token of the device
	Token []byte `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *PushMemberTokenUpdate) Reset()         { *m = PushMemberTokenUpdate{} }
func (m *PushMemberTokenUpdate) String() string { return proto.CompactTextString(m) }
func (*PushMemberTokenUpdate) ProtoMessage()    {}
func (*PushMemberTokenUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{71}
}
func (m *PushMemberTokenUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushMemberTokenUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushMemberTokenUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushMemberTokenUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMemberTokenUpdate.Merge(m, src)
}
func (m *PushMemberTokenUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PushMemberTokenUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMemberTokenUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PushMemberTokenUpdate proto.InternalMessageInfo

func (m *PushMemberTokenUpdate) GetDevicePK() string {
	if m != nil {
		return m.DevicePK
	}
	return ""
}

func (m *PushMemberTokenUpdate) GetServer() *PushServer {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *PushMemberTokenUpdate) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type MemberWithDevices struct {
	MemberPK  string   `protobuf:"bytes,1,opt,name=member_pk,json=memberPk,proto3" json:"member_pk,omitempty"`
	DevicePKs []string `protobuf:"bytes,2,rep,name=devices_pks,json=devicesPks,proto3" json:"devices_pks,omitempty"`
}

func (m *MemberWithDevices) Reset()         { *m = MemberWithDevices{} }
func (m *MemberWithDevices) String() string { return proto.CompactTextString(m) }
func (*MemberWithDevices) ProtoMessage()    {}
func (*MemberWithDevices) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{72}
}
func (m *MemberWithDevices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberWithDevices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberWithDevices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberWithDevices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberWithDevices.Merge(m, src)
}
func (m *MemberWithDevices) XXX_Size() int {
	return m.Size()
}
func (m *MemberWithDevices) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberWithDevices.DiscardUnknown(m)
}

var xxx_messageInfo_MemberWithDevices proto.InternalMessageInfo

func (m *MemberWithDevices) GetMemberPK() string {
	if m != nil {
		return m.MemberPK
	}
	return ""
}

func (m *MemberWithDevices) GetDevicePKs() []string {
	if m != nil {
		return m.DevicePKs
	}
	return nil
}

type PushSend struct {
}

func (m *PushSend) Reset()         { *m = PushSend{} }
func (m *PushSend) String() string { return proto.CompactTextString(m) }
func (*PushSend) ProtoMessage()    {}
func (*PushSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{73}
}
func (m *PushSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSend.Merge(m, src)
}
func (m *PushSend) XXX_Size() int {
	return m.Size()
}
func (m *PushSend) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSend.DiscardUnknown(m)
}

var xxx_messageInfo_PushSend proto.InternalMessageInfo

type PushSend_Request struct {
	CID          []byte               `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	GroupPK      string               `protobuf:"bytes,2,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	GroupMembers []*MemberWithDevices `protobuf:"bytes,3,rep,name=group_members,json=groupMembers,proto3" json:"group_members,omitempty"`
}

func (m *PushSend_Request) Reset()         { *m = PushSend_Request{} }
func (m *PushSend_Request) String() string { return proto.CompactTextString(m) }
func (*PushSend_Request) ProtoMessage()    {}
func (*PushSend_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{73, 0}
}
func (m *PushSend_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSend_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSend_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSend_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSend_Request.Merge(m, src)
}
func (m *PushSend_Request) XXX_Size() int {
	return m.Size()
}
func (m *PushSend_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSend_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PushSend_Request proto.InternalMessageInfo

func (m *PushSend_Request) GetCID() []byte {
	if m != nil {
		return m.CID
	}
	return nil
}

func (m *PushSend_Request) GetGroupPK() string {
	if m != nil {
		return m.GroupPK
	}
	return ""
}

func (m *PushSend_Request) GetGroupMembers() []*MemberWithDevices {
	if m != nil {
		return m.GroupMembers
	}
	return nil
}

type PushSend_Reply struct {
	GroupMembers []*MemberWithDevices `protobuf:"bytes,1,rep,name=group_members,json=groupMembers,proto3" json:"group_members,omitempty"`
}

func (m *PushSend_Reply) Reset()         { *m = PushSend_Reply{} }
func (m *PushSend_Reply) String() string { return proto.CompactTextString(m) }
func (*PushSend_Reply) ProtoMessage()    {}
func (*PushSend_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{73, 1}
}
func (m *PushSend_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSend_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSend_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSend_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSend_Reply.Merge(m, src)
}
func (m *PushSend_Reply) XXX_Size() int {
	return m.Size()
}
func (m *PushSend_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSend_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PushSend_Reply proto.InternalMessageInfo

func (m *PushSend_Reply) GetGroupMembers() []*MemberWithDevices {
	if m != nil {
		return m.GroupMembers
	}
	return nil
}

type PushShareToken struct {
}

func (m *PushShareToken) Reset()         { *m = PushShareToken{} }
func (m *PushShareToken) String() string { return proto.CompactTextString(m) }
func (*PushShareToken) ProtoMessage()    {}
func (*PushShareToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{74}
}
func (m *PushShareToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushShareToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushShareToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushShareToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushShareToken.Merge(m, src)
}
func (m *PushShareToken) XXX_Size() int {
	return m.Size()
}
func (m *PushShareToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PushShareToken.DiscardUnknown(m)
}

var xxx_messageInfo_PushShareToken proto.InternalMessageInfo

type PushShareToken_Request struct {
	DevicePK string                         `protobuf:"bytes,1,opt,name=device_pk,json=devicePk,proto3" json:"device_pk,omitempty"`
	GroupPK  string                         `protobuf:"bytes,2,opt,name=group_pk,json=groupPk,proto3" json:"group_pk,omitempty"`
	Server   *PushServer                    `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	Receiver *pushtypes.PushServiceReceiver `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *PushShareToken_Request) Reset()         { *m = PushShareToken_Request{} }
func (m *PushShareToken_Request) String() string { return proto.CompactTextString(m) }
func (*PushShareToken_Request) ProtoMessage()    {}
func (*PushShareToken_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{74, 0}
}
func (m *PushShareToken_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushShareToken_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushShareToken_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushShareToken_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushShareToken_Request.Merge(m, src)
}
func (m *PushShareToken_Request) XXX_Size() int {
	return m.Size()
}
func (m *PushShareToken_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PushShareToken_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PushShareToken_Request proto.InternalMessageInfo

func (m *PushShareToken_Request) GetDevicePK() string {
	if m != nil {
		return m.DevicePK
	}
	return ""
}

func (m *PushShareToken_Request) GetGroupPK() string {
	if m != nil {
		return m.GroupPK
	}
	return ""
}

func (m *PushShareToken_Request) GetServer() *PushServer {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *PushShareToken_Request) GetReceiver() *pushtypes.PushServiceReceiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

type PushShareToken_Reply struct {
}

func (m *PushShareToken_Reply) Reset()         { *m = PushShareToken_Reply{} }
func (m *PushShareToken_Reply) String() string { return proto.CompactTextString(m) }
func (*PushShareToken_Reply) ProtoMessage()    {}
func (*PushShareToken_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{74, 1}
}
func (m *PushShareToken_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushShareToken_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushShareToken_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushShareToken_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushShareToken_Reply.Merge(m, src)
}
func (m *PushShareToken_Reply) XXX_Size() int {
	return m.Size()
}
func (m *PushShareToken_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushShareToken_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PushShareToken_Reply proto.InternalMessageInfo

type PushSetServer struct {
}

func (m *PushSetServer) Reset()         { *m = PushSetServer{} }
func (m *PushSetServer) String() string { return proto.CompactTextString(m) }
func (*PushSetServer) ProtoMessage()    {}
func (*PushSetServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{75}
}
func (m *PushSetServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetServer.Merge(m, src)
}
func (m *PushSetServer) XXX_Size() int {
	return m.Size()
}
func (m *PushSetServer) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetServer.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetServer proto.InternalMessageInfo

type PushSetServer_Request struct {
	Server *PushServer `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (m *PushSetServer_Request) Reset()         { *m = PushSetServer_Request{} }
func (m *PushSetServer_Request) String() string { return proto.CompactTextString(m) }
func (*PushSetServer_Request) ProtoMessage()    {}
func (*PushSetServer_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{75, 0}
}
func (m *PushSetServer_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetServer_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetServer_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetServer_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetServer_Request.Merge(m, src)
}
func (m *PushSetServer_Request) XXX_Size() int {
	return m.Size()
}
func (m *PushSetServer_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetServer_Request.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetServer_Request proto.InternalMessageInfo

func (m *PushSetServer_Request) GetServer() *PushServer {
	if m != nil {
		return m.Server
	}
	return nil
}

type PushSetServer_Reply struct {
}

func (m *PushSetServer_Reply) Reset()         { *m = PushSetServer_Reply{} }
func (m *PushSetServer_Reply) String() string { return proto.CompactTextString(m) }
func (*PushSetServer_Reply) ProtoMessage()    {}
func (*PushSetServer_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{75, 1}
}
func (m *PushSetServer_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushSetServer_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushSetServer_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushSetServer_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushSetServer_Reply.Merge(m, src)
}
func (m *PushSetServer_Reply) XXX_Size() int {
	return m.Size()
}
func (m *PushSetServer_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushSetServer_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PushSetServer_Reply proto.InternalMessageInfo

type AuthExchangeResponse struct {
	AccessToken      string            `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Scope            string            `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Error            string            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	ErrorDescription string            `protobuf:"bytes,4,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	Services         map[string]string `protobuf:"bytes,5,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AuthExchangeResponse) Reset()         { *m = AuthExchangeResponse{} }
func (m *AuthExchangeResponse) String() string { return proto.CompactTextString(m) }
func (*AuthExchangeResponse) ProtoMessage()    {}
func (*AuthExchangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{76}
}
func (m *AuthExchangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthExchangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthExchangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthExchangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthExchangeResponse.Merge(m, src)
}
func (m *AuthExchangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthExchangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthExchangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthExchangeResponse proto.InternalMessageInfo

func (m *AuthExchangeResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AuthExchangeResponse) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *AuthExchangeResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *AuthExchangeResponse) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *AuthExchangeResponse) GetServices() map[string]string {
	if m != nil {
		return m.Services
	}
	return nil
}

type ServicesTokenCode struct {
	Services      []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	CodeChallenge string   `protobuf:"bytes,2,opt,name=code_challenge,json=codeChallenge,proto3" json:"code_challenge,omitempty"`
	TokenID       string   `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *ServicesTokenCode) Reset()         { *m = ServicesTokenCode{} }
func (m *ServicesTokenCode) String() string { return proto.CompactTextString(m) }
func (*ServicesTokenCode) ProtoMessage()    {}
func (*ServicesTokenCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_971ac7a2ed22f21d, []int{77}
}
func (m *ServicesTokenCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesTokenCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesTokenCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesTokenCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesTokenCode.Merge(m, src)
}
func (m *ServicesTokenCode) XXX_Size() int {
	return m.Size()
}
func (m *ServicesTokenCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesTokenCode.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesTokenCode proto.InternalMessageInfo

func (m *ServicesTokenCode) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *ServicesTokenCode) GetCodeChallenge() string {
	if m != nil {
		return m.CodeChallenge
	}
	return ""
}

func (m *ServicesTokenCode) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

func init() {
	proto.RegisterEnum("berty.messenger.v1.BertyLink_Kind", BertyLink_Kind_name, BertyLink_Kind_value)
	proto.RegisterEnum("berty.messenger.v1.AppMessage_Type", AppMessage_Type_name, AppMessage_Type_value)
	proto.RegisterEnum("berty.messenger.v1.Contact_State", Contact_State_name, Contact_State_value)
	proto.RegisterEnum("berty.messenger.v1.Conversation_Type", Conversation_Type_name, Conversation_Type_value)
	proto.RegisterEnum("berty.messenger.v1.StreamEvent_Type", StreamEvent_Type_name, StreamEvent_Type_value)
	proto.RegisterEnum("berty.messenger.v1.StreamEvent_Notified_Type", StreamEvent_Notified_Type_name, StreamEvent_Notified_Type_value)
	proto.RegisterEnum("berty.messenger.v1.StreamEvent_PeerStatusConnected_Transport", StreamEvent_PeerStatusConnected_Transport_name, StreamEvent_PeerStatusConnected_Transport_value)
	proto.RegisterType((*PaginatedInteractionsOptions)(nil), "berty.messenger.v1.PaginatedInteractionsOptions")
	proto.RegisterType((*ConversationOpen)(nil), "berty.messenger.v1.ConversationOpen")
	proto.RegisterType((*ConversationOpen_Request)(nil), "berty.messenger.v1.ConversationOpen.Request")
	proto.RegisterType((*ConversationOpen_Reply)(nil), "berty.messenger.v1.ConversationOpen.Reply")
	proto.RegisterType((*ConversationClose)(nil), "berty.messenger.v1.ConversationClose")
	proto.RegisterType((*ConversationClose_Request)(nil), "berty.messenger.v1.ConversationClose.Request")
	proto.RegisterType((*ConversationClose_Reply)(nil), "berty.messenger.v1.ConversationClose.Reply")
	proto.RegisterType((*ConversationLoad)(nil), "berty.messenger.v1.ConversationLoad")
	proto.RegisterType((*ConversationLoad_Request)(nil), "berty.messenger.v1.ConversationLoad.Request")
	proto.RegisterType((*ConversationLoad_Reply)(nil), "berty.messenger.v1.ConversationLoad.Reply")
	proto.RegisterType((*ConversationMute)(nil), "berty.messenger.v1.ConversationMute")
	proto.RegisterType((*ConversationMute_Request)(nil), "berty.messenger.v1.ConversationMute.Request")
	proto.RegisterType((*ConversationMute_Reply)(nil), "berty.messenger.v1.ConversationMute.Reply")
	proto.RegisterType((*EchoTest)(nil), "berty.messenger.v1.EchoTest")
	proto.RegisterType((*EchoTest_Request)(nil), "berty.messenger.v1.EchoTest.Request")
	proto.RegisterType((*EchoTest_Reply)(nil), "berty.messenger.v1.EchoTest.Reply")
	proto.RegisterType((*EchoDuplexTest)(nil), "berty.messenger.v1.EchoDuplexTest")
	proto.RegisterType((*EchoDuplexTest_Request)(nil), "berty.messenger.v1.EchoDuplexTest.Request")
	proto.RegisterType((*EchoDuplexTest_Reply)(nil), "berty.messenger.v1.EchoDuplexTest.Reply")
	proto.RegisterType((*InstanceShareableBertyID)(nil), "berty.messenger.v1.InstanceShareableBertyID")
	proto.RegisterType((*InstanceShareableBertyID_Request)(nil), "berty.messenger.v1.InstanceShareableBertyID.Request")
	proto.RegisterType((*InstanceShareableBertyID_Reply)(nil), "berty.messenger.v1.InstanceShareableBertyID.Reply")
	proto.RegisterType((*ShareableBertyGroup)(nil), "berty.messenger.v1.ShareableBertyGroup")
	proto.RegisterType((*ShareableBertyGroup_Request)(nil), "berty.messenger.v1.ShareableBertyGroup.Request")
	proto.RegisterType((*ShareableBertyGroup_Reply)(nil), "berty.messenger.v1.ShareableBertyGroup.Reply")
	proto.RegisterType((*DevShareInstanceBertyID)(nil), "berty.messenger.v1.DevShareInstanceBertyID")
	proto.RegisterType((*DevShareInstanceBertyID_Request)(nil), "berty.messenger.v1.DevShareInstanceBertyID.Request")
	proto.RegisterType((*DevShareInstanceBertyID_Reply)(nil), "berty.messenger.v1.DevShareInstanceBertyID.Reply")
	proto.RegisterType((*DevStreamLogs)(nil), "berty.messenger.v1.DevStreamLogs")
	proto.RegisterType((*DevStreamLogs_Request)(nil), "berty.messenger.v1.DevStreamLogs.Request")
	proto.RegisterType((*DevStreamLogs_Reply)(nil), "berty.messenger.v1.DevStreamLogs.Reply")
	proto.RegisterType((*ParseDeepLink)(nil), "berty.messenger.v1.ParseDeepLink")
	proto.RegisterType((*ParseDeepLink_Request)(nil), "berty.messenger.v1.ParseDeepLink.Request")
	proto.RegisterType((*ParseDeepLink_Reply)(nil), "berty.messenger.v1.ParseDeepLink.Reply")
	proto.RegisterType((*BertyLink)(nil), "berty.messenger.v1.BertyLink")
	proto.RegisterType((*BertyLink_Encrypted)(nil), "berty.messenger.v1.BertyLink.Encrypted")
	proto.RegisterType((*BertyLink_BertyMessageRef)(nil), "berty.messenger.v1.BertyLink.BertyMessageRef")
	proto.RegisterType((*SendContactRequest)(nil), "berty.messenger.v1.SendContactRequest")
	proto.RegisterType((*SendContactRequest_Request)(nil), "berty.messenger.v1.SendContactRequest.Request")
	proto.RegisterType((*SendContactRequest_Reply)(nil), "berty.messenger.v1.SendContactRequest.Reply")
	proto.RegisterType((*BertyID)(nil), "berty.messenger.v1.BertyID")
	proto.RegisterType((*BertyGroup)(nil), "berty.messenger.v1.BertyGroup")
	proto.RegisterType((*AppMessage)(nil), "berty.messenger.v1.AppMessage")
	proto.RegisterType((*AppMessage_UserMessage)(nil), "berty.messenger.v1.AppMessage.UserMessage")
	proto.RegisterType((*AppMessage_GroupInvitation)(nil), "berty.messenger.v1.AppMessage.GroupInvitation")
	proto.RegisterType((*AppMessage_SetGroupInfo)(nil), "berty.messenger.v1.AppMessage.SetGroupInfo")
	proto.RegisterType((*AppMessage_SetUserInfo)(nil), "berty.messenger.v1.AppMessage.SetUserInfo")
	proto.RegisterType((*AppMessage_Acknowledge)(nil), "berty.messenger.v1.AppMessage.Acknowledge")
	proto.RegisterType((*AppMessage_AccountDirectoryServiceRegistered)(nil), "berty.messenger.v1.AppMessage.AccountDirectoryServiceRegistered")
	proto.RegisterType((*AppMessage_AccountDirectoryServiceUnregistered)(nil), "berty.messenger.v1.AppMessage.AccountDirectoryServiceUnregistered")
	proto.RegisterType((*AppMessage_ServiceAddToken)(nil), "berty.messenger.v1.AppMessage.ServiceAddToken")
	proto.RegisterType((*AppMessage_ServiceRemoveToken)(nil), "berty.messenger.v1.AppMessage.ServiceRemoveToken")
	proto.RegisterType((*AppMessage_PushSetDeviceToken)(nil), "berty.messenger.v1.AppMessage.PushSetDeviceToken")
	proto.RegisterType((*AppMessage_PushSetServer)(nil), "berty.messenger.v1.AppMessage.PushSetServer")
	proto.RegisterType((*AppMessage_PushSetMemberToken)(nil), "berty.messenger.v1.AppMessage.PushSetMemberToken")
	proto.RegisterType((*SystemInfo)(nil), "berty.messenger.v1.SystemInfo")
	proto.RegisterType((*SystemInfo_Request)(nil), "berty.messenger.v1.SystemInfo.Request")
	proto.RegisterType((*SystemInfo_Reply)(nil), "berty.messenger.v1.SystemInfo.Reply")
	proto.RegisterType((*SystemInfo_Messenger)(nil), "berty.messenger.v1.SystemInfo.Messenger")
	proto.RegisterType((*SystemInfo_DB)(nil), "berty.messenger.v1.SystemInfo.DB")
	proto.RegisterType((*ConversationJoin)(nil), "berty.messenger.v1.ConversationJoin")
	proto.RegisterType((*ConversationJoin_Request)(nil), "berty.messenger.v1.ConversationJoin.Request")
	proto.RegisterType((*ConversationJoin_Reply)(nil), "berty.messenger.v1.ConversationJoin.Reply")
	proto.RegisterType((*DebugAuthServiceSetToken)(nil), "berty.messenger.v1.DebugAuthServiceSetToken")
	proto.RegisterType((*DebugAuthServiceSetToken_Request)(nil), "berty.messenger.v1.DebugAuthServiceSetToken.Request")
	proto.RegisterType((*DebugAuthServiceSetToken_Reply)(nil), "berty.messenger.v1.DebugAuthServiceSetToken.Reply")
	proto.RegisterType((*ServicesTokenList)(nil), "berty.messenger.v1.ServicesTokenList")
	proto.RegisterType((*ServicesTokenList_Request)(nil), "berty.messenger.v1.ServicesTokenList.Request")
	proto.RegisterType((*ServicesTokenList_Reply)(nil), "berty.messenger.v1.ServicesTokenList.Reply")
	proto.RegisterType((*AuthServiceCompleteFlow)(nil), "berty.messenger.v1.AuthServiceCompleteFlow")
	proto.RegisterType((*AuthServiceCompleteFlow_Request)(nil), "berty.messenger.v1.AuthServiceCompleteFlow.Request")
	proto.RegisterType((*AuthServiceCompleteFlow_Reply)(nil), "berty.messenger.v1.AuthServiceCompleteFlow.Reply")
	proto.RegisterType((*AuthServiceInitFlow)(nil), "berty.messenger.v1.AuthServiceInitFlow")
	proto.RegisterType((*AuthServiceInitFlow_Request)(nil), "berty.messenger.v1.AuthServiceInitFlow.Request")
	proto.RegisterType((*AuthServiceInitFlow_Reply)(nil), "berty.messenger.v1.AuthServiceInitFlow.Reply")
	proto.RegisterType((*Account)(nil), "berty.messenger.v1.Account")
	proto.RegisterType((*ServiceTokenSupportedService)(nil), "berty.messenger.v1.ServiceTokenSupportedService")
	proto.RegisterType((*ServiceTokenSupportedServiceRecord)(nil), "berty.messenger.v1.ServiceTokenSupportedServiceRecord")
	proto.RegisterType((*ServiceToken)(nil), "berty.messenger.v1.ServiceToken")
	proto.RegisterType((*MetadataEvent)(nil), "berty.messenger.v1.MetadataEvent")
	proto.RegisterType((*Interaction)(nil), "berty.messenger.v1.Interaction")
	proto.RegisterType((*Contact)(nil), "berty.messenger.v1.Contact")
	proto.RegisterType((*Conversation)(nil), "berty.messenger.v1.Conversation")
	proto.RegisterType((*ConversationReplicationInfo)(nil), "berty.messenger.v1.ConversationReplicationInfo")
	proto.RegisterType((*Member)(nil), "berty.messenger.v1.Member")
	proto.RegisterType((*Device)(nil), "berty.messenger.v1.Device")
	proto.RegisterType((*AccountVerifiedCredential)(nil), "berty.messenger.v1.AccountVerifiedCredential")
	proto.RegisterType((*AccountDirectoryServiceRecord)(nil), "berty.messenger.v1.AccountDirectoryServiceRecord")
	proto.RegisterType((*PushDeviceToken)(nil), "berty.messenger.v1.PushDeviceToken")
	proto.RegisterType((*PushServerRecord)(nil), "berty.messenger.v1.PushServerRecord")
	proto.RegisterType((*ContactMetadata)(nil), "berty.messenger.v1.ContactMetadata")
	proto.RegisterType((*StreamEvent)(nil), "berty.messenger.v1.StreamEvent")
	proto.RegisterType((*StreamEvent_ConversationUpdated)(nil), "berty.messenger.v1.StreamEvent.ConversationUpdated")
	proto.RegisterType((*StreamEvent_ConversationDeleted)(nil), "berty.messenger.v1.StreamEvent.ConversationDeleted")
	proto.RegisterType((*StreamEvent_InteractionUpdated)(nil), "berty.messenger.v1.StreamEvent.InteractionUpdated")
	proto.RegisterType((*StreamEvent_InteractionDeleted)(nil), "berty.messenger.v1.StreamEvent.InteractionDeleted")
	proto.RegisterType((*StreamEvent_ContactUpdated)(nil), "berty.messenger.v1.StreamEvent.ContactUpdated")
	proto.RegisterType((*StreamEvent_AccountUpdated)(nil), "berty.messenger.v1.StreamEvent.AccountUpdated")
	proto.RegisterType((*StreamEvent_MemberUpdated)(nil), "berty.messenger.v1.StreamEvent.MemberUpdated")
	proto.RegisterType((*StreamEvent_DeviceUpdated)(nil), "berty.messenger.v1.StreamEvent.DeviceUpdated")
	proto.RegisterType((*StreamEvent_ListEnded)(nil), "berty.messenger.v1.StreamEvent.ListEnded")
	proto.RegisterType((*StreamEvent_ConversationPartialLoad)(nil), "berty.messenger.v1.StreamEvent.ConversationPartialLoad")
	proto.RegisterType((*StreamEvent_Notified)(nil), "berty.messenger.v1.StreamEvent.Notified")
	proto.RegisterType((*StreamEvent_Notified_Basic)(nil), "berty.messenger.v1.StreamEvent.Notified.Basic")
	proto.RegisterType((*StreamEvent_Notified_MessageReceived)(nil), "berty.messenger.v1.StreamEvent.Notified.MessageReceived")
	proto.RegisterType((*StreamEvent_Notified_ContactRequestSent)(nil), "berty.messenger.v1.StreamEvent.Notified.ContactRequestSent")
	proto.RegisterType((*StreamEvent_Notified_ContactRequestReceived)(nil), "berty.messenger.v1.StreamEvent.Notified.ContactRequestReceived")
	proto.RegisterType((*StreamEvent_Notified_GroupInvitation)(nil), "berty.messenger.v1.StreamEvent.Notified.GroupInvitation")
	proto.RegisterType((*StreamEvent_PeerStatusConnected)(nil), "berty.messenger.v1.StreamEvent.PeerStatusConnected")
	proto.RegisterType((*StreamEvent_PeerStatusReconnecting)(nil), "berty.messenger.v1.StreamEvent.PeerStatusReconnecting")
	proto.RegisterType((*StreamEvent_PeerStatusDisconnected)(nil), "berty.messenger.v1.StreamEvent.PeerStatusDisconnected")
	proto.RegisterType((*StreamEvent_PeerStatusGroupAssociated)(nil), "berty.messenger.v1.StreamEvent.PeerStatusGroupAssociated")
	proto.RegisterType((*StreamEvent_ServiceTokenAdded)(nil), "berty.messenger.v1.StreamEvent.ServiceTokenAdded")
	proto.RegisterType((*ConversationStream)(nil), "berty.messenger.v1.ConversationStream")
	proto.RegisterType((*ConversationStream_Request)(nil), "berty.messenger.v1.ConversationStream.Request")
	proto.RegisterType((*ConversationStream_Reply)(nil), "berty.messenger.v1.ConversationStream.Reply")
	proto.RegisterType((*ConversationCreate)(nil), "berty.messenger.v1.ConversationCreate")
	proto.RegisterType((*ConversationCreate_Request)(nil), "berty.messenger.v1.ConversationCreate.Request")
	proto.RegisterType((*ConversationCreate_Reply)(nil), "berty.messenger.v1.ConversationCreate.Reply")
	proto.RegisterType((*AccountGet)(nil), "berty.messenger.v1.AccountGet")
	proto.RegisterType((*AccountGet_Request)(nil), "berty.messenger.v1.AccountGet.Request")
	proto.RegisterType((*AccountGet_Reply)(nil), "berty.messenger.v1.AccountGet.Reply")
	proto.RegisterType((*EventStream)(nil), "berty.messenger.v1.EventStream")
	proto.RegisterType((*EventStream_Request)(nil), "berty.messenger.v1.EventStream.Request")
	proto.RegisterType((*EventStream_Reply)(nil), "berty.messenger.v1.EventStream.Reply")
	proto.RegisterType((*AccountUpdate)(nil), "berty.messenger.v1.AccountUpdate")
	proto.RegisterType((*AccountUpdate_Request)(nil), "berty.messenger.v1.AccountUpdate.Request")
	proto.RegisterType((*AccountUpdate_Reply)(nil), "berty.messenger.v1.AccountUpdate.Reply")
	proto.RegisterType((*AccountPushConfigure)(nil), "berty.messenger.v1.AccountPushConfigure")
	proto.RegisterType((*AccountPushConfigure_Request)(nil), "berty.messenger.v1.AccountPushConfigure.Request")
	proto.RegisterType((*AccountPushConfigure_Reply)(nil), "berty.messenger.v1.AccountPushConfigure.Reply")
	proto.RegisterType((*ContactRequest)(nil), "berty.messenger.v1.ContactRequest")
	proto.RegisterType((*ContactRequest_Request)(nil), "berty.messenger.v1.ContactRequest.Request")
	proto.RegisterType((*ContactRequest_Reply)(nil), "berty.messenger.v1.ContactRequest.Reply")
	proto.RegisterType((*ContactAccept)(nil), "berty.messenger.v1.ContactAccept")
	proto.RegisterType((*ContactAccept_Request)(nil), "berty.messenger.v1.ContactAccept.Request")
	proto.RegisterType((*ContactAccept_Reply)(nil), "berty.messenger.v1.ContactAccept.Reply")
	proto.RegisterType((*Interact)(nil), "berty.messenger.v1.Interact")
	proto.RegisterType((*Interact_Request)(nil), "berty.messenger.v1.Interact.Request")
	proto.RegisterType((*Interact_Reply)(nil), "berty.messenger.v1.Interact.Reply")
	proto.RegisterType((*ReplicationServiceRegisterGroup)(nil), "berty.messenger.v1.ReplicationServiceRegisterGroup")
	proto.RegisterType((*ReplicationServiceRegisterGroup_Request)(nil), "berty.messenger.v1.ReplicationServiceRegisterGroup.Request")
	proto.RegisterType((*ReplicationServiceRegisterGroup_Reply)(nil), "berty.messenger.v1.ReplicationServiceRegisterGroup.Reply")
	proto.RegisterType((*ReplicationSetAutoEnable)(nil), "berty.messenger.v1.ReplicationSetAutoEnable")
	proto.RegisterType((*ReplicationSetAutoEnable_Request)(nil), "berty.messenger.v1.ReplicationSetAutoEnable.Request")
	proto.RegisterType((*ReplicationSetAutoEnable_Reply)(nil), "berty.messenger.v1.ReplicationSetAutoEnable.Reply")
	proto.RegisterType((*BannerQuote)(nil), "berty.messenger.v1.BannerQuote")
	proto.RegisterType((*BannerQuote_Request)(nil), "berty.messenger.v1.BannerQuote.Request")
	proto.RegisterType((*BannerQuote_Reply)(nil), "berty.messenger.v1.BannerQuote.Reply")
	proto.RegisterType((*InstanceExportData)(nil), "berty.messenger.v1.InstanceExportData")
	proto.RegisterType((*InstanceExportData_Request)(nil), "berty.messenger.v1.InstanceExportData.Request")
	proto.RegisterType((*InstanceExportData_Reply)(nil), "berty.messenger.v1.InstanceExportData.Reply")
	proto.RegisterType((*LocalDatabaseState)(nil), "berty.messenger.v1.LocalDatabaseState")
	proto.RegisterType((*LocalConversationState)(nil), "berty.messenger.v1.LocalConversationState")
	proto.RegisterType((*MessageSearch)(nil), "berty.messenger.v1.MessageSearch")
	proto.RegisterType((*MessageSearch_Request)(nil), "berty.messenger.v1.MessageSearch.Request")
	proto.RegisterType((*MessageSearch_Reply)(nil), "berty.messenger.v1.MessageSearch.Reply")
	proto.RegisterType((*TyberHostSearch)(nil), "berty.messenger.v1.TyberHostSearch")
	proto.RegisterType((*TyberHostSearch_Request)(nil), "berty.messenger.v1.TyberHostSearch.Request")
	proto.RegisterType((*TyberHostSearch_Reply)(nil), "berty.messenger.v1.TyberHostSearch.Reply")
	proto.RegisterType((*TyberHostAttach)(nil), "berty.messenger.v1.TyberHostAttach")
	proto.RegisterType((*TyberHostAttach_Request)(nil), "berty.messenger.v1.TyberHostAttach.Request")
	proto.RegisterType((*TyberHostAttach_Reply)(nil), "berty.messenger.v1.TyberHostAttach.Reply")
	proto.RegisterType((*PushSetDeviceToken)(nil), "berty.messenger.v1.PushSetDeviceToken")
	proto.RegisterType((*PushSetDeviceToken_Request)(nil), "berty.messenger.v1.PushSetDeviceToken.Request")
	proto.RegisterType((*PushSetDeviceToken_Reply)(nil), "berty.messenger.v1.PushSetDeviceToken.Reply")
	proto.RegisterType((*PushSetAutoShare)(nil), "berty.messenger.v1.PushSetAutoShare")
	proto.RegisterType((*PushSetAutoShare_Request)(nil), "berty.messenger.v1.PushSetAutoShare.Request")
	proto.RegisterType((*PushSetAutoShare_Reply)(nil), "berty.messenger.v1.PushSetAutoShare.Reply")
	proto.RegisterType((*PushReceivedData)(nil), "berty.messenger.v1.PushReceivedData")
	proto.RegisterType((*PushReceive)(nil), "berty.messenger.v1.PushReceive")
	proto.RegisterType((*PushReceive_Request)(nil), "berty.messenger.v1.PushReceive.Request")
	proto.RegisterType((*PushReceive_Reply)(nil), "berty.messenger.v1.PushReceive.Reply")
	proto.RegisterType((*ListMemberDevices)(nil), "berty.messenger.v1.ListMemberDevices")
	proto.RegisterType((*ListMemberDevices_Request)(nil), "berty.messenger.v1.ListMemberDevices.Request")
	proto.RegisterType((*ListMemberDevices_Reply)(nil), "berty.messenger.v1.ListMemberDevices.Reply")
	proto.RegisterType((*PushShareTokenForConversation)(nil), "berty.messenger.v1.PushShareTokenForConversation")
	proto.RegisterType((*PushShareTokenForConversation_Request)(nil), "berty.messenger.v1.PushShareTokenForConversation.Request")
	proto.RegisterType((*PushShareTokenForConversation_Reply)(nil), "berty.messenger.v1.PushShareTokenForConversation.Reply")
	proto.RegisterType((*PushTokenSharedForConversation)(nil), "berty.messenger.v1.PushTokenSharedForConversation")
	proto.RegisterType((*PushTokenSharedForConversation_Request)(nil), "berty.messenger.v1.PushTokenSharedForConversation.Request")
	proto.RegisterType((*PushTokenSharedForConversation_Reply)(nil), "berty.messenger.v1.PushTokenSharedForConversation.Reply")
	proto.RegisterType((*DirectoryServiceRegister)(nil), "berty.messenger.v1.DirectoryServiceRegister")
	proto.RegisterType((*DirectoryServiceRegister_Request)(nil), "berty.messenger.v1.DirectoryServiceRegister.Request")
	proto.RegisterType((*DirectoryServiceRegister_Reply)(nil), "berty.messenger.v1.DirectoryServiceRegister.Reply")
	proto.RegisterType((*DirectoryServiceUnregister)(nil), "berty.messenger.v1.DirectoryServiceUnregister")
	proto.RegisterType((*DirectoryServiceUnregister_Request)(nil), "berty.messenger.v1.DirectoryServiceUnregister.Request")
	proto.RegisterType((*DirectoryServiceUnregister_Reply)(nil), "berty.messenger.v1.DirectoryServiceUnregister.Reply")
	proto.RegisterType((*DirectoryServiceQuery)(nil), "berty.messenger.v1.DirectoryServiceQuery")
	proto.RegisterType((*DirectoryServiceQuery_Request)(nil), "berty.messenger.v1.DirectoryServiceQuery.Request")
	proto.RegisterType((*DirectoryServiceQuery_Reply)(nil), "berty.messenger.v1.DirectoryServiceQuery.Reply")
	proto.RegisterType((*PushServer)(nil), "berty.messenger.v1.PushServer")
	proto.RegisterType((*PushLocalDeviceSharedToken)(nil), "berty.messenger.v1.PushLocalDeviceSharedToken")
	proto.RegisterType((*PushMemberToken)(nil), "berty.messenger.v1.PushMemberToken")
	proto.RegisterType((*PushMemberTokenUpdate)(nil), "berty.messenger.v1.PushMemberTokenUpdate")
	proto.RegisterType((*MemberWithDevices)(nil), "berty.messenger.v1.MemberWithDevices")
	proto.RegisterType((*PushSend)(nil), "berty.messenger.v1.PushSend")
	proto.RegisterType((*PushSend_Request)(nil), "berty.messenger.v1.PushSend.Request")
	proto.RegisterType((*PushSend_Reply)(nil), "berty.messenger.v1.PushSend.Reply")
	proto.RegisterType((*PushShareToken)(nil), "berty.messenger.v1.PushShareToken")
	proto.RegisterType((*PushShareToken_Request)(nil), "berty.messenger.v1.PushShareToken.Request")
	proto.RegisterType((*PushShareToken_Reply)(nil), "berty.messenger.v1.PushShareToken.Reply")
	proto.RegisterType((*PushSetServer)(nil), "berty.messenger.v1.PushSetServer")
	proto.RegisterType((*PushSetServer_Request)(nil), "berty.messenger.v1.PushSetServer.Request")
	proto.RegisterType((*PushSetServer_Reply)(nil), "berty.messenger.v1.PushSetServer.Reply")
	proto.RegisterType((*AuthExchangeResponse)(nil), "berty.messenger.v1.AuthExchangeResponse")
	proto.RegisterMapType((map[string]string)(nil), "berty.messenger.v1.AuthExchangeResponse.ServicesEntry")
	proto.RegisterType((*ServicesTokenCode)(nil), "berty.messenger.v1.ServicesTokenCode")
}

func init() {
	proto.RegisterFile("messengertypes/messengertypes.proto", fileDescriptor_971ac7a2ed22f21d)
}

var fileDescriptor_971ac7a2ed22f21d = []byte{
	// 7340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3d, 0x6d, 0x8c, 0x1c, 0xc9,
	0x55, 0xd7, 0xf3, 0xb1, 0x33, 0xf3, 0x66, 0x76, 0xb7, 0xb7, 0x76, 0x6d, 0x8f, 0xdb, 0xe7, 0x1d,
	0xbb, 0x7d, 0x3e, 0xdb, 0xf7, 0xb1, 0xbe, 0x73, 0x7c, 0xbe, 0xb3, 0xcd, 0x85, 0xec, 0x87, 0xef,
	0xb2, 0xb6, 0xd7, 0xde, 0xf4, 0xda, 0xb9, 0x70, 0xa7, 0x68, 0xe8, 0x9d, 0xae, 0x9d, 0x6d, 0x76,
	0xb6, 0x7b, 0xae, 0xbb, 0x67, 0xd7, 0x8b, 0x48, 0x50, 0xa4, 0x48, 0x51, 0x22, 0x11, 0x0e, 0x42,
	0x50, 0x00, 0x09, 0x29, 0x8a, 0xc4, 0x0f, 0x08, 0x08, 0x7e, 0x00, 0x3f, 0xf8, 0xc1, 0x0f, 0x22,
	0x84, 0x10, 0x3f, 0x42, 0x84, 0x44, 0xf8, 0xb3, 0x02, 0x07, 0xfe, 0x80, 0x84, 0x90, 0x91, 0x00,
	0x21, 0x08, 0xa8, 0xbe, 0xba, 0xab, 0x67, 0xba, 0x7b, 0x66, 0xd6, 0x77, 0x84, 0x5f, 0x3b, 0xfd,
	0xea, 0xd5, 0xab, 0x57, 0x55, 0xaf, 0x5e, 0xbd, 0x7a, 0xef, 0x55, 0x2d, 0x9c, 0xdb, 0xc5, 0xbe,
	0x8f, 0x9d, 0x36, 0xf6, 0x82, 0x83, 0x2e, 0xf6, 0x2f, 0xc7, 0x3f, 0x17, 0xba, 0x9e, 0x1b, 0xb8,
	0x08, 0x6d, 0x92, 0xef, 0x85, 0xb0, 0x6c, 0x61, 0xef, 0x55, 0x6d, 0xae, 0xed, 0xb6, 0x5d, 0x5a,
	0x7c, 0x99, 0xfc, 0x62, 0x98, 0xda, 0x2c, 0xfd, 0xd3, 0x72, 0x3b, 0x52, 0x75, 0x6d, 0xbe, 0xdb,
	0xf3, 0xb7, 0x19, 0x79, 0x4a, 0x28, 0xfc, 0x64, 0xe5, 0xfa, 0xdf, 0x29, 0xf0, 0xec, 0xba, 0xd9,
	0xb6, 0x1d, 0x33, 0xc0, 0xd6, 0xaa, 0x13, 0x60, 0xcf, 0x6c, 0x05, 0xb6, 0xeb, 0xf8, 0xf7, 0xbb,
	0xf4, 0x0f, 0x3a, 0x0e, 0x13, 0xe6, 0xae, 0xdb, 0x73, 0x82, 0xba, 0x72, 0x46, 0xb9, 0x58, 0x34,
	0xf8, 0x17, 0x3a, 0x07, 0x25, 0x0f, 0x6f, 0x35, 0x5b, 0xb6, 0x55, 0xcf, 0x9d, 0x51, 0x2e, 0x56,
	0x96, 0xe0, 0xf1, 0x61, 0x63, 0xc2, 0xc0, 0x5b, 0xcb, 0xab, 0x2b, 0xc6, 0x84, 0x87, 0xb7, 0x96,
	0x6d, 0x0b, 0xdd, 0x84, 0xe9, 0x96, 0xeb, 0xec, 0x61, 0xcf, 0x37, 0x09, 0xb5, 0x66, 0x77, 0xa7,
	0x9e, 0xa7, 0xc8, 0xe8, 0xf1, 0x61, 0x63, 0x6a, 0x59, 0x2a, 0x5a, 0xbf, 0x63, 0x4c, 0xc9, 0xa8,
	0xeb, 0x3b, 0xe8, 0x22, 0xa8, 0x6e, 0xc7, 0xc2, 0x7e, 0xd0, 0x0c, 0xdc, 0xa6, 0x83, 0xf7, 0xb1,
	0x1f, 0xd4, 0x0b, 0x67, 0x94, 0x8b, 0x65, 0x63, 0x8a, 0xc1, 0x1f, 0xb8, 0xf7, 0x28, 0x14, 0x9d,
	0x80, 0x92, 0xe3, 0x36, 0x37, 0x7b, 0x9d, 0x9d, 0xfa, 0x04, 0x45, 0x98, 0x70, 0xdc, 0xa5, 0x5e,
	0x67, 0xe7, 0x76, 0xa1, 0x5c, 0x54, 0x27, 0xf4, 0x7b, 0xa0, 0xca, 0x4d, 0xdd, 0xef, 0x62, 0x47,
	0x7b, 0x15, 0x4a, 0x06, 0x7e, 0xbf, 0x47, 0x6a, 0x3f, 0x0f, 0xe5, 0xb6, 0xe7, 0xf6, 0xba, 0x84,
	0x3b, 0x85, 0x72, 0x57, 0x7d, 0x7c, 0xd8, 0x28, 0xbd, 0x4d, 0x60, 0xeb, 0x77, 0x8c, 0x12, 0x2d,
	0x5c, 0xdf, 0xd1, 0x4a, 0x50, 0x34, 0x70, 0xb7, 0x73, 0xa0, 0xdf, 0x87, 0x19, 0x99, 0xde, 0x72,
	0xc7, 0xf5, 0xf1, 0x53, 0x11, 0xf4, 0xe2, 0x0c, 0xde, 0x75, 0x4d, 0x4b, 0x7b, 0x18, 0xd1, 0xbb,
	0x0d, 0x25, 0x97, 0xcd, 0x06, 0x25, 0x57, 0xbd, 0xf2, 0xca, 0xc2, 0xa0, 0x50, 0x2c, 0x64, 0xcd,
	0xa2, 0x21, 0x08, 0x44, 0x6d, 0xfe, 0x96, 0x12, 0x6f, 0x74, 0xad, 0x17, 0x60, 0xed, 0xe7, 0x94,
	0xb1, 0x7b, 0x81, 0x1a, 0x50, 0xdd, 0xed, 0x05, 0xd8, 0x6a, 0xf6, 0x9c, 0xc0, 0xee, 0x50, 0x61,
	0xc8, 0x1b, 0x40, 0x41, 0x0f, 0x09, 0x84, 0x48, 0x50, 0xcf, 0x21, 0xdf, 0x74, 0xee, 0xcb, 0x06,
	0xff, 0x42, 0x67, 0xa1, 0x46, 0xfe, 0x36, 0xb7, 0x5c, 0x0f, 0xef, 0x61, 0x8f, 0xcf, 0x2d, 0x25,
	0xf6, 0x16, 0x03, 0x45, 0xdc, 0x7e, 0x41, 0x81, 0xf2, 0xad, 0xd6, 0xb6, 0xfb, 0x00, 0xfb, 0x81,
	0xf6, 0x99, 0x88, 0xc9, 0x39, 0x28, 0x5a, 0xb8, 0x63, 0x1e, 0x50, 0x0e, 0x0b, 0x06, 0xfb, 0x40,
	0x08, 0x0a, 0xb8, 0xb5, 0xed, 0x32, 0xc1, 0x34, 0xe8, 0x6f, 0x74, 0x0e, 0x26, 0x03, 0xcf, 0x6e,
	0xb7, 0xb1, 0xd7, 0xc4, 0x9e, 0xe7, 0x7a, 0x9c, 0x99, 0x1a, 0x07, 0xde, 0x22, 0x30, 0xed, 0x14,
	0x6f, 0x2f, 0xa4, 0xa0, 0x44, 0x14, 0xf4, 0xf7, 0x61, 0x8a, 0xb0, 0xb0, 0xd2, 0xeb, 0x76, 0xf0,
	0x23, 0xca, 0xc8, 0x52, 0xc4, 0xc8, 0x47, 0xd3, 0xe4, 0x2f, 0xe5, 0xa0, 0xbe, 0xea, 0xf8, 0x81,
	0xe9, 0xb4, 0xf0, 0xc6, 0xb6, 0xe9, 0x61, 0x73, 0xb3, 0x83, 0x97, 0xc8, 0xdc, 0xaf, 0xae, 0x68,
	0x9b, 0xb1, 0x61, 0xf0, 0xb0, 0x8f, 0xd9, 0x1a, 0x2d, 0x1b, 0xec, 0x83, 0x0c, 0xb0, 0x65, 0xfb,
	0xdd, 0x8e, 0x79, 0xd0, 0x74, 0xcc, 0x5d, 0xcc, 0x79, 0xab, 0x72, 0xd8, 0x3d, 0x73, 0x17, 0xa3,
	0x79, 0x80, 0xae, 0xe9, 0xfb, 0xdd, 0x6d, 0xcf, 0xf4, 0xd9, 0xfc, 0xd4, 0x0c, 0x09, 0xa2, 0x7d,
	0x4d, 0x11, 0xec, 0xbd, 0x0a, 0x85, 0x8e, 0xed, 0xec, 0x70, 0x09, 0x3c, 0x9d, 0x24, 0x81, 0x94,
	0xb1, 0xbb, 0xb6, 0xb3, 0x63, 0x50, 0x54, 0x74, 0x05, 0x6a, 0x36, 0x91, 0x45, 0xc7, 0xec, 0x34,
	0x7b, 0x5e, 0x87, 0xeb, 0x89, 0xe9, 0xc7, 0x87, 0x8d, 0xea, 0x2a, 0x87, 0x3f, 0x34, 0xee, 0x1a,
	0x55, 0x81, 0xf4, 0xd0, 0xeb, 0x10, 0xb5, 0xb2, 0x8f, 0x37, 0x29, 0x7a, 0x3e, 0x52, 0x2b, 0xef,
	0xe0, 0x4d, 0x82, 0x39, 0xb1, 0x8f, 0x37, 0x1f, 0x7a, 0x1d, 0xfd, 0xbf, 0x15, 0x98, 0x8d, 0x0f,
	0x07, 0x95, 0x4a, 0x6d, 0x3d, 0x5d, 0x7a, 0x6b, 0x29, 0xd2, 0x7b, 0x1a, 0x80, 0xe1, 0x49, 0x23,
	0x54, 0xa1, 0x10, 0x32, 0x3e, 0xff, 0x4f, 0xfb, 0xbf, 0x05, 0x27, 0x56, 0xf0, 0x1e, 0x1d, 0x01,
	0x21, 0x1d, 0x42, 0x28, 0x96, 0x9e, 0x5e, 0x28, 0xa2, 0x55, 0xf7, 0x3a, 0x4c, 0x92, 0x76, 0x02,
	0x0f, 0x9b, 0xbb, 0x77, 0xdd, 0xb6, 0xaf, 0x55, 0x42, 0xea, 0x31, 0xb9, 0xed, 0xd8, 0x0e, 0x16,
	0x72, 0x4b, 0x7e, 0xeb, 0x5f, 0x51, 0x60, 0x72, 0xdd, 0xf4, 0x7c, 0xbc, 0x82, 0x71, 0x97, 0x8c,
	0x88, 0xf6, 0x66, 0x6c, 0xa9, 0x84, 0x23, 0x59, 0xe1, 0x43, 0x15, 0x97, 0xc3, 0xdc, 0x80, 0x1c,
	0xde, 0x38, 0xfa, 0x34, 0xe8, 0xbf, 0x56, 0x81, 0x4a, 0x08, 0x43, 0xd7, 0xa0, 0xb0, 0x63, 0x3b,
	0x16, 0x25, 0x30, 0x75, 0x45, 0xcf, 0x24, 0xb0, 0x70, 0xc7, 0x76, 0x2c, 0x83, 0xe2, 0xa3, 0x65,
	0x28, 0x53, 0xd4, 0x26, 0xdf, 0xf0, 0xaa, 0x57, 0x4e, 0xa5, 0xd6, 0x5d, 0x5d, 0x61, 0xd2, 0xc6,
	0x3f, 0x8c, 0x12, 0x45, 0x5c, 0xb5, 0xd0, 0x8f, 0x43, 0x95, 0x11, 0xa1, 0x12, 0x46, 0x67, 0xb8,
	0x7a, 0x65, 0x3e, 0x95, 0x0e, 0x95, 0x56, 0x03, 0x36, 0xc3, 0xdf, 0xe8, 0x27, 0x60, 0x86, 0x11,
	0x20, 0xc8, 0x66, 0x1b, 0x37, 0x3d, 0xbc, 0x55, 0x2f, 0x52, 0x32, 0x2f, 0x67, 0x77, 0x85, 0xfe,
	0x5a, 0x63, 0xb5, 0x0c, 0xbc, 0x65, 0x4c, 0x6f, 0xc6, 0x01, 0xe8, 0x16, 0x54, 0xb0, 0xd3, 0xf2,
	0x0e, 0xba, 0x01, 0xb6, 0xa8, 0x2e, 0xae, 0x5e, 0xb9, 0x90, 0x4d, 0xf2, 0x96, 0x40, 0x37, 0xa2,
	0x9a, 0xda, 0x6f, 0x16, 0xa0, 0x12, 0x16, 0x1c, 0x79, 0xb4, 0xe7, 0xa0, 0xe8, 0xb8, 0x4e, 0x4b,
	0x88, 0x02, 0xfb, 0x18, 0x90, 0xdd, 0xfc, 0xa0, 0x42, 0xd3, 0xa0, 0xdc, 0xda, 0xc6, 0xad, 0x1d,
	0xbf, 0xb7, 0x4b, 0x3b, 0x51, 0x33, 0xc2, 0x6f, 0xb4, 0x0c, 0xf3, 0x2d, 0xd7, 0x09, 0xcc, 0x56,
	0xd0, 0xec, 0xf6, 0x36, 0x3b, 0x76, 0xab, 0xe9, 0x61, 0xc7, 0xc2, 0x3f, 0xbd, 0xe7, 0xf6, 0xfc,
	0xa6, 0x8f, 0xb1, 0x55, 0x07, 0x5a, 0xe3, 0x14, 0xc7, 0x5a, 0xa7, 0x48, 0x46, 0x88, 0xb3, 0x81,
	0xb1, 0x85, 0x96, 0x00, 0x09, 0x22, 0x66, 0xab, 0x45, 0x4c, 0x21, 0xa2, 0x62, 0xaa, 0x54, 0xc5,
	0xcc, 0x3d, 0x3e, 0x6c, 0x90, 0x4d, 0x95, 0x94, 0x2e, 0xb2, 0xc2, 0xf5, 0x3b, 0x86, 0xda, 0x8a,
	0x43, 0xa8, 0x65, 0xc3, 0x95, 0x13, 0x63, 0x63, 0x07, 0x1f, 0xd4, 0xe7, 0x68, 0xd3, 0x53, 0x4c,
	0x2f, 0x51, 0xf0, 0x1d, 0x7c, 0x40, 0x7a, 0xcc, 0x30, 0x7d, 0xdc, 0xf2, 0x70, 0x50, 0x3f, 0x46,
	0xb1, 0xaa, 0x14, 0xb6, 0x41, 0x41, 0x11, 0x31, 0x86, 0xd2, 0xf4, 0xed, 0x76, 0xfd, 0xb8, 0x44,
	0x8c, 0xa1, 0x6d, 0xd8, 0x6d, 0xf4, 0xa6, 0xd0, 0x75, 0xc4, 0x00, 0xac, 0x9f, 0xa0, 0x53, 0x32,
	0xbf, 0xb0, 0x8f, 0xfd, 0x6d, 0x07, 0x07, 0x0b, 0xc2, 0x7a, 0x24, 0x73, 0x42, 0x85, 0xed, 0xc1,
	0x41, 0x17, 0x73, 0x5d, 0x48, 0x7e, 0xa2, 0xe7, 0x60, 0x8a, 0x37, 0x64, 0xb7, 0x1d, 0xc2, 0x7a,
	0xbd, 0x4e, 0x9b, 0x61, 0x1c, 0x6e, 0xd8, 0x6d, 0x67, 0xbd, 0xb7, 0x89, 0x5e, 0x04, 0xc4, 0xb0,
	0xc8, 0xda, 0x23, 0x3d, 0xa3, 0x0c, 0x9d, 0xa4, 0x98, 0xd3, 0xb4, 0x84, 0xcc, 0xf5, 0x1d, 0x7c,
	0xb0, 0x61, 0xb7, 0xb5, 0xaf, 0x2b, 0x30, 0xdd, 0x27, 0x98, 0xe8, 0x25, 0x00, 0x31, 0xb0, 0xb6,
	0xc5, 0x2d, 0x8f, 0xc9, 0xc7, 0x87, 0x8d, 0x0a, 0x1f, 0xbf, 0xd5, 0x15, 0xa3, 0xc2, 0x11, 0x56,
	0xad, 0x98, 0x9e, 0xcf, 0x65, 0x58, 0x29, 0x2f, 0x01, 0x88, 0x25, 0x63, 0x5b, 0x5c, 0xb5, 0x52,
	0xaa, 0xbc, 0x65, 0x42, 0x95, 0x23, 0xac, 0x5a, 0xba, 0x0d, 0x05, 0x22, 0x8c, 0x68, 0x1a, 0xaa,
	0x0f, 0x9d, 0x1d, 0xc7, 0xdd, 0x77, 0xc8, 0xa7, 0xfa, 0x0c, 0x3a, 0x01, 0xb3, 0x7c, 0x7e, 0x57,
	0x9d, 0x3d, 0x3b, 0xc0, 0x9f, 0x7e, 0x95, 0x16, 0x28, 0x04, 0x93, 0xb6, 0xc9, 0x01, 0x39, 0x34,
	0x0b, 0xd3, 0xe1, 0x32, 0xe0, 0xc0, 0x3c, 0x9a, 0x81, 0x49, 0xde, 0x1e, 0x07, 0x15, 0xf4, 0xdf,
	0x56, 0x00, 0x6d, 0x60, 0xc7, 0xe2, 0x64, 0x85, 0x7a, 0x95, 0x2d, 0x31, 0x59, 0xf5, 0x28, 0x47,
	0x55, 0x3d, 0x1a, 0x94, 0x77, 0x71, 0x60, 0x5a, 0x66, 0x60, 0xf2, 0x45, 0x15, 0x7e, 0x13, 0x29,
	0x73, 0xf7, 0x9d, 0x66, 0x58, 0xce, 0xec, 0x80, 0xaa, 0xbb, 0xef, 0xac, 0x71, 0x50, 0xb4, 0x27,
	0x7c, 0xa0, 0x80, 0x20, 0x8e, 0xae, 0xc2, 0xf1, 0x94, 0x85, 0x44, 0xb7, 0x5c, 0x63, 0xae, 0x9b,
	0xb4, 0x82, 0xa4, 0x09, 0xe6, 0x93, 0x56, 0x8b, 0x4d, 0xf0, 0xfa, 0x9d, 0x70, 0x82, 0xd7, 0x77,
	0x46, 0x58, 0xf3, 0xba, 0x09, 0x10, 0xa9, 0x4b, 0xf4, 0x0a, 0x14, 0x99, 0x76, 0x65, 0x43, 0xa5,
	0xa5, 0x0b, 0xb8, 0xc1, 0x10, 0x47, 0xd8, 0x12, 0xf5, 0x5f, 0x9f, 0x06, 0x58, 0xec, 0x76, 0xf9,
	0xe4, 0xa1, 0xd7, 0xa1, 0x40, 0xd7, 0x10, 0x53, 0x6b, 0xe7, 0x92, 0x66, 0x23, 0xc2, 0x5e, 0xa0,
	0x0b, 0x89, 0x56, 0x40, 0x75, 0x28, 0x75, 0xcd, 0x83, 0x8e, 0x6b, 0x5a, 0x7c, 0x12, 0xc4, 0x27,
	0xba, 0x04, 0x15, 0x1f, 0x3b, 0x41, 0xd3, 0x32, 0xb9, 0xa1, 0x9c, 0x5f, 0xaa, 0xfd, 0xe3, 0x61,
	0xa3, 0x4c, 0x80, 0x2b, 0x66, 0x80, 0x8d, 0xf0, 0x17, 0x19, 0xc0, 0xc0, 0xf4, 0xda, 0x38, 0xa0,
	0xa7, 0xaf, 0x62, 0x24, 0xcb, 0x0f, 0x28, 0x94, 0x1c, 0xc0, 0x2a, 0x0c, 0x61, 0xd9, 0xb6, 0xb4,
	0xb3, 0x50, 0x7d, 0xe8, 0x63, 0x4f, 0xb0, 0x8e, 0xa0, 0xb0, 0xe9, 0x5a, 0x07, 0x62, 0xf7, 0x25,
	0xbf, 0xb5, 0xf3, 0x30, 0x4d, 0x07, 0x84, 0xca, 0x34, 0x3d, 0x0d, 0x84, 0x9b, 0x74, 0x2e, 0xda,
	0xa4, 0xb5, 0xd7, 0xa1, 0xb6, 0x81, 0x03, 0x8e, 0xb9, 0xe5, 0x0e, 0x8c, 0x9b, 0x32, 0x30, 0x6e,
	0xb7, 0x0b, 0xe5, 0x9c, 0x9a, 0xd7, 0xae, 0x41, 0x75, 0x03, 0x07, 0x84, 0x8b, 0xf1, 0xea, 0x4d,
	0x42, 0x75, 0xb1, 0x45, 0x96, 0x5f, 0x07, 0x5b, 0x6d, 0xac, 0xfd, 0x6b, 0x0e, 0xce, 0x72, 0x19,
	0x59, 0xb1, 0x3d, 0xdc, 0x0a, 0x5c, 0xef, 0x60, 0x03, 0x7b, 0x7b, 0x76, 0x0b, 0x1b, 0xb8, 0x6d,
	0xfb, 0x01, 0xf6, 0xb0, 0x45, 0x4c, 0x09, 0xdb, 0xc2, 0x4e, 0x60, 0x6f, 0xd9, 0xd8, 0xe3, 0xb4,
	0x25, 0x08, 0xba, 0x06, 0x27, 0xa2, 0xaf, 0x66, 0xd7, 0x73, 0xdd, 0xad, 0xa6, 0xed, 0xfb, 0x3d,
	0xec, 0xf1, 0xce, 0x1e, 0x8b, 0x8a, 0xd7, 0x49, 0xe9, 0x2a, 0x2d, 0x44, 0x2f, 0xc2, 0x8c, 0x47,
	0x5b, 0xf1, 0xd8, 0x59, 0x36, 0x9a, 0x28, 0x43, 0x95, 0x0b, 0xe8, 0x14, 0x5d, 0x80, 0x69, 0xfc,
	0xa8, 0x6b, 0xcb, 0xa8, 0x05, 0x8a, 0x3a, 0x15, 0x81, 0x29, 0x62, 0x03, 0xaa, 0x3e, 0xf6, 0xf6,
	0xb0, 0xd7, 0x34, 0x2d, 0xcb, 0x63, 0x93, 0x69, 0x00, 0x03, 0x2d, 0x5a, 0x96, 0x47, 0xd6, 0x98,
	0x25, 0x3a, 0xdb, 0xf4, 0x70, 0xcb, 0xf5, 0xac, 0x66, 0xe0, 0xee, 0x60, 0x87, 0x1e, 0x75, 0x2b,
	0xc6, 0x5c, 0x58, 0x6a, 0xd0, 0xc2, 0x07, 0xa4, 0x0c, 0xad, 0xc2, 0xd9, 0x81, 0x5a, 0x3d, 0xc7,
	0xe3, 0xa3, 0xc4, 0x09, 0x94, 0x28, 0x81, 0xf9, 0x3e, 0x02, 0x0f, 0x43, 0x34, 0x4a, 0x4a, 0xfb,
	0x77, 0x05, 0xce, 0xa5, 0x8c, 0x7a, 0x84, 0xfa, 0x11, 0x8e, 0xfb, 0x59, 0xa8, 0x79, 0x78, 0xd7,
	0xdd, 0x33, 0x3b, 0xf2, 0x90, 0x57, 0x39, 0x2c, 0x69, 0x10, 0x0b, 0x63, 0x0c, 0x62, 0x31, 0x7d,
	0x10, 0xb5, 0x7f, 0x56, 0x60, 0x9a, 0xf7, 0x74, 0xd1, 0xe2, 0x03, 0x3b, 0x07, 0x45, 0x56, 0x91,
	0x75, 0x90, 0x7d, 0xa0, 0x26, 0x20, 0xbf, 0xd7, 0xed, 0xba, 0x1e, 0x39, 0x07, 0xfb, 0xac, 0x8a,
	0x5f, 0xcf, 0x9d, 0xc9, 0xa7, 0x1d, 0xd6, 0x39, 0x59, 0x4a, 0x73, 0x43, 0xd4, 0x14, 0xb2, 0x3c,
	0xe3, 0xf7, 0x41, 0x7c, 0xb4, 0x02, 0xc8, 0xec, 0x05, 0xdb, 0x64, 0x7c, 0x5a, 0x4c, 0xa6, 0xa2,
	0x13, 0xc2, 0xb1, 0xc7, 0x87, 0x8d, 0x99, 0xc5, 0x58, 0x29, 0x39, 0x2c, 0xcc, 0xc4, 0x2b, 0x90,
	0xc3, 0xc5, 0x3c, 0x40, 0x24, 0x7e, 0x5c, 0x20, 0x25, 0x88, 0x76, 0x93, 0x6c, 0x45, 0x7c, 0x3d,
	0xed, 0xba, 0x7b, 0x8c, 0x3d, 0x74, 0x1e, 0x4a, 0xb4, 0x97, 0xa1, 0xa7, 0x87, 0x6e, 0x30, 0xb4,
	0x8c, 0x6c, 0x30, 0xbc, 0x4c, 0x7b, 0x0f, 0xd0, 0x7a, 0xcf, 0xdf, 0xde, 0xc0, 0xc1, 0x0a, 0x0e,
	0xfb, 0x86, 0x6e, 0x41, 0xcd, 0xa2, 0x9f, 0xcd, 0x68, 0xd8, 0xaa, 0xa1, 0x21, 0xd8, 0xed, 0xf9,
	0xdb, 0xd4, 0x77, 0x41, 0x2b, 0xf2, 0x96, 0x5b, 0xd8, 0xde, 0xc3, 0x9e, 0x51, 0xb5, 0x22, 0x32,
	0xda, 0xdb, 0x30, 0xc9, 0x89, 0x6f, 0xd0, 0x59, 0x45, 0xd7, 0x60, 0x82, 0xcd, 0x2f, 0xa7, 0x98,
	0x68, 0x44, 0x0b, 0xb2, 0xd8, 0x33, 0x38, 0xb6, 0xb6, 0x19, 0x72, 0xb9, 0x86, 0x77, 0x37, 0xb9,
	0x8c, 0xa3, 0xbb, 0x50, 0xdb, 0xa5, 0x9f, 0x31, 0x2e, 0x2f, 0xa5, 0xd1, 0x94, 0xaa, 0x3e, 0xec,
	0x12, 0xa1, 0x34, 0xaa, 0xbb, 0x11, 0x48, 0xff, 0xa7, 0x1c, 0x14, 0xa8, 0xc5, 0x34, 0x09, 0x95,
	0x87, 0x8e, 0x85, 0xb7, 0x6c, 0x07, 0x13, 0xe3, 0x61, 0x16, 0xa6, 0x09, 0x58, 0xd2, 0xc6, 0xaa,
	0x42, 0x2c, 0x0a, 0x02, 0xec, 0xd3, 0xbf, 0x6a, 0x1e, 0xcd, 0x81, 0x4a, 0x0a, 0x64, 0x8d, 0xab,
	0x16, 0x04, 0x0d, 0x49, 0x9d, 0xaa, 0x45, 0x01, 0x94, 0x74, 0xa5, 0x3a, 0x81, 0x2e, 0xc1, 0x79,
	0x06, 0x1c, 0xa2, 0x30, 0xd5, 0x32, 0x7a, 0x11, 0x2e, 0x64, 0xa0, 0xca, 0xab, 0x5c, 0xad, 0x08,
	0x86, 0xfb, 0x16, 0x86, 0x0a, 0x48, 0x83, 0xe3, 0x52, 0x81, 0x24, 0x41, 0x6a, 0x55, 0x94, 0x0d,
	0x0a, 0x88, 0x5a, 0x43, 0xc7, 0x60, 0x46, 0x2a, 0x63, 0xf3, 0xa5, 0x4e, 0xf6, 0x55, 0x91, 0x86,
	0x5c, 0x9d, 0xd2, 0xc9, 0xf6, 0x90, 0xd3, 0x0b, 0xe5, 0x92, 0x5a, 0xba, 0x5d, 0x28, 0x17, 0xd4,
	0xa2, 0xfe, 0xe5, 0x0a, 0xc0, 0xc6, 0x81, 0x1f, 0xe0, 0x5d, 0x32, 0x26, 0xf2, 0x41, 0xf5, 0x17,
	0xc3, 0x23, 0xfc, 0x22, 0x94, 0x85, 0x0d, 0xc0, 0x67, 0xf8, 0x7c, 0xa2, 0x71, 0x10, 0xd1, 0x59,
	0xa0, 0x15, 0x8d, 0xb0, 0x1a, 0x7a, 0x0b, 0x2a, 0xa1, 0x34, 0xf0, 0x63, 0xe0, 0xc5, 0xc4, 0xf5,
	0x1d, 0x91, 0x58, 0x13, 0x70, 0x23, 0xaa, 0xaa, 0x7d, 0x5f, 0x81, 0x4a, 0x58, 0x80, 0x16, 0xa1,
	0xd4, 0xf5, 0xdc, 0x16, 0xf6, 0x85, 0x83, 0xef, 0xc2, 0x30, 0xbe, 0xd6, 0x19, 0xba, 0x21, 0xea,
	0x11, 0xbd, 0xb4, 0x6f, 0x7a, 0x0e, 0x53, 0x3a, 0x15, 0x83, 0x7d, 0xa0, 0xd7, 0xa1, 0x2e, 0x08,
	0x34, 0x6d, 0xa7, 0xe9, 0x9b, 0xbb, 0xb8, 0x29, 0x5a, 0x62, 0xce, 0xa8, 0x63, 0xa2, 0x7c, 0xd5,
	0xd9, 0x30, 0x77, 0x31, 0xa7, 0x8b, 0xae, 0x43, 0xce, 0xda, 0xe4, 0xa7, 0xc0, 0xb3, 0x43, 0x3a,
	0xb8, 0xb2, 0xb4, 0x34, 0xf1, 0xf8, 0xb0, 0x91, 0x5b, 0x59, 0x32, 0x72, 0xd6, 0xa6, 0xf6, 0x3f,
	0x45, 0xc8, 0xad, 0x2c, 0x11, 0x7b, 0x93, 0x1b, 0x71, 0xac, 0x53, 0x79, 0x23, 0xfc, 0xa6, 0x87,
	0x34, 0x66, 0xee, 0xfa, 0xdc, 0x5f, 0x18, 0x7e, 0xa3, 0xe7, 0x60, 0x52, 0xf6, 0x03, 0xfb, 0x5c,
	0xdf, 0xc7, 0x81, 0x48, 0xe7, 0xae, 0x15, 0xee, 0xe6, 0xe4, 0xba, 0x2c, 0x06, 0x23, 0xb6, 0x16,
	0x5b, 0x95, 0x3e, 0xd5, 0xf2, 0x79, 0x43, 0x7c, 0x92, 0x12, 0xa6, 0x5c, 0x7c, 0xba, 0x89, 0xe6,
	0x0d, 0xf1, 0x89, 0x1e, 0xc0, 0x05, 0xae, 0xbe, 0x99, 0x26, 0x68, 0x0e, 0xa8, 0x75, 0xbe, 0x7d,
	0xf8, 0x74, 0xf7, 0xcc, 0x1b, 0xe7, 0xfc, 0x2c, 0x4d, 0xce, 0x50, 0xd1, 0x79, 0x98, 0x8a, 0x51,
	0xf5, 0xeb, 0x65, 0xd6, 0x29, 0xb9, 0xb2, 0x8f, 0x96, 0xe0, 0x74, 0xcc, 0x5b, 0xee, 0xe1, 0x6e,
	0x47, 0xa8, 0x7b, 0xdb, 0xd9, 0x72, 0xeb, 0x15, 0x5a, 0xeb, 0x94, 0x8c, 0x64, 0x44, 0x38, 0xd4,
	0xb6, 0xba, 0x00, 0xd3, 0xc2, 0x8c, 0x6f, 0xe2, 0x3d, 0x4c, 0x46, 0x1f, 0x98, 0xe1, 0x21, 0xc0,
	0xb7, 0x28, 0x14, 0xbd, 0x00, 0x33, 0x44, 0xfb, 0x36, 0x63, 0x7a, 0xaf, 0x46, 0x51, 0xa7, 0xbb,
	0x71, 0x1d, 0x87, 0x3e, 0x01, 0xcf, 0x0a, 0x8b, 0x7d, 0x0f, 0x7b, 0x64, 0x87, 0xb6, 0x9a, 0x2d,
	0x0f, 0xd3, 0xed, 0xda, 0xec, 0xf8, 0xf5, 0x49, 0x5a, 0x4d, 0xe3, 0x38, 0x9f, 0xe6, 0x28, 0xcb,
	0x11, 0x06, 0x7a, 0x1b, 0xce, 0x08, 0x0a, 0xd1, 0x46, 0x1c, 0x1f, 0xd1, 0xfa, 0x14, 0xa5, 0x72,
	0xda, 0x4c, 0x53, 0x58, 0x04, 0x29, 0x64, 0x3b, 0xb6, 0xa9, 0x4c, 0x47, 0x6c, 0xcb, 0x7b, 0xcf,
	0x4b, 0x80, 0x28, 0x2e, 0xb7, 0x0d, 0x78, 0x33, 0x2a, 0x33, 0xd9, 0xba, 0xd1, 0xde, 0xc0, 0x28,
	0x2f, 0x01, 0x8d, 0x95, 0x34, 0x3b, 0x6e, 0x8b, 0x98, 0x1a, 0x8c, 0xbe, 0xbf, 0x6d, 0x7a, 0x58,
	0xd8, 0x0a, 0x33, 0xac, 0x9b, 0x04, 0xeb, 0x2e, 0x41, 0x62, 0x6d, 0x51, 0x37, 0x1c, 0x53, 0x82,
	0xb7, 0x0b, 0xe5, 0xaa, 0x5a, 0xd3, 0xdf, 0x8d, 0x7b, 0xd6, 0x6f, 0xbb, 0xb6, 0xf3, 0xb4, 0xfe,
	0xaf, 0xf0, 0xf8, 0xf5, 0xfb, 0x0a, 0xd4, 0x57, 0xf0, 0x66, 0xaf, 0x4d, 0x36, 0x7c, 0x3e, 0x34,
	0x1b, 0x38, 0x60, 0xbb, 0xe4, 0xcf, 0x4b, 0x87, 0xc6, 0x8f, 0xcb, 0x86, 0x4a, 0x8a, 0x96, 0x22,
	0x34, 0x6e, 0x3d, 0x6a, 0x6d, 0x9b, 0x0e, 0x39, 0x7a, 0xfb, 0x5d, 0xd7, 0xf1, 0xb1, 0x30, 0x69,
	0x92, 0x2d, 0x8e, 0xdc, 0x78, 0x16, 0x47, 0xc4, 0x77, 0x0b, 0x66, 0x84, 0x31, 0x43, 0x79, 0xbd,
	0x6b, 0xfb, 0x81, 0xac, 0xa5, 0x97, 0x85, 0x92, 0xbe, 0x01, 0x25, 0x2e, 0x17, 0x5c, 0xbf, 0x9e,
	0x19, 0x66, 0x3f, 0x19, 0xa2, 0x82, 0xfe, 0x65, 0x05, 0x4e, 0x48, 0xe3, 0xb2, 0xec, 0xee, 0x76,
	0x3b, 0x38, 0xc0, 0x6f, 0x75, 0xdc, 0x7d, 0x79, 0x02, 0xae, 0x40, 0xad, 0x65, 0x76, 0x3a, 0x9b,
	0x66, 0x6b, 0x87, 0x76, 0x4a, 0x89, 0xfc, 0xb2, 0xcb, 0x1c, 0x4e, 0xfd, 0xb2, 0x02, 0x89, 0x74,
	0xe4, 0xb2, 0xe0, 0xef, 0x79, 0x28, 0x33, 0xcd, 0x10, 0x3a, 0x27, 0x12, 0xcc, 0xa1, 0x55, 0x4b,
	0xff, 0x03, 0x05, 0x66, 0x25, 0x5e, 0x56, 0x1d, 0x3b, 0xa0, 0x7c, 0xac, 0xc5, 0x7c, 0xd4, 0x64,
	0xc4, 0x24, 0x1e, 0x28, 0x29, 0x52, 0x8b, 0xb4, 0x5f, 0x22, 0x85, 0xc4, 0x6c, 0xd3, 0xa0, 0x1c,
	0xda, 0x94, 0x79, 0xaa, 0xde, 0xc3, 0x6f, 0x6d, 0x5d, 0xf0, 0x75, 0x12, 0xf2, 0x11, 0x9d, 0xd2,
	0xe3, 0xc3, 0x46, 0x9e, 0xd0, 0x20, 0x30, 0x72, 0x5e, 0xf4, 0x71, 0xab, 0xe7, 0xe1, 0x70, 0x0a,
	0xcb, 0xec, 0xbc, 0xb8, 0x41, 0xa1, 0x04, 0xaf, 0xc2, 0x10, 0x1e, 0x7a, 0x1d, 0xfd, 0x83, 0x32,
	0x94, 0xb8, 0x25, 0x80, 0xae, 0x02, 0x48, 0x2e, 0x2a, 0x46, 0xfb, 0xd8, 0x93, 0xc3, 0xc6, 0x4c,
	0xdb, 0xf5, 0x76, 0x6f, 0xe8, 0x5d, 0xcf, 0xde, 0x35, 0xbd, 0x83, 0x3b, 0xf8, 0x40, 0x37, 0x2a,
	0x5d, 0xd9, 0x69, 0x35, 0x2c, 0xee, 0x20, 0xd6, 0x40, 0x5e, 0x5a, 0x03, 0xdb, 0x03, 0x5a, 0xb2,
	0x48, 0x0d, 0xe8, 0xa1, 0x02, 0xb0, 0xd4, 0x78, 0x72, 0xd8, 0x38, 0xc5, 0x58, 0xda, 0x72, 0x3d,
	0x6c, 0xb7, 0x9d, 0x3b, 0xf8, 0xe0, 0x46, 0xe8, 0x4e, 0xd0, 0xfb, 0x15, 0xad, 0x05, 0xba, 0xd0,
	0xad, 0xb8, 0xe9, 0xe0, 0x7d, 0xe6, 0x8e, 0xf5, 0x9b, 0x66, 0x2f, 0x70, 0x77, 0x4d, 0x22, 0xbf,
	0x9d, 0xce, 0x01, 0x0b, 0x25, 0x2e, 0x9d, 0x78, 0x72, 0xd8, 0x98, 0x65, 0xb4, 0x2d, 0xbc, 0x65,
	0xf6, 0x3a, 0xc1, 0x8d, 0xc0, 0xeb, 0x61, 0xdd, 0x68, 0x84, 0x24, 0xee, 0xe1, 0x7d, 0x6a, 0xa2,
	0xf9, 0x8b, 0x72, 0x7d, 0x74, 0x03, 0x34, 0x42, 0x90, 0xe9, 0x90, 0x26, 0xd5, 0x2d, 0x4c, 0x72,
	0xb6, 0x3a, 0x66, 0x9b, 0xee, 0x00, 0x65, 0xe3, 0x38, 0xc1, 0xa0, 0x1a, 0x84, 0xd8, 0x39, 0x94,
	0xbd, 0xb7, 0x3a, 0x66, 0x1b, 0x75, 0x93, 0xd4, 0x5c, 0x85, 0xae, 0x87, 0x73, 0x69, 0x56, 0xa9,
	0xa4, 0xfa, 0x86, 0x8f, 0xc8, 0x80, 0xb2, 0xec, 0xc1, 0xec, 0xa0, 0xb2, 0x24, 0x9b, 0x07, 0x99,
	0x82, 0xe7, 0x86, 0x58, 0xd7, 0x14, 0x79, 0x78, 0xa3, 0x33, 0xfd, 0x4a, 0xd7, 0xef, 0x8f, 0x1e,
	0x56, 0x07, 0xa2, 0x87, 0xd7, 0xe1, 0xe4, 0xb6, 0x6d, 0x61, 0x62, 0xbe, 0x98, 0xdd, 0x6e, 0xd3,
	0x71, 0xc9, 0x09, 0xb1, 0xc5, 0x6d, 0x83, 0x1a, 0x1b, 0x44, 0x82, 0xb0, 0xea, 0x2c, 0x76, 0xbb,
	0xf7, 0xe4, 0x52, 0xa2, 0xff, 0x69, 0x55, 0xda, 0xaf, 0xae, 0x87, 0xf7, 0x6c, 0xbc, 0xcf, 0x36,
	0xab, 0xb2, 0xa1, 0x92, 0x12, 0xd2, 0x83, 0x75, 0x0e, 0x47, 0x5f, 0x50, 0x60, 0x2e, 0x71, 0x77,
	0x9b, 0xa2, 0x43, 0x90, 0xe8, 0x5e, 0x5f, 0x4c, 0xdb, 0xf1, 0x86, 0x8f, 0xc5, 0xec, 0x5e, 0xc2,
	0x36, 0xf9, 0x55, 0x05, 0x4e, 0xa6, 0xed, 0x8f, 0x7e, 0x7d, 0x9a, 0x32, 0xf2, 0x6a, 0x06, 0x23,
	0xc9, 0x9b, 0xe6, 0x70, 0x66, 0x4e, 0x58, 0x89, 0x15, 0xfd, 0xdb, 0xc4, 0xc4, 0x2e, 0xeb, 0x2d,
	0x78, 0x36, 0xeb, 0xc0, 0x8a, 0x2e, 0x71, 0x77, 0x58, 0x2e, 0x4b, 0x41, 0x84, 0x0e, 0x30, 0x72,
	0x46, 0x17, 0x06, 0x68, 0xc5, 0x10, 0x9f, 0xfa, 0x6f, 0x28, 0xa0, 0x6f, 0x0c, 0x35, 0xa6, 0xd0,
	0xcd, 0x01, 0xfd, 0x7b, 0x46, 0xd2, 0xbf, 0xc9, 0x4d, 0x0b, 0xa5, 0xfc, 0xe1, 0x30, 0xfa, 0x5f,
	0x39, 0xa8, 0xc9, 0x8c, 0xf6, 0x39, 0x34, 0x07, 0x3d, 0xd6, 0x71, 0x87, 0xa6, 0xdc, 0x81, 0xdc,
	0xb8, 0x1d, 0x08, 0xdd, 0x0f, 0x79, 0xd9, 0xfd, 0xf0, 0x45, 0x25, 0xd1, 0xff, 0x50, 0xa0, 0xf2,
	0x72, 0x6d, 0x6c, 0xff, 0x03, 0x13, 0x9a, 0xd3, 0x4f, 0x0e, 0x1b, 0x27, 0x07, 0x84, 0x86, 0xb3,
	0xa9, 0x8f, 0xee, 0xa4, 0x28, 0x3e, 0x95, 0x93, 0x62, 0xa2, 0xdf, 0x49, 0xa1, 0xff, 0x50, 0x81,
	0xc9, 0x35, 0xd9, 0x96, 0x45, 0xd7, 0x21, 0xdf, 0x0a, 0xa5, 0xe1, 0x02, 0xd9, 0xfa, 0x96, 0xe9,
	0x40, 0x3e, 0xdb, 0x3f, 0x90, 0x37, 0x5b, 0x6e, 0xa7, 0xb7, 0xeb, 0xdc, 0x68, 0xd9, 0x96, 0x6e,
	0x90, 0x3a, 0xe8, 0x93, 0x70, 0x22, 0x9e, 0xa0, 0x12, 0xed, 0x76, 0x6c, 0x6e, 0xd4, 0x27, 0x87,
	0x8d, 0x1a, 0xa3, 0x63, 0x3b, 0x16, 0x7e, 0xa4, 0x1b, 0xc7, 0x62, 0x69, 0x2a, 0xe1, 0xa6, 0x77,
	0x0f, 0x66, 0xe3, 0x86, 0x37, 0x8b, 0xb2, 0xe4, 0x33, 0xa2, 0x2c, 0x94, 0x7b, 0xea, 0x1c, 0x9e,
	0x89, 0x19, 0xe7, 0x0f, 0xfa, 0x3c, 0xc5, 0x85, 0x98, 0xa7, 0x58, 0xff, 0x61, 0x11, 0xaa, 0x52,
	0x8e, 0xc7, 0xd3, 0x74, 0x7f, 0x55, 0x5a, 0x0f, 0xa3, 0xf9, 0xb1, 0x13, 0x06, 0x84, 0xad, 0x97,
	0x17, 0x60, 0x86, 0x1f, 0x25, 0xa4, 0x31, 0x64, 0x1e, 0xc6, 0x69, 0x56, 0x10, 0x8d, 0xd5, 0x0b,
	0x30, 0xc3, 0x37, 0x36, 0x09, 0xb7, 0xc6, 0x70, 0x59, 0x41, 0x84, 0xeb, 0xc0, 0x04, 0xab, 0x4e,
	0x77, 0xcc, 0xea, 0x15, 0x2d, 0x89, 0x49, 0x76, 0x58, 0x59, 0xba, 0xf1, 0xe4, 0xb0, 0x71, 0x6d,
	0x40, 0x64, 0x43, 0x5a, 0x37, 0x3d, 0xbc, 0x85, 0x3d, 0xec, 0xb4, 0xb0, 0x7f, 0x63, 0x2d, 0xce,
	0x92, 0x6e, 0xf0, 0x56, 0xb2, 0x24, 0x22, 0x3f, 0x9e, 0x44, 0xac, 0x40, 0x4d, 0x2e, 0xe0, 0xa7,
	0xe9, 0x44, 0x6b, 0x46, 0x3e, 0x2e, 0x18, 0xb1, 0x5a, 0xb2, 0x1c, 0x14, 0xe3, 0x11, 0x83, 0x13,
	0x50, 0xb2, 0xfd, 0xe6, 0xae, 0xed, 0x60, 0x91, 0xf5, 0x64, 0xfb, 0x6b, 0xb6, 0x83, 0xd1, 0xcb,
	0x72, 0x28, 0x81, 0x9e, 0x19, 0x13, 0x98, 0x8e, 0xc2, 0x09, 0x3a, 0xd4, 0xcc, 0xc8, 0x73, 0xc4,
	0x82, 0xa0, 0x65, 0x23, 0x06, 0x43, 0xf7, 0x62, 0x21, 0x87, 0x49, 0x3a, 0x10, 0x97, 0x63, 0x21,
	0x87, 0x27, 0x87, 0x8d, 0x79, 0xa9, 0x01, 0x21, 0x6b, 0x51, 0x2d, 0x5d, 0x0a, 0x4a, 0xa0, 0xcb,
	0x30, 0xe7, 0xf6, 0x82, 0xa6, 0xbb, 0xd5, 0xf4, 0x03, 0xd7, 0xc3, 0x22, 0x9c, 0x4d, 0x8f, 0x58,
	0x65, 0x63, 0xc6, 0xed, 0x05, 0xf7, 0xb7, 0x36, 0x48, 0x09, 0x97, 0xbd, 0xdb, 0x85, 0xf2, 0xb4,
	0xaa, 0xde, 0x2e, 0x94, 0x55, 0x75, 0x46, 0xff, 0xb7, 0x02, 0x94, 0x78, 0xb8, 0xec, 0x88, 0x16,
	0xea, 0xda, 0xb0, 0x65, 0x9f, 0x42, 0x62, 0xc4, 0x99, 0xce, 0x1f, 0x69, 0xa6, 0x5f, 0x87, 0xa2,
	0x1f, 0x88, 0x48, 0xc1, 0x54, 0xb2, 0xdb, 0x85, 0x77, 0x7b, 0x61, 0x83, 0x20, 0x1a, 0x0c, 0x7f,
	0xc0, 0xde, 0x2e, 0x0e, 0xda, 0xdb, 0x67, 0xa1, 0xd6, 0xf2, 0xb0, 0x49, 0xb6, 0x07, 0x2a, 0x15,
	0xcc, 0x79, 0x51, 0xe5, 0x30, 0x2a, 0x06, 0xa7, 0x64, 0xa9, 0x61, 0xfe, 0x89, 0x48, 0x46, 0xba,
	0xb2, 0xc7, 0x24, 0x9f, 0xb6, 0x0c, 0x99, 0x3d, 0x99, 0xb2, 0x0c, 0xfb, 0x56, 0x9c, 0xbc, 0x18,
	0xa5, 0x65, 0x18, 0x7a, 0x62, 0x4e, 0x41, 0xc5, 0x76, 0xb6, 0x5c, 0xc6, 0x0e, 0x73, 0x61, 0x94,
	0x09, 0x80, 0xb0, 0xa3, 0xbb, 0x50, 0xa4, 0x23, 0x90, 0xe0, 0x61, 0x5d, 0x75, 0x5a, 0xee, 0xae,
	0xed, 0xb4, 0xf9, 0x21, 0x4b, 0x55, 0xd0, 0x29, 0x38, 0x71, 0xbf, 0x17, 0xb4, 0xdd, 0x08, 0x78,
	0xcb, 0x79, 0xbf, 0x87, 0x7b, 0xd8, 0x52, 0x73, 0xe8, 0x04, 0xcc, 0xf6, 0x15, 0x6e, 0x60, 0x27,
	0x50, 0xf3, 0xa8, 0x06, 0xe5, 0xc5, 0x56, 0x0b, 0x77, 0x03, 0x6c, 0xa9, 0x85, 0xdb, 0x85, 0x72,
	0x45, 0x05, 0xfd, 0x4f, 0x2b, 0x50, 0x93, 0x27, 0xf0, 0x88, 0xd2, 0x77, 0x3d, 0xa6, 0x75, 0xcf,
	0x0f, 0x13, 0x13, 0x39, 0x7e, 0xc8, 0xd6, 0xbc, 0xdb, 0xe5, 0x16, 0x00, 0x5d, 0xf3, 0xf7, 0xbb,
	0xd8, 0x19, 0x90, 0x81, 0x42, 0xfa, 0x99, 0xab, 0x28, 0x9d, 0xb9, 0xce, 0x42, 0xad, 0xe7, 0x78,
	0xd8, 0xb4, 0x9a, 0xd4, 0x3c, 0xa1, 0x8a, 0xa4, 0x68, 0x54, 0x19, 0x6c, 0x99, 0x9e, 0x01, 0x1b,
	0x50, 0xed, 0x98, 0x7e, 0xd0, 0xec, 0x75, 0x25, 0xc9, 0x01, 0x02, 0x62, 0xbe, 0x6f, 0x62, 0x66,
	0xf7, 0xa5, 0x55, 0x90, 0xc1, 0x28, 0xd3, 0x56, 0xd4, 0x58, 0x2a, 0x05, 0xe9, 0xfc, 0x6b, 0x50,
	0xe2, 0x30, 0x7e, 0x9e, 0x39, 0x95, 0x21, 0xe7, 0x86, 0xc0, 0x45, 0x57, 0x23, 0x67, 0x1e, 0xa4,
	0x0b, 0x20, 0x93, 0xb1, 0xc8, 0xd1, 0x77, 0x1d, 0x4e, 0x0a, 0xcb, 0x6c, 0x70, 0x73, 0xaa, 0x52,
	0x0e, 0x8f, 0x73, 0x84, 0x3e, 0xf1, 0x44, 0xaf, 0xc1, 0x89, 0x98, 0x27, 0x68, 0x60, 0xa7, 0x9a,
	0xeb, 0x44, 0x3e, 0xa0, 0x58, 0xc2, 0x46, 0x6c, 0xa1, 0x4d, 0x0e, 0x2e, 0xb4, 0x2f, 0x29, 0xa0,
	0x0e, 0xb8, 0xf6, 0x54, 0xda, 0xa9, 0xcb, 0x43, 0x55, 0x46, 0xdc, 0xdd, 0xb7, 0xf4, 0xe2, 0x93,
	0xc3, 0xc6, 0x85, 0x81, 0xa5, 0xb6, 0x9c, 0xa4, 0xa5, 0x74, 0x63, 0xda, 0xeb, 0x73, 0x16, 0xc6,
	0xd6, 0x18, 0x8a, 0xaf, 0xb1, 0x68, 0x00, 0x06, 0x47, 0x6e, 0x56, 0x1a, 0x80, 0xfe, 0x71, 0xeb,
	0x3b, 0xd0, 0xcd, 0x0d, 0x1c, 0xe8, 0xbe, 0xa9, 0x40, 0x23, 0xdb, 0xd1, 0xe6, 0xd7, 0x8f, 0xd1,
	0xd1, 0x58, 0x48, 0x3b, 0x75, 0x26, 0x7b, 0xdf, 0xc6, 0x1b, 0x8c, 0x53, 0xe9, 0x6e, 0x3c, 0x1f,
	0x7d, 0x9e, 0x7b, 0x0e, 0x65, 0xe7, 0xa8, 0x5f, 0x3f, 0x4e, 0xb9, 0x3a, 0x37, 0x42, 0x54, 0x68,
	0x3c, 0x56, 0xd4, 0x3e, 0x7f, 0xab, 0xaf, 0xdf, 0x4d, 0x0e, 0x20, 0x4d, 0x43, 0x95, 0x1f, 0x29,
	0x48, 0x29, 0xcb, 0x3a, 0xe1, 0x2b, 0x85, 0x02, 0x68, 0xd6, 0xc9, 0x5a, 0xaf, 0x13, 0xd8, 0x9c,
	0x1a, 0x01, 0xe6, 0x6f, 0x17, 0xca, 0x53, 0xea, 0x74, 0xb8, 0x83, 0xce, 0xa8, 0x48, 0xff, 0xbd,
	0x1c, 0x9c, 0xca, 0x10, 0xab, 0xa7, 0x31, 0x29, 0xaf, 0x0d, 0xd9, 0x5a, 0xd3, 0xf6, 0xd0, 0x44,
	0xfb, 0x31, 0x9f, 0x6c, 0x3f, 0x26, 0x1f, 0x34, 0x0a, 0x63, 0x1e, 0x34, 0x5e, 0x06, 0x24, 0x2f,
	0x43, 0x1e, 0x4e, 0x64, 0xda, 0x71, 0x46, 0x2a, 0x61, 0x0e, 0x0b, 0xfd, 0x8f, 0xf3, 0x30, 0xc1,
	0x86, 0xf5, 0xa3, 0x73, 0x8b, 0xad, 0x0d, 0x33, 0x3e, 0xc7, 0xb3, 0x4b, 0x66, 0xa1, 0x48, 0x2c,
	0x44, 0x66, 0x04, 0x96, 0x8d, 0x82, 0xed, 0xaf, 0x61, 0x74, 0x1a, 0xc0, 0xf6, 0x9b, 0x54, 0x21,
	0xb9, 0x1e, 0x77, 0x43, 0x55, 0x6c, 0x7f, 0x99, 0x01, 0xe2, 0x3a, 0xa1, 0xd4, 0xa7, 0x13, 0x3e,
	0x1c, 0x93, 0x56, 0x32, 0x26, 0x8a, 0xff, 0x27, 0xc6, 0xc4, 0xed, 0x42, 0x79, 0x42, 0x2d, 0xe9,
	0x3f, 0x03, 0x13, 0x8c, 0xe8, 0x11, 0x27, 0xf0, 0xc7, 0x92, 0x44, 0x34, 0xed, 0x98, 0xd8, 0x2f,
	0xb4, 0xfa, 0x5f, 0x2b, 0x70, 0x32, 0xd5, 0x5f, 0x34, 0xa6, 0x0f, 0x21, 0x9e, 0x6b, 0x91, 0x1b,
	0xc8, 0xb5, 0xf8, 0x68, 0x72, 0x55, 0x8e, 0xc3, 0x04, 0x4f, 0xd8, 0x60, 0x8b, 0x84, 0x7f, 0xe9,
	0xff, 0x90, 0x87, 0xd3, 0x99, 0x0e, 0xa8, 0x31, 0x7b, 0xf7, 0xda, 0x60, 0xef, 0xd2, 0x66, 0x67,
	0xc4, 0x04, 0x93, 0x7c, 0x56, 0x82, 0xc9, 0xb5, 0x84, 0xec, 0x91, 0xd4, 0xf6, 0xa4, 0xa4, 0x92,
	0xc4, 0x41, 0x2e, 0x8e, 0x3e, 0xc8, 0x13, 0x89, 0x83, 0x5c, 0x87, 0x92, 0x87, 0xf7, 0xdc, 0x1d,
	0x6c, 0xd1, 0xd5, 0x57, 0x36, 0xc4, 0x67, 0x46, 0x12, 0x4b, 0xf9, 0x69, 0x33, 0x81, 0x2a, 0xa3,
	0x64, 0x02, 0xe9, 0xff, 0xa1, 0xc0, 0x74, 0x9f, 0xa3, 0x19, 0x2d, 0x26, 0xcc, 0xac, 0x1e, 0x9b,
	0xd9, 0x94, 0x65, 0x15, 0x4d, 0xf7, 0x12, 0x00, 0x73, 0x88, 0x25, 0xb8, 0x22, 0x12, 0x12, 0x44,
	0x68, 0xbb, 0x2c, 0x37, 0x35, 0x10, 0x3f, 0xd1, 0x25, 0xa8, 0x6c, 0xf6, 0x1c, 0xab, 0x23, 0x65,
	0x77, 0xd6, 0x1e, 0x1f, 0x36, 0xca, 0x4b, 0x14, 0xb8, 0xba, 0x62, 0x94, 0x59, 0xb1, 0xec, 0x42,
	0x63, 0x6e, 0x15, 0xee, 0x42, 0x3b, 0x1d, 0xd3, 0x08, 0xec, 0xa4, 0x1d, 0x2d, 0x7d, 0xfd, 0xdb,
	0x0a, 0xa8, 0xfd, 0xfe, 0xee, 0x0f, 0xa3, 0xef, 0x7d, 0xb2, 0x97, 0x1b, 0x55, 0xf6, 0x4e, 0x03,
	0xff, 0x0a, 0xf7, 0x86, 0x9a, 0x51, 0x61, 0x10, 0x82, 0x7b, 0x15, 0xa6, 0xb9, 0x5d, 0xb0, 0x26,
	0xe5, 0x78, 0x0e, 0x49, 0xba, 0xd3, 0xbf, 0x77, 0x0c, 0xaa, 0x2c, 0xd9, 0x9f, 0xf9, 0xd5, 0xde,
	0x88, 0x65, 0x39, 0x26, 0xc6, 0x00, 0x24, 0xf4, 0xd1, 0xd2, 0x1c, 0x8f, 0x11, 0x1d, 0xd2, 0x74,
	0xf0, 0x3e, 0x3f, 0xbf, 0x14, 0x6d, 0xff, 0x1e, 0xde, 0xd7, 0xde, 0xa3, 0x79, 0xb5, 0xe1, 0x16,
	0xc1, 0x4e, 0x16, 0xd6, 0xc0, 0x7e, 0xa3, 0x1c, 0x65, 0xbf, 0xd1, 0xae, 0xc6, 0x89, 0xaf, 0xe0,
	0x0e, 0x26, 0xc4, 0x4f, 0x0f, 0x6e, 0x02, 0xd2, 0x94, 0x6b, 0xef, 0x00, 0x92, 0xbc, 0x6c, 0x82,
	0xa3, 0x45, 0xa8, 0x4a, 0x49, 0x06, 0x9c, 0xa1, 0x46, 0x12, 0x43, 0x52, 0x65, 0x43, 0xae, 0xa3,
	0xb5, 0x63, 0x84, 0x05, 0x37, 0x27, 0x65, 0x93, 0xab, 0xc4, 0x4d, 0xae, 0xa7, 0x32, 0xa9, 0xb4,
	0xb7, 0x61, 0x8a, 0x4b, 0x81, 0xe0, 0x5e, 0x3a, 0x7c, 0x29, 0xa3, 0x1f, 0xbe, 0x08, 0x21, 0x2e,
	0xd2, 0x12, 0x21, 0x2e, 0xc4, 0x59, 0x84, 0x78, 0x25, 0x43, 0xe0, 0x6a, 0xcb, 0x30, 0xc9, 0x76,
	0x6e, 0x41, 0xe7, 0x4a, 0xe8, 0xdd, 0x53, 0x86, 0x79, 0xf7, 0x84, 0x87, 0x8e, 0x10, 0x61, 0x1a,
	0x48, 0x22, 0xc2, 0x36, 0xfa, 0x2c, 0x22, 0xac, 0x8a, 0xc1, 0x31, 0xb5, 0x2a, 0x54, 0xee, 0xda,
	0x7e, 0x70, 0xcb, 0xb1, 0xb0, 0xa5, 0x7d, 0x53, 0x81, 0x13, 0x31, 0xdb, 0xdc, 0xf4, 0xc8, 0xa6,
	0x7c, 0x97, 0x08, 0x6c, 0xc2, 0x15, 0x46, 0x65, 0xe4, 0x2b, 0x8c, 0xcb, 0x7d, 0x69, 0x2a, 0x2c,
	0x23, 0x70, 0xa8, 0xb8, 0xc4, 0x2a, 0xdd, 0x2e, 0x94, 0xf3, 0x6a, 0x41, 0xfb, 0xdd, 0x09, 0x28,
	0xb3, 0xf0, 0x16, 0x95, 0x42, 0x79, 0x65, 0xbe, 0x3c, 0x6c, 0x65, 0x8a, 0x7a, 0xf2, 0x12, 0x25,
	0x6a, 0xd0, 0x0e, 0x3a, 0x38, 0x8c, 0x24, 0x90, 0x8f, 0x30, 0x3b, 0xb8, 0x10, 0x65, 0x07, 0xa7,
	0x7b, 0x20, 0xb5, 0x12, 0x14, 0x97, 0x4c, 0xdf, 0x6e, 0x69, 0x7f, 0xa9, 0xc0, 0x74, 0x98, 0xc2,
	0x4f, 0xf3, 0xf7, 0x3e, 0x8c, 0x95, 0x32, 0xb0, 0xfc, 0x73, 0x47, 0x32, 0x37, 0x25, 0xa1, 0xcf,
	0x8f, 0x21, 0xf4, 0x77, 0x00, 0xc5, 0x73, 0xf2, 0x37, 0x88, 0x4e, 0x3c, 0x22, 0xb1, 0xfb, 0x70,
	0x3c, 0x4e, 0x2c, 0x1c, 0xa6, 0x23, 0x12, 0xfc, 0xaa, 0x32, 0x98, 0xb3, 0xfd, 0xa3, 0x1c, 0x2e,
	0xfd, 0x03, 0x85, 0x9f, 0x59, 0xab, 0x50, 0xe2, 0x77, 0x26, 0xd4, 0x67, 0xc8, 0x01, 0x96, 0x46,
	0x0d, 0x88, 0x94, 0x44, 0xc9, 0x8e, 0x7d, 0xa2, 0xa2, 0xe6, 0x44, 0xb2, 0xdf, 0xe0, 0x80, 0xab,
	0x79, 0x34, 0x0f, 0xda, 0x60, 0x59, 0x58, 0xb7, 0x90, 0x96, 0x41, 0x59, 0xd4, 0xbe, 0xa7, 0xc0,
	0xec, 0x3a, 0xc6, 0xde, 0x46, 0x60, 0x06, 0x3d, 0x7f, 0xd9, 0x75, 0x1c, 0xdc, 0x22, 0xfa, 0xe2,
	0x1c, 0x94, 0xba, 0x18, 0x7b, 0x51, 0x04, 0x91, 0xde, 0xb1, 0x23, 0x98, 0xab, 0x2b, 0xc6, 0x04,
	0x29, 0x5a, 0xb5, 0xd0, 0x7b, 0x50, 0x09, 0x3c, 0xd3, 0xf1, 0xbb, 0xae, 0x17, 0x70, 0xa3, 0xe4,
	0xcd, 0x61, 0xeb, 0x2c, 0xa1, 0xb1, 0x85, 0x07, 0x82, 0x88, 0x11, 0xd1, 0xd3, 0xaf, 0x43, 0x25,
	0x84, 0xc7, 0x07, 0xac, 0x04, 0xf9, 0xbb, 0x8b, 0xf7, 0x54, 0x85, 0xfc, 0x78, 0x67, 0xf1, 0x9e,
	0x9a, 0x23, 0x43, 0xb8, 0xee, 0xb9, 0x8f, 0xec, 0x5d, 0x3b, 0x38, 0x50, 0xf3, 0xda, 0x9b, 0x70,
	0x3c, 0x6a, 0x86, 0x18, 0x22, 0xb4, 0x21, 0xdb, 0x69, 0x8f, 0xd4, 0xad, 0x78, 0xf5, 0x15, 0xdb,
	0x6f, 0x8d, 0x35, 0x2a, 0xda, 0xd7, 0x14, 0x38, 0x19, 0xd5, 0xa7, 0x43, 0xbe, 0xe8, 0xfb, 0x6e,
	0xcb, 0x36, 0x47, 0x1e, 0xd8, 0x4b, 0x50, 0x11, 0x2e, 0x35, 0x71, 0x65, 0x87, 0x9a, 0x6a, 0xdc,
	0x93, 0x76, 0xc7, 0x28, 0xf3, 0x10, 0xd0, 0x4e, 0xec, 0x72, 0x4f, 0x3e, 0xe3, 0x22, 0xf5, 0x9d,
	0x30, 0xb9, 0x88, 0x1a, 0x87, 0x8b, 0x96, 0x45, 0xaf, 0x9e, 0xc5, 0x12, 0xa0, 0x86, 0xa7, 0x11,
	0x31, 0x74, 0xfd, 0x2f, 0xf2, 0xc9, 0xce, 0x97, 0x19, 0x98, 0x24, 0xe0, 0x70, 0xd7, 0x60, 0x9e,
	0x65, 0x2e, 0x99, 0xfd, 0x96, 0x8b, 0x9a, 0x4b, 0x2a, 0xe4, 0x7b, 0xbd, 0x9a, 0x17, 0xf2, 0x3e,
	0x68, 0x60, 0xa8, 0x85, 0x84, 0x32, 0x51, 0xaf, 0x88, 0x8e, 0x03, 0x92, 0xd6, 0x82, 0xa8, 0x33,
	0x21, 0xe0, 0xf1, 0x5d, 0x5a, 0x2d, 0x89, 0xdc, 0xda, 0xd8, 0xa6, 0xab, 0x96, 0x05, 0x38, 0xb6,
	0x8d, 0xaa, 0x15, 0xa4, 0x42, 0x8d, 0x80, 0xc5, 0x76, 0xa1, 0x02, 0x6a, 0xc0, 0xa9, 0xfe, 0x4e,
	0x48, 0x9b, 0xa3, 0x5a, 0x13, 0xbd, 0x4c, 0x90, 0x7c, 0x75, 0x52, 0xac, 0xdc, 0x64, 0x79, 0x55,
	0xa7, 0x06, 0xcb, 0x65, 0x81, 0x54, 0xa7, 0xd1, 0x59, 0x38, 0x1d, 0x2f, 0xef, 0x13, 0x38, 0x55,
	0x45, 0x27, 0xe1, 0x98, 0x94, 0x74, 0x1c, 0x4d, 0xbf, 0x3a, 0xa3, 0x17, 0xca, 0x55, 0xb5, 0xaa,
	0x7f, 0x43, 0xa1, 0x7a, 0x3c, 0x64, 0x9f, 0xad, 0x57, 0xed, 0x63, 0xb1, 0x7b, 0xb2, 0x91, 0x25,
	0x53, 0x30, 0xd8, 0x07, 0xd9, 0x09, 0xbb, 0x66, 0x9b, 0x9d, 0x47, 0x0a, 0x06, 0xfd, 0xad, 0xad,
	0x89, 0x64, 0xab, 0x0f, 0xc5, 0x2e, 0x1d, 0x60, 0x8d, 0xba, 0x60, 0xb0, 0xf6, 0x6e, 0xc4, 0xda,
	0x70, 0xa3, 0x5d, 0xf2, 0xbe, 0xfb, 0xcd, 0xc0, 0x6d, 0xda, 0xf4, 0x5a, 0x1a, 0xcf, 0x02, 0x16,
	0xde, 0x77, 0xff, 0x81, 0xcb, 0xae, 0xab, 0x69, 0xcf, 0x8b, 0x1e, 0x64, 0x1b, 0xbf, 0xfa, 0x3b,
	0x00, 0x5c, 0x96, 0xde, 0xc6, 0xb1, 0x3c, 0xbd, 0x8f, 0x0b, 0x02, 0x47, 0xb3, 0x00, 0xf5, 0x9f,
	0x85, 0x2a, 0xd5, 0x95, 0x7c, 0x1a, 0x5e, 0x89, 0xfa, 0x7a, 0x1e, 0xa6, 0xfc, 0x6d, 0xb3, 0xd3,
	0x71, 0xf7, 0x9b, 0xb1, 0x07, 0x27, 0x26, 0x39, 0x74, 0x91, 0x02, 0x65, 0x06, 0x8a, 0x34, 0xce,
	0x9e, 0x65, 0x59, 0x48, 0xca, 0xd9, 0x60, 0xd8, 0xfa, 0x5d, 0x98, 0x8c, 0xad, 0x12, 0xed, 0xca,
	0x38, 0xc3, 0xcd, 0x2f, 0x26, 0x85, 0x69, 0x8d, 0x7f, 0x93, 0x83, 0x39, 0x71, 0xda, 0xeb, 0xf9,
	0xdb, 0xcb, 0xae, 0xb3, 0x65, 0xb7, 0x7b, 0x1e, 0xd6, 0xfe, 0x30, 0x17, 0x91, 0xed, 0x73, 0x89,
	0x2b, 0x19, 0x2f, 0x24, 0xe4, 0x32, 0x5f, 0x48, 0xc8, 0x0f, 0xbc, 0x90, 0x90, 0x9d, 0x1e, 0x55,
	0x38, 0x42, 0x7a, 0x54, 0x31, 0x25, 0x3d, 0xea, 0x3a, 0x9c, 0xf4, 0xb7, 0xdd, 0xfd, 0xe4, 0x86,
	0x58, 0xfc, 0xf9, 0x38, 0x41, 0x48, 0x6e, 0x88, 0x56, 0x8d, 0x37, 0xc4, 0xbc, 0x1b, 0x2a, 0x29,
	0x91, 0x1b, 0x8a, 0xc6, 0xf6, 0x33, 0xe1, 0xf1, 0x45, 0x08, 0xdf, 0x87, 0x95, 0x44, 0xbb, 0x04,
	0x93, 0xd1, 0x2d, 0x5d, 0xdc, 0x0d, 0xb4, 0x8b, 0x11, 0xe1, 0x21, 0xa7, 0xc2, 0x90, 0xc6, 0xd7,
	0x73, 0x50, 0x16, 0x2a, 0x5a, 0xfb, 0x7b, 0x29, 0xf1, 0xf6, 0x23, 0xb8, 0x1b, 0x78, 0x6d, 0x88,
	0x5b, 0x38, 0xcd, 0xff, 0x3b, 0xd6, 0x45, 0xc1, 0xd8, 0x0d, 0x51, 0x36, 0xa1, 0xe1, 0x37, 0xbb,
	0x64, 0xa1, 0xe9, 0x52, 0xb2, 0x69, 0xca, 0x61, 0x55, 0xff, 0xba, 0x02, 0x0d, 0x23, 0xee, 0x3c,
	0x97, 0xae, 0x9b, 0xb0, 0x77, 0x1a, 0xec, 0x58, 0x0e, 0xec, 0x28, 0xe9, 0xb4, 0x47, 0x3e, 0x03,
	0x87, 0xf3, 0xf5, 0x49, 0xa8, 0xc7, 0xd8, 0x0a, 0x16, 0x7b, 0x81, 0x7b, 0xcb, 0x31, 0x37, 0x3b,
	0x58, 0x3b, 0x17, 0xf1, 0x53, 0x87, 0x12, 0xa6, 0x40, 0x8b, 0x3f, 0x9b, 0x20, 0x3e, 0x23, 0x4a,
	0x6d, 0xa8, 0x2e, 0x99, 0x8e, 0x83, 0xbd, 0x4f, 0xf5, 0xdc, 0x00, 0x6b, 0x67, 0xa3, 0xca, 0xc7,
	0x61, 0xc2, 0x33, 0x1d, 0xcb, 0xdd, 0xe5, 0x75, 0xf9, 0x97, 0xf6, 0x9a, 0x18, 0xb7, 0x39, 0x28,
	0xbe, 0x4f, 0x2a, 0x89, 0xdb, 0x63, 0xf4, 0x83, 0x3e, 0xb1, 0xd3, 0x0b, 0xb6, 0x5d, 0xe1, 0xc9,
	0xe5, 0x5f, 0xfa, 0x1a, 0x20, 0xf1, 0xbc, 0xc3, 0xad, 0x47, 0xc4, 0x54, 0x5c, 0x31, 0x03, 0x53,
	0x56, 0xc6, 0x2f, 0x09, 0xba, 0xe7, 0x60, 0x12, 0x3f, 0xe2, 0xe9, 0x5f, 0x74, 0xfe, 0xd8, 0xfd,
	0xdb, 0x9a, 0x00, 0x92, 0x8a, 0xfa, 0x77, 0x72, 0x80, 0x58, 0xc0, 0xcb, 0x0c, 0xcc, 0x4d, 0xd3,
	0xc7, 0x2c, 0x84, 0x9e, 0x2d, 0xf0, 0xa3, 0x44, 0x2d, 0xce, 0xc3, 0x54, 0x94, 0x4e, 0x4b, 0x93,
	0x5b, 0x99, 0xa2, 0x9a, 0x0c, 0xa1, 0x34, 0xa7, 0x75, 0x0b, 0x4e, 0xb2, 0x90, 0x5f, 0xec, 0x2a,
	0x47, 0x53, 0xe4, 0x3c, 0x90, 0x93, 0xf1, 0x0b, 0x49, 0xab, 0x85, 0xf2, 0x1c, 0xdf, 0xc2, 0xcd,
	0x00, 0x1b, 0x2c, 0x3a, 0x29, 0xc3, 0xfd, 0x0d, 0x91, 0x0e, 0x21, 0xdc, 0x72, 0x52, 0xbc, 0xbb,
	0xca, 0x61, 0xf4, 0x11, 0x88, 0xec, 0xd4, 0xdc, 0x89, 0xac, 0xd4, 0x5c, 0xfd, 0x77, 0x14, 0x38,
	0x9e, 0xcc, 0xd2, 0x08, 0x43, 0x19, 0x0b, 0xb6, 0xe7, 0x06, 0x83, 0xed, 0xa9, 0xf1, 0x7d, 0x91,
	0x33, 0x50, 0x18, 0x3b, 0x67, 0x40, 0xff, 0xd5, 0x5c, 0x78, 0xeb, 0x7c, 0x03, 0x9b, 0x5e, 0x6b,
	0x5b, 0xfb, 0x8e, 0x12, 0xb3, 0x7e, 0xde, 0xef, 0x61, 0xef, 0x20, 0x12, 0x49, 0xec, 0xd1, 0x28,
	0xee, 0x26, 0x26, 0xdb, 0x0e, 0x73, 0x55, 0xf3, 0x47, 0x7d, 0x18, 0x68, 0x85, 0x77, 0xd5, 0xdc,
	0x0a, 0xb0, 0x27, 0x87, 0x16, 0x2a, 0x14, 0x42, 0x8b, 0xe7, 0xa0, 0xd8, 0x21, 0x27, 0x16, 0xca,
	0x6f, 0xd1, 0x60, 0x1f, 0xf2, 0x9b, 0x51, 0xc5, 0xd4, 0x37, 0xa3, 0x92, 0x9e, 0x7d, 0x9a, 0x48,
	0x7a, 0xf6, 0x49, 0x5b, 0x12, 0xe2, 0x7f, 0x9d, 0xd0, 0xf5, 0x7b, 0x1d, 0x7a, 0xd5, 0x68, 0x24,
	0x0f, 0x8b, 0xc0, 0xd7, 0x3f, 0x07, 0xd3, 0x0f, 0x0e, 0x36, 0xb1, 0xf7, 0x49, 0x97, 0x9c, 0x37,
	0xe9, 0xe8, 0x48, 0x0b, 0xac, 0x29, 0x5a, 0xd0, 0xa0, 0xbc, 0xed, 0xfa, 0x81, 0x64, 0x15, 0x84,
	0xdf, 0xe8, 0x59, 0x28, 0xd8, 0xdd, 0xbd, 0xab, 0xcc, 0xe6, 0x5a, 0x2a, 0x3f, 0x3e, 0x6c, 0x14,
	0x56, 0xd7, 0xf7, 0xae, 0x1a, 0x14, 0xca, 0x4b, 0xaf, 0xb1, 0xc4, 0xfd, 0xb0, 0xf4, 0x1a, 0x2d,
	0xbd, 0xa6, 0x7f, 0x56, 0x6a, 0x7e, 0x31, 0x08, 0xcc, 0xd6, 0xb6, 0x76, 0x21, 0x9a, 0x9b, 0x67,
	0xa1, 0xc2, 0x93, 0x4e, 0x31, 0xeb, 0x59, 0xc5, 0x88, 0x00, 0xda, 0x59, 0xc1, 0x9c, 0x94, 0xaa,
	0xaa, 0xc4, 0x53, 0x55, 0xb7, 0x93, 0xee, 0x64, 0x6a, 0xab, 0xf2, 0x2d, 0x91, 0xb2, 0xc7, 0x2f,
	0x5c, 0x8e, 0x71, 0x35, 0x33, 0xac, 0x13, 0x29, 0xc5, 0x4f, 0x08, 0xff, 0x38, 0xd5, 0xab, 0x74,
	0xd9, 0x8c, 0xa9, 0x56, 0xff, 0x3c, 0xc7, 0x48, 0x88, 0x93, 0x3d, 0xd1, 0x52, 0xe8, 0x53, 0x30,
	0x19, 0x5e, 0x60, 0x0b, 0x15, 0x5b, 0xf5, 0xca, 0x4b, 0x89, 0xf9, 0x94, 0xf7, 0xc3, 0xac, 0x31,
	0x4e, 0x83, 0x5f, 0xdf, 0xab, 0x09, 0x24, 0x4a, 0xb2, 0xcf, 0x2f, 0x95, 0x3b, 0x82, 0x5f, 0xea,
	0x12, 0xa8, 0x66, 0x87, 0x2c, 0x5a, 0x1a, 0x51, 0xa1, 0xdc, 0xf2, 0xe5, 0x3a, 0xcd, 0xe1, 0xa1,
	0x7b, 0xe7, 0x1c, 0x4c, 0x86, 0x19, 0x28, 0x3d, 0xf1, 0xb2, 0x0a, 0xcd, 0xae, 0x63, 0x59, 0x27,
	0x04, 0x86, 0x5e, 0xa6, 0x36, 0x7c, 0xb4, 0xb9, 0x31, 0x4c, 0x66, 0x89, 0xcd, 0xb4, 0xfa, 0x1e,
	0xe9, 0xb2, 0x88, 0x1e, 0x61, 0x86, 0x1b, 0x33, 0x99, 0xf8, 0xea, 0xa8, 0x52, 0x93, 0x8d, 0x81,
	0xf4, 0x1e, 0x54, 0xa5, 0xb1, 0xec, 0x9b, 0x09, 0x61, 0x65, 0x28, 0x71, 0x6f, 0xde, 0xa2, 0x90,
	0xa7, 0x37, 0xa0, 0x20, 0x8d, 0x75, 0x6a, 0xee, 0xbf, 0x3c, 0x51, 0x06, 0xad, 0xa1, 0xff, 0x89,
	0x02, 0x33, 0xe4, 0x80, 0xcc, 0xce, 0x9b, 0x4c, 0xe6, 0x7c, 0xed, 0xfd, 0xa8, 0xf5, 0xa7, 0xf2,
	0xa6, 0x5e, 0x82, 0x8a, 0x88, 0xbf, 0xc6, 0x3c, 0x07, 0x3c, 0x18, 0x7c, 0x87, 0xd8, 0x2b, 0xf4,
	0xd7, 0x8e, 0x76, 0x53, 0xf4, 0xe5, 0x08, 0xbe, 0x61, 0xbd, 0x0b, 0xa7, 0xa9, 0x2c, 0x13, 0x21,
	0x66, 0x7a, 0xdf, 0xf5, 0x64, 0xd6, 0xb4, 0xb7, 0x3e, 0x9c, 0x0e, 0x45, 0xb2, 0xff, 0x6d, 0x05,
	0xe6, 0xc3, 0x5d, 0x86, 0x65, 0xa2, 0x7c, 0x54, 0x6d, 0x4a, 0x4a, 0x33, 0xe6, 0x1f, 0x19, 0x25,
	0xad, 0x45, 0xb8, 0x48, 0x9e, 0x28, 0x50, 0x4f, 0xbb, 0x50, 0xac, 0xfd, 0xb2, 0xb4, 0xb9, 0x0c,
	0x7b, 0x13, 0xe0, 0x2c, 0xd4, 0x12, 0x1e, 0x02, 0xa8, 0x76, 0xa5, 0xe8, 0x6c, 0xdf, 0xdd, 0xfe,
	0xfc, 0xc0, 0xdd, 0xfe, 0x51, 0xc3, 0xd7, 0xda, 0x9b, 0xa2, 0xe7, 0xe9, 0x81, 0x54, 0x25, 0x3d,
	0x90, 0xaa, 0x7f, 0x49, 0x01, 0x2d, 0xfd, 0x6a, 0xb4, 0xf6, 0x93, 0xb1, 0xf3, 0x9e, 0xcc, 0xb2,
	0x32, 0xc6, 0x73, 0x04, 0xb9, 0x8c, 0xe7, 0x08, 0x42, 0x69, 0xf9, 0x56, 0x0e, 0x8e, 0xf5, 0x73,
	0xf2, 0x29, 0xb2, 0x6d, 0x6b, 0x77, 0xc7, 0x60, 0xe2, 0x0c, 0x54, 0xa3, 0x99, 0x10, 0xf7, 0x86,
	0x65, 0x90, 0xf6, 0x47, 0xd2, 0xe3, 0x67, 0x11, 0x4b, 0xcd, 0x81, 0x19, 0x9d, 0x0d, 0xcb, 0x56,
	0xa3, 0xa9, 0x3d, 0xcd, 0xd3, 0xf8, 0xb1, 0xdf, 0x34, 0x03, 0x6e, 0x40, 0x54, 0x38, 0x64, 0x31,
	0x40, 0x97, 0x41, 0x18, 0x64, 0xcd, 0x9e, 0x67, 0x73, 0xef, 0xde, 0xd4, 0xe3, 0xc3, 0x86, 0xf0,
	0x3b, 0x3c, 0x34, 0x56, 0x0d, 0x11, 0x5e, 0x7d, 0xe8, 0xd9, 0xe8, 0x32, 0xcc, 0x26, 0xdc, 0xce,
	0xe1, 0x41, 0x5c, 0x34, 0x78, 0x99, 0x46, 0xbf, 0x02, 0x10, 0x45, 0x6c, 0xc9, 0x79, 0x51, 0x1a,
	0x07, 0xfa, 0x1b, 0xa9, 0x90, 0x17, 0xe7, 0x87, 0x9a, 0x41, 0x7e, 0xea, 0xbf, 0xa0, 0x80, 0x96,
	0x9e, 0x60, 0xf6, 0x74, 0x77, 0x4f, 0x8e, 0x78, 0x82, 0xd1, 0xbf, 0x94, 0x63, 0x51, 0x77, 0xf9,
	0x42, 0xee, 0x8f, 0x82, 0x91, 0xb8, 0xe3, 0x36, 0x9f, 0xe9, 0xb8, 0x1d, 0xfa, 0x20, 0x47, 0x3c,
	0x7e, 0x5d, 0xec, 0x8b, 0x5f, 0x47, 0x31, 0xfa, 0x09, 0x29, 0x46, 0xaf, 0x7f, 0xa0, 0xc0, 0xb1,
	0xc4, 0xe7, 0x17, 0xe2, 0xac, 0x29, 0x99, 0xac, 0x45, 0x0f, 0x47, 0xe4, 0xc6, 0x79, 0x38, 0x22,
	0x7e, 0xf3, 0x26, 0x64, 0xc9, 0x81, 0x19, 0xc6, 0xcd, 0x3b, 0x76, 0xc0, 0xf3, 0x22, 0xfc, 0xf8,
	0x3e, 0xa5, 0x64, 0xed, 0x53, 0x68, 0x01, 0xf8, 0x33, 0x17, 0x7e, 0xb3, 0xbb, 0xc3, 0x17, 0x21,
	0x3b, 0xa2, 0x0b, 0xd6, 0x7d, 0x03, 0x38, 0xc6, 0xfa, 0x8e, 0xaf, 0xff, 0xa7, 0x02, 0x65, 0xc6,
	0x9c, 0x63, 0x69, 0xdf, 0x90, 0x34, 0xad, 0x74, 0x22, 0xaf, 0xf5, 0x85, 0x8f, 0x47, 0x7d, 0x22,
	0xeb, 0x36, 0x4c, 0x32, 0x3c, 0x91, 0x68, 0x9b, 0xa7, 0xb6, 0xf4, 0xf9, 0xf4, 0x90, 0xac, 0xd4,
	0x69, 0xfe, 0x0a, 0x18, 0x83, 0xfb, 0xda, 0x86, 0xd0, 0x1c, 0x03, 0x44, 0x95, 0x23, 0x13, 0xd5,
	0xff, 0x45, 0x81, 0xa9, 0xf8, 0xc6, 0xac, 0xfd, 0x95, 0x34, 0x04, 0x63, 0x08, 0xc1, 0xa8, 0x43,
	0x12, 0x09, 0x4b, 0x7e, 0x2c, 0x61, 0x91, 0xcd, 0xea, 0xc2, 0xd3, 0x98, 0xd5, 0xef, 0xf5, 0xbd,
	0x7b, 0xa2, 0x2d, 0x46, 0xfd, 0x3d, 0xea, 0x13, 0x28, 0xf2, 0x3e, 0x32, 0x97, 0x74, 0x05, 0x9c,
	0x9f, 0xa0, 0xb1, 0xef, 0xc7, 0xb6, 0xc5, 0x2a, 0x83, 0x85, 0xef, 0xe0, 0xf8, 0x2d, 0x57, 0x5c,
	0xa5, 0x33, 0xd8, 0x07, 0x81, 0x46, 0x2f, 0x9d, 0x56, 0x0c, 0xf6, 0x81, 0x5e, 0x84, 0x19, 0xfa,
	0xa3, 0x69, 0x61, 0xbf, 0xe5, 0xd9, 0xdd, 0x30, 0x75, 0xb0, 0x62, 0xa8, 0xb4, 0x60, 0x25, 0x82,
	0x23, 0x43, 0xba, 0xec, 0x5c, 0x4c, 0xbf, 0xc0, 0x96, 0xc4, 0xb7, 0x08, 0xe7, 0xf8, 0xb7, 0x9c,
	0xc0, 0x3b, 0x90, 0x2e, 0x49, 0xdf, 0x84, 0xc9, 0x58, 0x91, 0xd0, 0xfc, 0xac, 0x5f, 0xe4, 0x27,
	0xe1, 0x7c, 0xcf, 0xec, 0xf4, 0xc2, 0xfe, 0xd0, 0x8f, 0x1b, 0xb9, 0x37, 0x14, 0xfd, 0xf3, 0x7d,
	0x37, 0xd7, 0x97, 0x5d, 0x0b, 0xc7, 0xae, 0x64, 0x2b, 0xf1, 0x2b, 0xd9, 0xe8, 0x3c, 0x4c, 0xb5,
	0x5c, 0x0b, 0x37, 0x5b, 0xdb, 0x66, 0xa7, 0x43, 0x18, 0xe6, 0x34, 0x27, 0x09, 0x74, 0x59, 0x00,
	0x63, 0x9e, 0xaf, 0x7c, 0xba, 0xe7, 0xeb, 0xca, 0xb7, 0x2e, 0x82, 0x1a, 0x3e, 0x15, 0x22, 0x6e,
	0x5c, 0x7e, 0x51, 0x49, 0x7f, 0x18, 0x16, 0x5d, 0x4d, 0x3e, 0xcc, 0x24, 0x63, 0x2f, 0x88, 0xb3,
	0xee, 0x95, 0x31, 0x6b, 0x91, 0xd5, 0xdd, 0x4b, 0x7c, 0x87, 0x15, 0x25, 0xa6, 0xb1, 0x27, 0x20,
	0x86, 0x6d, 0xbf, 0x3c, 0x7a, 0x05, 0xd2, 0xec, 0x17, 0x94, 0xd4, 0x07, 0x50, 0xd1, 0xc7, 0x52,
	0x0c, 0xfc, 0x24, 0xe4, 0xb0, 0xfd, 0x57, 0xc7, 0xab, 0x44, 0x78, 0xc0, 0x7d, 0x6f, 0xa3, 0xa2,
	0x4b, 0x69, 0x34, 0x42, 0x94, 0xb0, 0xb9, 0x0b, 0xa3, 0xa0, 0x76, 0x3b, 0x07, 0xaf, 0x28, 0xa8,
	0xd5, 0xf7, 0x90, 0x6a, 0x72, 0x33, 0x31, 0x94, 0xec, 0x66, 0xfa, 0x51, 0x49, 0x5f, 0xbc, 0xa4,
	0x27, 0x08, 0xd1, 0x42, 0x72, 0xc4, 0xb4, 0x1f, 0x2f, 0x6c, 0xee, 0xa5, 0x91, 0xf1, 0x49, 0x9b,
	0xef, 0xca, 0xef, 0xf5, 0xa0, 0xe7, 0x87, 0xbc, 0x31, 0x23, 0xda, 0x78, 0x6e, 0x28, 0x1e, 0xa1,
	0xfd, 0xe9, 0xe8, 0xb1, 0x68, 0x94, 0x58, 0x43, 0x94, 0x86, 0x74, 0xf5, 0x21, 0x58, 0x6c, 0x32,
	0x7e, 0xaa, 0xff, 0x05, 0x68, 0xf4, 0x42, 0x5a, 0xbd, 0x08, 0x27, 0x6c, 0xe3, 0xe2, 0x48, 0xb8,
	0xdd, 0xce, 0xc1, 0x45, 0xe5, 0x15, 0x05, 0x05, 0x49, 0x61, 0xcb, 0xe4, 0x39, 0x19, 0xc4, 0xcb,
	0x9e, 0x93, 0x44, 0x7c, 0xd6, 0xc3, 0x66, 0x2c, 0x3c, 0x87, 0x12, 0x25, 0x48, 0x42, 0x08, 0xdb,
	0x39, 0x3f, 0x1c, 0x91, 0x35, 0xe0, 0x25, 0x85, 0x3c, 0x87, 0x77, 0x8b, 0xe1, 0x8d, 0xde, 0xad,
	0x10, 0x9f, 0x88, 0x43, 0x67, 0xf0, 0x3d, 0x16, 0x34, 0x94, 0x02, 0xc1, 0x0a, 0xdb, 0x7b, 0x61,
	0x44, 0x6c, 0x2e, 0xd8, 0x51, 0xe8, 0x34, 0x59, 0xb0, 0xa3, 0xf2, 0x6c, 0xc1, 0x8e, 0xe1, 0x11,
	0xda, 0xad, 0xbe, 0xe0, 0x65, 0xb2, 0x36, 0x88, 0xa1, 0x64, 0x6b, 0x83, 0x7e, 0x54, 0xd2, 0xc8,
	0xa3, 0xe4, 0x90, 0x26, 0x7a, 0x25, 0x83, 0x40, 0x0c, 0x33, 0x6c, 0x72, 0x61, 0x8c, 0x1a, 0xa4,
	0xe5, 0xad, 0xfe, 0x88, 0x1f, 0x7a, 0x21, 0x2b, 0xf7, 0xa8, 0x4f, 0xff, 0x5c, 0x1c, 0x09, 0x97,
	0x0f, 0x63, 0x2c, 0xfe, 0x97, 0x3c, 0x8c, 0x31, 0x94, 0xec, 0x61, 0xec, 0x47, 0x25, 0x8d, 0x3c,
	0x88, 0xe2, 0x83, 0xc9, 0x4a, 0x48, 0x94, 0x66, 0x2b, 0x21, 0x09, 0x2b, 0x41, 0x96, 0x69, 0x6c,
	0x60, 0xa8, 0x2c, 0x13, 0xac, 0xd1, 0x65, 0x99, 0x63, 0x93, 0xd6, 0xdc, 0x84, 0xff, 0x74, 0x80,
	0x5e, 0x1e, 0xba, 0xf8, 0x08, 0x5a, 0xd8, 0xde, 0x8b, 0xa3, 0xa2, 0x27, 0x74, 0x8f, 0x66, 0x60,
	0x0e, 0xed, 0x1e, 0xc1, 0x1a, 0xbd, 0x7b, 0x1c, 0x3b, 0xa1, 0xb5, 0xb5, 0x5e, 0x80, 0x87, 0xb7,
	0x46, 0xb0, 0x46, 0x6f, 0x8d, 0x63, 0x93, 0xd6, 0x7e, 0x65, 0x78, 0x64, 0x14, 0xdd, 0x4c, 0xa2,
	0x37, 0xa4, 0x52, 0xc8, 0xcc, 0xf5, 0xa3, 0x55, 0x26, 0xbc, 0x11, 0x7b, 0x32, 0x2d, 0x3c, 0x9a,
	0x6c, 0x4f, 0xa6, 0x61, 0x67, 0xdb, 0x93, 0x19, 0xb5, 0x08, 0x1b, 0x9f, 0x8d, 0x85, 0x56, 0x93,
	0xb7, 0x1f, 0x09, 0x21, 0x7b, 0xfb, 0x89, 0x23, 0x12, 0xf2, 0x41, 0x52, 0x40, 0x35, 0x79, 0xf3,
	0x19, 0xc4, 0xcb, 0xde, 0x7c, 0x12, 0xf1, 0x43, 0x13, 0x2e, 0x16, 0x7e, 0x4b, 0xd6, 0x36, 0x31,
	0x94, 0x6c, 0x6d, 0xd3, 0x8f, 0x4a, 0xba, 0xf6, 0x7e, 0x82, 0xe3, 0x3d, 0x79, 0xa5, 0x0e, 0xa0,
	0x65, 0xaf, 0xd4, 0x24, 0x74, 0xd6, 0xaf, 0x9d, 0x81, 0xd0, 0x19, 0x4a, 0xa4, 0xd0, 0x87, 0x14,
	0x36, 0x77, 0x69, 0x34, 0x64, 0xd6, 0x98, 0x3d, 0x10, 0x28, 0x1b, 0xd2, 0x18, 0x43, 0x1a, 0xb1,
	0xb1, 0x10, 0x59, 0xac, 0x85, 0xb4, 0x27, 0xd6, 0x92, 0xd7, 0x42, 0x1a, 0x76, 0xf6, 0x5a, 0xc8,
	0xa8, 0xc5, 0x67, 0x74, 0xe0, 0xc5, 0xb4, 0xe4, 0x19, 0x1d, 0x40, 0xcb, 0x9e, 0xd1, 0x24, 0x74,
	0x36, 0xc8, 0xbd, 0xc4, 0x27, 0xcb, 0x92, 0x8f, 0x73, 0x09, 0x88, 0xd9, 0xc7, 0xb9, 0xe4, 0x0a,
	0xe2, 0x38, 0x97, 0xf2, 0x6c, 0x5b, 0xf2, 0x71, 0x2e, 0x05, 0x39, 0xfb, 0x38, 0x97, 0x5e, 0x89,
	0x6f, 0x05, 0xfd, 0xf1, 0xcb, 0xe4, 0xad, 0xa0, 0x1f, 0x2b, 0x7b, 0x2b, 0x48, 0xc0, 0x26, 0xad,
	0x7d, 0x4d, 0x19, 0x12, 0x62, 0x42, 0xd7, 0x53, 0xa9, 0xa5, 0x55, 0x09, 0x19, 0x79, 0xfd, 0x28,
	0x55, 0x09, 0x57, 0xdf, 0x18, 0x1a, 0x85, 0x42, 0x37, 0xd2, 0x68, 0xa7, 0xd7, 0x09, 0xf9, 0x7a,
	0xe3, 0x48, 0x75, 0x99, 0x64, 0x7e, 0x36, 0x16, 0xcf, 0x4c, 0xde, 0x18, 0x24, 0x84, 0xec, 0x8d,
	0x21, 0x8e, 0xc8, 0x6d, 0x35, 0xe1, 0x55, 0x45, 0x19, 0x6f, 0x9d, 0x39, 0x56, 0xb6, 0xad, 0x26,
	0x61, 0xf1, 0x63, 0x75, 0xc2, 0x8b, 0xc8, 0x0b, 0x19, 0x72, 0x22, 0xe1, 0x65, 0x6f, 0x37, 0x89,
	0xf8, 0xdc, 0xb4, 0x8d, 0x3f, 0x94, 0x7c, 0x29, 0xa3, 0x3a, 0x43, 0x19, 0xe2, 0x2f, 0xe8, 0x43,
	0x0d, 0x35, 0x64, 0x4a, 0xfc, 0x2f, 0x45, 0x43, 0xa6, 0x60, 0x0f, 0xd1, 0x90, 0xe9, 0xb5, 0x08,
	0x1b, 0x5f, 0xc9, 0x8c, 0xc8, 0xa1, 0x6b, 0xa3, 0x90, 0x8c, 0xf0, 0x43, 0x56, 0xae, 0x8e, 0x5d,
	0x8f, 0x30, 0xf3, 0xb9, 0x94, 0x98, 0x1c, 0x7a, 0x75, 0x14, 0x72, 0x14, 0x35, 0xe4, 0xe0, 0xf2,
	0x38, 0x55, 0xe8, 0x02, 0x59, 0xfa, 0xc4, 0x9f, 0x3d, 0x9e, 0x57, 0xbe, 0xfb, 0x78, 0x5e, 0xf9,
	0xdb, 0xc7, 0xf3, 0xca, 0x07, 0x3f, 0x98, 0x7f, 0xe6, 0xbb, 0x3f, 0x98, 0x7f, 0xe6, 0xfb, 0x3f,
	0x98, 0x7f, 0xe6, 0xdd, 0xe7, 0x19, 0xad, 0x00, 0xb7, 0xb6, 0xd9, 0xbf, 0x80, 0xbb, 0xdc, 0x76,
	0x2f, 0x77, 0x77, 0xda, 0x7d, 0xff, 0x6e, 0x6e, 0x73, 0x82, 0x66, 0x49, 0x7c, 0xec, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x3b, 0x03, 0xbe, 0x29, 0x96, 0x6e, 0x00, 0x00,
}

func (m *PaginatedInteractionsOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginatedInteractionsOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaginatedInteractionsOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoBulk {
		i--
		if m.NoBulk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.OldestToNewest {
		i--
		if m.OldestToNewest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ConversationPK) > 0 {
		i -= len(m.ConversationPK)
		copy(dAtA[i:], m.ConversationPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RefCID) > 0 {
		i -= len(m.RefCID)
		copy(dAtA[i:], m.RefCID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.RefCID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConversationOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationOpen_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationOpen_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationOpen_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationOpen_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationOpen_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationOpen_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationClose_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationClose_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationClose_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationClose_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationClose_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationClose_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationLoad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationLoad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationLoad_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationLoad_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationLoad_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationLoad_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationLoad_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationLoad_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationMute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationMute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationMute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationMute_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationMute_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationMute_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MuteForever {
		i--
		if m.MuteForever {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Unmute {
		i--
		if m.Unmute {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MutedUntil != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.MutedUntil))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationMute_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationMute_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationMute_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EchoTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EchoTest_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoTest_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoTest_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TriggerError {
		i--
		if m.TriggerError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Echo) > 0 {
		i -= len(m.Echo)
		copy(dAtA[i:], m.Echo)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Echo)))
		i--
		dAtA[i] = 0x12
	}
	if m.Delay != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Delay))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EchoTest_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoTest_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoTest_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Echo) > 0 {
		i -= len(m.Echo)
		copy(dAtA[i:], m.Echo)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Echo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EchoDuplexTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoDuplexTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoDuplexTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EchoDuplexTest_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoDuplexTest_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoDuplexTest_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TriggerError {
		i--
		if m.TriggerError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Echo) > 0 {
		i -= len(m.Echo)
		copy(dAtA[i:], m.Echo)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Echo)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *EchoDuplexTest_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoDuplexTest_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoDuplexTest_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Echo) > 0 {
		i -= len(m.Echo)
		copy(dAtA[i:], m.Echo)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Echo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstanceShareableBertyID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceShareableBertyID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceShareableBertyID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InstanceShareableBertyID_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceShareableBertyID_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceShareableBertyID_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Passphrase) > 0 {
		i -= len(m.Passphrase)
		copy(dAtA[i:], m.Passphrase)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Passphrase)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Reset_ {
		i--
		if m.Reset_ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InstanceShareableBertyID_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceShareableBertyID_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceShareableBertyID_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WebURL) > 0 {
		i -= len(m.WebURL)
		copy(dAtA[i:], m.WebURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.WebURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InternalURL) > 0 {
		i -= len(m.InternalURL)
		copy(dAtA[i:], m.InternalURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.InternalURL)))
		i--
		dAtA[i] = 0x12
	}
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareableBertyGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareableBertyGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareableBertyGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShareableBertyGroup_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareableBertyGroup_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareableBertyGroup_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShareableBertyGroup_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareableBertyGroup_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareableBertyGroup_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WebURL) > 0 {
		i -= len(m.WebURL)
		copy(dAtA[i:], m.WebURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.WebURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InternalURL) > 0 {
		i -= len(m.InternalURL)
		copy(dAtA[i:], m.InternalURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.InternalURL)))
		i--
		dAtA[i] = 0x12
	}
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DevShareInstanceBertyID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevShareInstanceBertyID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevShareInstanceBertyID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DevShareInstanceBertyID_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevShareInstanceBertyID_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevShareInstanceBertyID_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Reset_ {
		i--
		if m.Reset_ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DevShareInstanceBertyID_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevShareInstanceBertyID_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevShareInstanceBertyID_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DevStreamLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevStreamLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevStreamLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DevStreamLogs_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevStreamLogs_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevStreamLogs_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DevStreamLogs_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevStreamLogs_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevStreamLogs_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Line) > 0 {
		i -= len(m.Line)
		copy(dAtA[i:], m.Line)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Line)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParseDeepLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseDeepLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseDeepLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ParseDeepLink_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseDeepLink_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseDeepLink_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Passphrase) > 0 {
		i -= len(m.Passphrase)
		copy(dAtA[i:], m.Passphrase)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Passphrase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParseDeepLink_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseDeepLink_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseDeepLink_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BertyLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BertyLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BertyLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BertyMessageRef != nil {
		{
			size, err := m.BertyMessageRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Encrypted != nil {
		{
			size, err := m.Encrypted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BertyGroup != nil {
		{
			size, err := m.BertyGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BertyID != nil {
		{
			size, err := m.BertyID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BertyLink_Encrypted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BertyLink_Encrypted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BertyLink_Encrypted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupLinkKeySig) > 0 {
		i -= len(m.GroupLinkKeySig)
		copy(dAtA[i:], m.GroupLinkKeySig)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupLinkKeySig)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.GroupSignPub) > 0 {
		i -= len(m.GroupSignPub)
		copy(dAtA[i:], m.GroupSignPub)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupSignPub)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.GroupType != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.GroupType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.GroupSecretSig) > 0 {
		i -= len(m.GroupSecretSig)
		copy(dAtA[i:], m.GroupSecretSig)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupSecretSig)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.GroupSecret) > 0 {
		i -= len(m.GroupSecret)
		copy(dAtA[i:], m.GroupSecret)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupSecret)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.GroupPublicKey) > 0 {
		i -= len(m.GroupPublicKey)
		copy(dAtA[i:], m.GroupPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPublicKey)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ContactAccountPK) > 0 {
		i -= len(m.ContactAccountPK)
		copy(dAtA[i:], m.ContactAccountPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ContactAccountPK)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ContactPublicRendezvousSeed) > 0 {
		i -= len(m.ContactPublicRendezvousSeed)
		copy(dAtA[i:], m.ContactPublicRendezvousSeed)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ContactPublicRendezvousSeed)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BertyLink_BertyMessageRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BertyLink_BertyMessageRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BertyLink_BertyMessageRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageID) > 0 {
		i -= len(m.MessageID)
		copy(dAtA[i:], m.MessageID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.MessageID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountID) > 0 {
		i -= len(m.AccountID)
		copy(dAtA[i:], m.AccountID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendContactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendContactRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendContactRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SendContactRequest_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendContactRequest_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendContactRequest_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnMetadata) > 0 {
		i -= len(m.OwnMetadata)
		copy(dAtA[i:], m.OwnMetadata)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.OwnMetadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x12
	}
	if m.BertyID != nil {
		{
			size, err := m.BertyID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendContactRequest_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendContactRequest_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendContactRequest_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BertyID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BertyID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BertyID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountPK) > 0 {
		i -= len(m.AccountPK)
		copy(dAtA[i:], m.AccountPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicRendezvousSeed) > 0 {
		i -= len(m.PublicRendezvousSeed)
		copy(dAtA[i:], m.PublicRendezvousSeed)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicRendezvousSeed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BertyGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BertyGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BertyGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetCID) > 0 {
		i -= len(m.TargetCID)
		copy(dAtA[i:], m.TargetCID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TargetCID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SentDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.SentDate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_UserMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_UserMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_UserMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_GroupInvitation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_GroupInvitation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_GroupInvitation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_SetGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_SetGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_SetGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_SetUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_SetUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_SetUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_Acknowledge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_Acknowledge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_Acknowledge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AppMessage_AccountDirectoryServiceRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_AccountDirectoryServiceRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_AccountDirectoryServiceRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DirectoryRecordUnregisterToken) > 0 {
		i -= len(m.DirectoryRecordUnregisterToken)
		copy(dAtA[i:], m.DirectoryRecordUnregisterToken)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DirectoryRecordUnregisterToken)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DirectoryRecordToken) > 0 {
		i -= len(m.DirectoryRecordToken)
		copy(dAtA[i:], m.DirectoryRecordToken)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DirectoryRecordToken)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExpirationDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ExpirationDate))
		i--
		dAtA[i] = 0x20
	}
	if m.RegistrationDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.RegistrationDate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IdentifierProofIssuer) > 0 {
		i -= len(m.IdentifierProofIssuer)
		copy(dAtA[i:], m.IdentifierProofIssuer)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.IdentifierProofIssuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DirectoryRecordToken) > 0 {
		i -= len(m.DirectoryRecordToken)
		copy(dAtA[i:], m.DirectoryRecordToken)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DirectoryRecordToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.RemovalDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.RemovalDate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IdentifierProofIssuer) > 0 {
		i -= len(m.IdentifierProofIssuer)
		copy(dAtA[i:], m.IdentifierProofIssuer)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.IdentifierProofIssuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_ServiceAddToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_ServiceAddToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_ServiceAddToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AuthenticationURL) > 0 {
		i -= len(m.AuthenticationURL)
		copy(dAtA[i:], m.AuthenticationURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AuthenticationURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SupportedServices) > 0 {
		for iNdEx := len(m.SupportedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupportedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_ServiceRemoveToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_ServiceRemoveToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_ServiceRemoveToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_PushSetDeviceToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_PushSetDeviceToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_PushSetDeviceToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceToken != nil {
		{
			size, err := m.DeviceToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_PushSetServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_PushSetServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_PushSetServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppMessage_PushSetMemberToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage_PushSetMemberToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMessage_PushSetMemberToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MemberToken != nil {
		{
			size, err := m.MemberToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemInfo_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemInfo_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemInfo_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemInfo_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemInfo_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemInfo_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Messenger != nil {
		{
			size, err := m.Messenger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemInfo_Messenger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemInfo_Messenger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemInfo_Messenger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DB != nil {
		{
			size, err := m.DB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ProtocolInSameProcess {
		i--
		if m.ProtocolInSameProcess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Warns) > 0 {
		for iNdEx := len(m.Warns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Warns[iNdEx])
			copy(dAtA[i:], m.Warns[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Warns[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Process != nil {
		{
			size, err := m.Process.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemInfo_DB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemInfo_DB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemInfo_DB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PushLocalDeviceSharedToken != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.PushLocalDeviceSharedToken))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PushServerRecord != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.PushServerRecord))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PushDeviceToken != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.PushDeviceToken))
		i--
		dAtA[i] = 0x78
	}
	if m.AccountDirectoryServiceRecord != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.AccountDirectoryServiceRecord))
		i--
		dAtA[i] = 0x70
	}
	if m.AccountVerifiedCredentials != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.AccountVerifiedCredentials))
		i--
		dAtA[i] = 0x68
	}
	if m.PushMemberToken != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.PushMemberToken))
		i--
		dAtA[i] = 0x60
	}
	if m.MetadataEvents != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.MetadataEvents))
		i--
		dAtA[i] = 0x50
	}
	if m.ConversationReplicationInfo != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ConversationReplicationInfo))
		i--
		dAtA[i] = 0x48
	}
	if m.ServiceTokens != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ServiceTokens))
		i--
		dAtA[i] = 0x40
	}
	if m.ServiceTokenSupportedServiceRecords != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ServiceTokenSupportedServiceRecords))
		i--
		dAtA[i] = 0x38
	}
	if m.Devices != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Devices))
		i--
		dAtA[i] = 0x30
	}
	if m.Members != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Members))
		i--
		dAtA[i] = 0x28
	}
	if m.Interactions != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Interactions))
		i--
		dAtA[i] = 0x20
	}
	if m.Conversations != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Conversations))
		i--
		dAtA[i] = 0x18
	}
	if m.Contacts != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Contacts))
		i--
		dAtA[i] = 0x10
	}
	if m.Accounts != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Accounts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConversationJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationJoin_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationJoin_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationJoin_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Passphrase) > 0 {
		i -= len(m.Passphrase)
		copy(dAtA[i:], m.Passphrase)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Passphrase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationJoin_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationJoin_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationJoin_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DebugAuthServiceSetToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugAuthServiceSetToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugAuthServiceSetToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DebugAuthServiceSetToken_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugAuthServiceSetToken_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugAuthServiceSetToken_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationURL) > 0 {
		i -= len(m.AuthenticationURL)
		copy(dAtA[i:], m.AuthenticationURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AuthenticationURL)))
		i--
		dAtA[i] = 0x12
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebugAuthServiceSetToken_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugAuthServiceSetToken_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugAuthServiceSetToken_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServicesTokenList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesTokenList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesTokenList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServicesTokenList_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesTokenList_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesTokenList_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServicesTokenList_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesTokenList_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesTokenList_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AuthServiceCompleteFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthServiceCompleteFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthServiceCompleteFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AuthServiceCompleteFlow_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthServiceCompleteFlow_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthServiceCompleteFlow_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallbackURL) > 0 {
		i -= len(m.CallbackURL)
		copy(dAtA[i:], m.CallbackURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.CallbackURL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthServiceCompleteFlow_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthServiceCompleteFlow_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthServiceCompleteFlow_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthServiceInitFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthServiceInitFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthServiceInitFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AuthServiceInitFlow_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthServiceInitFlow_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthServiceInitFlow_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Services[iNdEx])
			copy(dAtA[i:], m.Services[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Services[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AuthURL) > 0 {
		i -= len(m.AuthURL)
		copy(dAtA[i:], m.AuthURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AuthURL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthServiceInitFlow_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthServiceInitFlow_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthServiceInitFlow_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecureURL {
		i--
		if m.SecureURL {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DirectoryServiceRecords) > 0 {
		for iNdEx := len(m.DirectoryServiceRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DirectoryServiceRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.VerifiedCredentials) > 0 {
		for iNdEx := len(m.VerifiedCredentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerifiedCredentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.HidePushPreviews {
		i--
		if m.HidePushPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.HideInAppNotifications {
		i--
		if m.HideInAppNotifications {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.MutedUntil != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.MutedUntil))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PushServerRecords) > 0 {
		for iNdEx := len(m.PushServerRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PushServerRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.PushDeviceToken != nil {
		{
			size, err := m.PushDeviceToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.AutoSharePushTokenFlag {
		i--
		if m.AutoSharePushTokenFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ReplicateNewGroupsAutomatically {
		i--
		if m.ReplicateNewGroupsAutomatically {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ServiceTokens) > 0 {
		for iNdEx := len(m.ServiceTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceTokenSupportedService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceTokenSupportedService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceTokenSupportedService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ServiceTokenSupportedServiceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceTokenSupportedServiceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceTokenSupportedServiceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AuthenticationURL) > 0 {
		i -= len(m.AuthenticationURL)
		copy(dAtA[i:], m.AuthenticationURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AuthenticationURL)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SupportedServices) > 0 {
		for iNdEx := len(m.SupportedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupportedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountPK) > 0 {
		i -= len(m.AccountPK)
		copy(dAtA[i:], m.AccountPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if m.MetadataEventType != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.MetadataEventType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CID) > 0 {
		i -= len(m.CID)
		copy(dAtA[i:], m.CID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.CID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutOfStoreMessage {
		i--
		if m.OutOfStoreMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.TargetCID) > 0 {
		i -= len(m.TargetCID)
		copy(dAtA[i:], m.TargetCID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TargetCID)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.DevicePublicKey) > 0 {
		i -= len(m.DevicePublicKey)
		copy(dAtA[i:], m.DevicePublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DevicePublicKey)))
		i--
		dAtA[i] = 0x62
	}
	if m.Acknowledged {
		i--
		if m.Acknowledged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.SentDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.SentDate))
		i--
		dAtA[i] = 0x48
	}
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.MemberPublicKey) > 0 {
		i -= len(m.MemberPublicKey)
		copy(dAtA[i:], m.MemberPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.MemberPublicKey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsMine {
		i--
		if m.IsMine {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CID) > 0 {
		i -= len(m.CID)
		copy(dAtA[i:], m.CID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.CID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Contact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InfoDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.InfoDate))
		i--
		dAtA[i] = 0x50
	}
	if m.SentDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.SentDate))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.CreatedDate))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Conversation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conversation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Conversation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PushMemberTokens) > 0 {
		for iNdEx := len(m.PushMemberTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PushMemberTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.PushLocalDeviceSharedTokens) > 0 {
		for iNdEx := len(m.PushLocalDeviceSharedTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PushLocalDeviceSharedTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.MutedUntil != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.MutedUntil))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.LocalMemberPublicKey) > 0 {
		i -= len(m.LocalMemberPublicKey)
		copy(dAtA[i:], m.LocalMemberPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.LocalMemberPublicKey)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.InfoDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.InfoDate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.ReplicationInfo) > 0 {
		for iNdEx := len(m.ReplicationInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplicationInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.CreatedDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.CreatedDate))
		i--
		dAtA[i] = 0x68
	}
	if len(m.LocalDevicePublicKey) > 0 {
		i -= len(m.LocalDevicePublicKey)
		copy(dAtA[i:], m.LocalDevicePublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.LocalDevicePublicKey)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AccountMemberPublicKey) > 0 {
		i -= len(m.AccountMemberPublicKey)
		copy(dAtA[i:], m.AccountMemberPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountMemberPublicKey)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ContactPublicKey) > 0 {
		i -= len(m.ContactPublicKey)
		copy(dAtA[i:], m.ContactPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ContactPublicKey)))
		i--
		dAtA[i] = 0x42
	}
	if m.LastUpdate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.LastUpdate))
		i--
		dAtA[i] = 0x38
	}
	if m.UnreadCount != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.UnreadCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationReplicationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationReplicationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationReplicationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReplicationServer) > 0 {
		i -= len(m.ReplicationServer)
		copy(dAtA[i:], m.ReplicationServer)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ReplicationServer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AuthenticationURL) > 0 {
		i -= len(m.AuthenticationURL)
		copy(dAtA[i:], m.AuthenticationURL)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AuthenticationURL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MemberPublicKey) > 0 {
		i -= len(m.MemberPublicKey)
		copy(dAtA[i:], m.MemberPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.MemberPublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CID) > 0 {
		i -= len(m.CID)
		copy(dAtA[i:], m.CID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.CID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsMe {
		i--
		if m.IsMe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsCreator {
		i--
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.InfoDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.InfoDate))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberPublicKey) > 0 {
		i -= len(m.MemberPublicKey)
		copy(dAtA[i:], m.MemberPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.MemberPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountVerifiedCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountVerifiedCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountVerifiedCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExpirationDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ExpirationDate))
		i--
		dAtA[i] = 0x20
	}
	if m.RegistrationDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.RegistrationDate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountPK) > 0 {
		i -= len(m.AccountPK)
		copy(dAtA[i:], m.AccountPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountDirectoryServiceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDirectoryServiceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDirectoryServiceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DirectoryRecordUnregisterToken) > 0 {
		i -= len(m.DirectoryRecordUnregisterToken)
		copy(dAtA[i:], m.DirectoryRecordUnregisterToken)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DirectoryRecordUnregisterToken)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DirectoryRecordToken) > 0 {
		i -= len(m.DirectoryRecordToken)
		copy(dAtA[i:], m.DirectoryRecordToken)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DirectoryRecordToken)))
		i--
		dAtA[i] = 0x42
	}
	if m.Revoked {
		i--
		if m.Revoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ExpirationDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ExpirationDate))
		i--
		dAtA[i] = 0x30
	}
	if m.RegistrationDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.RegistrationDate))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IdentifierProofIssuer) > 0 {
		i -= len(m.IdentifierProofIssuer)
		copy(dAtA[i:], m.IdentifierProofIssuer)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.IdentifierProofIssuer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountPK) > 0 {
		i -= len(m.AccountPK)
		copy(dAtA[i:], m.AccountPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushDeviceToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushDeviceToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushDeviceToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BundleID) > 0 {
		i -= len(m.BundleID)
		copy(dAtA[i:], m.BundleID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.BundleID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TokenType != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccountPK) > 0 {
		i -= len(m.AccountPK)
		copy(dAtA[i:], m.AccountPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushServerRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushServerRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushServerRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerKey) > 0 {
		i -= len(m.ServerKey)
		copy(dAtA[i:], m.ServerKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountPK) > 0 {
		i -= len(m.AccountPK)
		copy(dAtA[i:], m.AccountPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsNew {
		i--
		if m.IsNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_ConversationUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_ConversationUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_ConversationUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_ConversationDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_ConversationDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_ConversationDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_InteractionUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_InteractionUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_InteractionUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interaction != nil {
		{
			size, err := m.Interaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_InteractionDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_InteractionDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_InteractionDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CID) > 0 {
		i -= len(m.CID)
		copy(dAtA[i:], m.CID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.CID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_ContactUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_ContactUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_ContactUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_AccountUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_AccountUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_AccountUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_MemberUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_MemberUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_MemberUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_DeviceUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_DeviceUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_DeviceUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_ListEnded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_ListEnded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_ListEnded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StreamEvent_ConversationPartialLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_ConversationPartialLoad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_ConversationPartialLoad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interactions) > 0 {
		for iNdEx := len(m.Interactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ConversationPK) > 0 {
		i -= len(m.ConversationPK)
		copy(dAtA[i:], m.ConversationPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_Notified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_Notified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_Notified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_Notified_Basic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_Notified_Basic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_Notified_Basic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StreamEvent_Notified_MessageReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_Notified_MessageReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_Notified_MessageReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Interaction != nil {
		{
			size, err := m.Interaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_Notified_ContactRequestSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_Notified_ContactRequestSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_Notified_ContactRequestSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_Notified_ContactRequestReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_Notified_ContactRequestReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_Notified_ContactRequestReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_Notified_GroupInvitation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_Notified_GroupInvitation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_Notified_GroupInvitation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_PeerStatusConnected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_PeerStatusConnected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_PeerStatusConnected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transport != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Transport))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_PeerStatusReconnecting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_PeerStatusReconnecting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_PeerStatusReconnecting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_PeerStatusDisconnected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_PeerStatusDisconnected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_PeerStatusDisconnected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_PeerStatusGroupAssociated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_PeerStatusGroupAssociated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_PeerStatusGroupAssociated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_ServiceTokenAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_ServiceTokenAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent_ServiceTokenAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationStream_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationStream_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationStream_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConversationStream_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationStream_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationStream_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationCreate_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationCreate_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationCreate_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContactsToInvite) > 0 {
		for iNdEx := len(m.ContactsToInvite) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContactsToInvite[iNdEx])
			copy(dAtA[i:], m.ContactsToInvite[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ContactsToInvite[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationCreate_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationCreate_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationCreate_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AccountGet_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountGet_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountGet_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AccountGet_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountGet_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountGet_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventStream_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStream_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStream_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShallowAmount != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ShallowAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventStream_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStream_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStream_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUpdate_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUpdate_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUpdate_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AccountPushConfigure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPushConfigure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountPushConfigure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AccountPushConfigure_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPushConfigure_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountPushConfigure_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShowPushPreviews {
		i--
		if m.ShowPushPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ShowInAppNotifications {
		i--
		if m.ShowInAppNotifications {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.HidePushPreviews {
		i--
		if m.HidePushPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.HideInAppNotifications {
		i--
		if m.HideInAppNotifications {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MuteForever {
		i--
		if m.MuteForever {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Unmute {
		i--
		if m.Unmute {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.MutedUntil != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.MutedUntil))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountPushConfigure_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPushConfigure_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountPushConfigure_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContactRequest_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequest_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequest_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Passphrase) > 0 {
		i -= len(m.Passphrase)
		copy(dAtA[i:], m.Passphrase)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Passphrase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactRequest_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRequest_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRequest_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContactAccept) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactAccept) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactAccept) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContactAccept_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactAccept_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactAccept_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactAccept_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactAccept_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactAccept_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Interact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Interact_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interact_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interact_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata {
		i--
		if m.Metadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.TargetCID) > 0 {
		i -= len(m.TargetCID)
		copy(dAtA[i:], m.TargetCID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TargetCID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Interact_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interact_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interact_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CID) > 0 {
		i -= len(m.CID)
		copy(dAtA[i:], m.CID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.CID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationServiceRegisterGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationServiceRegisterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationServiceRegisterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReplicationServiceRegisterGroup_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationServiceRegisterGroup_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationServiceRegisterGroup_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationServiceRegisterGroup_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationServiceRegisterGroup_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationServiceRegisterGroup_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReplicationSetAutoEnable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationSetAutoEnable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationSetAutoEnable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReplicationSetAutoEnable_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationSetAutoEnable_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationSetAutoEnable_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationSetAutoEnable_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationSetAutoEnable_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationSetAutoEnable_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BannerQuote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerQuote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannerQuote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BannerQuote_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerQuote_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannerQuote_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Random {
		i--
		if m.Random {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BannerQuote_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerQuote_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannerQuote_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstanceExportData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceExportData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceExportData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InstanceExportData_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceExportData_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceExportData_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InstanceExportData_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceExportData_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceExportData_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExportedData) > 0 {
		i -= len(m.ExportedData)
		copy(dAtA[i:], m.ExportedData)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ExportedData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalDatabaseState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalDatabaseState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalDatabaseState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoSharePushTokenFlag {
		i--
		if m.AutoSharePushTokenFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.AccountLink) > 0 {
		i -= len(m.AccountLink)
		copy(dAtA[i:], m.AccountLink)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountLink)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LocalConversationsState) > 0 {
		for iNdEx := len(m.LocalConversationsState) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LocalConversationsState[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ReplicateFlag {
		i--
		if m.ReplicateFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalConversationState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalConversationState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalConversationState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UnreadCount != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.UnreadCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MessageSearch_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSearch_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageSearch_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OldestToNewest {
		i--
		if m.OldestToNewest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.RefCID) > 0 {
		i -= len(m.RefCID)
		copy(dAtA[i:], m.RefCID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.RefCID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.AfterDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.AfterDate))
		i--
		dAtA[i] = 0x18
	}
	if m.BeforeDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.BeforeDate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageSearch_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSearch_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageSearch_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TyberHostSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TyberHostSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TyberHostSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TyberHostSearch_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TyberHostSearch_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TyberHostSearch_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TyberHostSearch_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TyberHostSearch_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TyberHostSearch_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IPv6) > 0 {
		for iNdEx := len(m.IPv6) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IPv6[iNdEx])
			copy(dAtA[i:], m.IPv6[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.IPv6[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IPv4) > 0 {
		for iNdEx := len(m.IPv4) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IPv4[iNdEx])
			copy(dAtA[i:], m.IPv4[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.IPv4[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TyberHostAttach) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TyberHostAttach) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TyberHostAttach) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TyberHostAttach_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TyberHostAttach_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TyberHostAttach_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TyberHostAttach_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TyberHostAttach_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TyberHostAttach_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushSetDeviceToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetDeviceToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetDeviceToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushSetDeviceToken_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetDeviceToken_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetDeviceToken_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size, err := m.Receiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushSetDeviceToken_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetDeviceToken_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetDeviceToken_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushSetAutoShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetAutoShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetAutoShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushSetAutoShare_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetAutoShare_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetAutoShare_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushSetAutoShare_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetAutoShare_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetAutoShare_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushReceivedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushReceivedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushReceivedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HidePreview {
		i--
		if m.HidePreview {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ConversationMuted {
		i--
		if m.ConversationMuted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.AccountMuted {
		i--
		if m.AccountMuted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AlreadyReceived {
		i--
		if m.AlreadyReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Interaction != nil {
		{
			size, err := m.Interaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProtocolData != nil {
		{
			size, err := m.ProtocolData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushReceive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushReceive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushReceive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushReceive_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushReceive_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushReceive_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushReceive_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushReceive_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushReceive_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListMemberDevices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMemberDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMemberDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListMemberDevices_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMemberDevices_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMemberDevices_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberPK) > 0 {
		i -= len(m.MemberPK)
		copy(dAtA[i:], m.MemberPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.MemberPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConversationPK) > 0 {
		i -= len(m.ConversationPK)
		copy(dAtA[i:], m.ConversationPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListMemberDevices_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMemberDevices_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMemberDevices_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushShareTokenForConversation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushShareTokenForConversation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushShareTokenForConversation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushShareTokenForConversation_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushShareTokenForConversation_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushShareTokenForConversation_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationPK) > 0 {
		i -= len(m.ConversationPK)
		copy(dAtA[i:], m.ConversationPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushShareTokenForConversation_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushShareTokenForConversation_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushShareTokenForConversation_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushTokenSharedForConversation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushTokenSharedForConversation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushTokenSharedForConversation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushTokenSharedForConversation_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushTokenSharedForConversation_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushTokenSharedForConversation_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationPK) > 0 {
		i -= len(m.ConversationPK)
		copy(dAtA[i:], m.ConversationPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushTokenSharedForConversation_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushTokenSharedForConversation_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushTokenSharedForConversation_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceRegister_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceRegister_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceRegister_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationDate != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ExpirationDate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProofIssuer) > 0 {
		i -= len(m.ProofIssuer)
		copy(dAtA[i:], m.ProofIssuer)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ProofIssuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceRegister_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceRegister_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceRegister_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DirectoryRecordToken) > 0 {
		i -= len(m.DirectoryRecordToken)
		copy(dAtA[i:], m.DirectoryRecordToken)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DirectoryRecordToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceUnregister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceUnregister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceUnregister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceUnregister_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceUnregister_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceUnregister_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DirectoryRecordToken) > 0 {
		i -= len(m.DirectoryRecordToken)
		copy(dAtA[i:], m.DirectoryRecordToken)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DirectoryRecordToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceUnregister_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceUnregister_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceUnregister_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceQuery_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceQuery_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceQuery_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryServiceQuery_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryServiceQuery_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryServiceQuery_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerifiedCredential) > 0 {
		i -= len(m.VerifiedCredential)
		copy(dAtA[i:], m.VerifiedCredential)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.VerifiedCredential)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AccountURI) > 0 {
		i -= len(m.AccountURI)
		copy(dAtA[i:], m.AccountURI)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccountURI)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintMessengertypes(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DirectoryIdentifier) > 0 {
		i -= len(m.DirectoryIdentifier)
		copy(dAtA[i:], m.DirectoryIdentifier)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DirectoryIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushLocalDeviceSharedToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushLocalDeviceSharedToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushLocalDeviceSharedToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushMemberToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushMemberToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushMemberToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ServerKey) > 0 {
		i -= len(m.ServerKey)
		copy(dAtA[i:], m.ServerKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConversationPublicKey) > 0 {
		i -= len(m.ConversationPublicKey)
		copy(dAtA[i:], m.ConversationPublicKey)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ConversationPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushMemberTokenUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushMemberTokenUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushMemberTokenUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberWithDevices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberWithDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberWithDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DevicePKs) > 0 {
		for iNdEx := len(m.DevicePKs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DevicePKs[iNdEx])
			copy(dAtA[i:], m.DevicePKs[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DevicePKs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MemberPK) > 0 {
		i -= len(m.MemberPK)
		copy(dAtA[i:], m.MemberPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.MemberPK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushSend_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSend_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSend_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupMembers) > 0 {
		for iNdEx := len(m.GroupMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CID) > 0 {
		i -= len(m.CID)
		copy(dAtA[i:], m.CID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.CID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushSend_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSend_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSend_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupMembers) > 0 {
		for iNdEx := len(m.GroupMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessengertypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PushShareToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushShareToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushShareToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushShareToken_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushShareToken_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushShareToken_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size, err := m.Receiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupPK) > 0 {
		i -= len(m.GroupPK)
		copy(dAtA[i:], m.GroupPK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.GroupPK)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevicePK) > 0 {
		i -= len(m.DevicePK)
		copy(dAtA[i:], m.DevicePK)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.DevicePK)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushShareToken_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushShareToken_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushShareToken_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushSetServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushSetServer_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetServer_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetServer_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessengertypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushSetServer_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushSetServer_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushSetServer_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AuthExchangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthExchangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthExchangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for k := range m.Services {
			v := m.Services[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessengertypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServicesTokenCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesTokenCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesTokenCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CodeChallenge) > 0 {
		i -= len(m.CodeChallenge)
		copy(dAtA[i:], m.CodeChallenge)
		i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.CodeChallenge)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Services[iNdEx])
			copy(dAtA[i:], m.Services[iNdEx])
			i = encodeVarintMessengertypes(dAtA, i, uint64(len(m.Services[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessengertypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessengertypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PaginatedInteractionsOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovMessengertypes(uint64(m.Amount))
	}
	l = len(m.RefCID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.OldestToNewest {
		n += 2
	}
	if m.NoBulk {
		n += 2
	}
	return n
}

func (m *ConversationOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationOpen_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ConversationOpen_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationClose_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ConversationClose_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationLoad_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ConversationLoad_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationMute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationMute_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.MutedUntil != 0 {
		n += 1 + sovMessengertypes(uint64(m.MutedUntil))
	}
	if m.Unmute {
		n += 2
	}
	if m.MuteForever {
		n += 2
	}
	return n
}

func (m *ConversationMute_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EchoTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EchoTest_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delay != 0 {
		n += 1 + sovMessengertypes(uint64(m.Delay))
	}
	l = len(m.Echo)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.TriggerError {
		n += 2
	}
	return n
}

func (m *EchoTest_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Echo)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *EchoDuplexTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EchoDuplexTest_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Echo)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.TriggerError {
		n += 2
	}
	return n
}

func (m *EchoDuplexTest_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Echo)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *InstanceShareableBertyID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InstanceShareableBertyID_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reset_ {
		n += 2
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Passphrase)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *InstanceShareableBertyID_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.InternalURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.WebURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ShareableBertyGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShareableBertyGroup_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ShareableBertyGroup_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.InternalURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.WebURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *DevShareInstanceBertyID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DevShareInstanceBertyID_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reset_ {
		n += 2
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *DevShareInstanceBertyID_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DevStreamLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DevStreamLogs_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DevStreamLogs_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Line)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ParseDeepLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ParseDeepLink_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Passphrase)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ParseDeepLink_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *BertyLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMessengertypes(uint64(m.Kind))
	}
	if m.BertyID != nil {
		l = m.BertyID.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.BertyGroup != nil {
		l = m.BertyGroup.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Encrypted != nil {
		l = m.Encrypted.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.BertyMessageRef != nil {
		l = m.BertyMessageRef.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *BertyLink_Encrypted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMessengertypes(uint64(m.Kind))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ContactPublicRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ContactAccountPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupPublicKey)
	if l > 0 {
		n += 2 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupSecret)
	if l > 0 {
		n += 2 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupSecretSig)
	if l > 0 {
		n += 2 + l + sovMessengertypes(uint64(l))
	}
	if m.GroupType != 0 {
		n += 2 + sovMessengertypes(uint64(m.GroupType))
	}
	l = len(m.GroupSignPub)
	if l > 0 {
		n += 2 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupLinkKeySig)
	if l > 0 {
		n += 2 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *BertyLink_BertyMessageRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.MessageID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *SendContactRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SendContactRequest_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BertyID != nil {
		l = m.BertyID.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.OwnMetadata)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *SendContactRequest_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BertyID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicRendezvousSeed)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.AccountPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *BertyGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessengertypes(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.SentDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.SentDate))
	}
	l = len(m.TargetCID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_UserMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_GroupInvitation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_SetGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_SetUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_Acknowledge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AppMessage_AccountDirectoryServiceRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.IdentifierProofIssuer)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.RegistrationDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.RegistrationDate))
	}
	if m.ExpirationDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.ExpirationDate))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DirectoryRecordToken)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DirectoryRecordUnregisterToken)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_AccountDirectoryServiceUnregistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.IdentifierProofIssuer)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.RemovalDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.RemovalDate))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DirectoryRecordToken)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_ServiceAddToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.SupportedServices) > 0 {
		for _, e := range m.SupportedServices {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	l = len(m.AuthenticationURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovMessengertypes(uint64(m.Expiration))
	}
	return n
}

func (m *AppMessage_ServiceRemoveToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_PushSetDeviceToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceToken != nil {
		l = m.DeviceToken.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_PushSetServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AppMessage_PushSetMemberToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberToken != nil {
		l = m.MemberToken.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *SystemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemInfo_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemInfo_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Messenger != nil {
		l = m.Messenger.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *SystemInfo_Messenger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.Warns) > 0 {
		for _, s := range m.Warns {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	if m.ProtocolInSameProcess {
		n += 2
	}
	if m.DB != nil {
		l = m.DB.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *SystemInfo_DB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accounts != 0 {
		n += 1 + sovMessengertypes(uint64(m.Accounts))
	}
	if m.Contacts != 0 {
		n += 1 + sovMessengertypes(uint64(m.Contacts))
	}
	if m.Conversations != 0 {
		n += 1 + sovMessengertypes(uint64(m.Conversations))
	}
	if m.Interactions != 0 {
		n += 1 + sovMessengertypes(uint64(m.Interactions))
	}
	if m.Members != 0 {
		n += 1 + sovMessengertypes(uint64(m.Members))
	}
	if m.Devices != 0 {
		n += 1 + sovMessengertypes(uint64(m.Devices))
	}
	if m.ServiceTokenSupportedServiceRecords != 0 {
		n += 1 + sovMessengertypes(uint64(m.ServiceTokenSupportedServiceRecords))
	}
	if m.ServiceTokens != 0 {
		n += 1 + sovMessengertypes(uint64(m.ServiceTokens))
	}
	if m.ConversationReplicationInfo != 0 {
		n += 1 + sovMessengertypes(uint64(m.ConversationReplicationInfo))
	}
	if m.MetadataEvents != 0 {
		n += 1 + sovMessengertypes(uint64(m.MetadataEvents))
	}
	if m.PushMemberToken != 0 {
		n += 1 + sovMessengertypes(uint64(m.PushMemberToken))
	}
	if m.AccountVerifiedCredentials != 0 {
		n += 1 + sovMessengertypes(uint64(m.AccountVerifiedCredentials))
	}
	if m.AccountDirectoryServiceRecord != 0 {
		n += 1 + sovMessengertypes(uint64(m.AccountDirectoryServiceRecord))
	}
	if m.PushDeviceToken != 0 {
		n += 1 + sovMessengertypes(uint64(m.PushDeviceToken))
	}
	if m.PushServerRecord != 0 {
		n += 2 + sovMessengertypes(uint64(m.PushServerRecord))
	}
	if m.PushLocalDeviceSharedToken != 0 {
		n += 2 + sovMessengertypes(uint64(m.PushLocalDeviceSharedToken))
	}
	return n
}

func (m *ConversationJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationJoin_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Passphrase)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ConversationJoin_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DebugAuthServiceSetToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DebugAuthServiceSetToken_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.AuthenticationURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *DebugAuthServiceSetToken_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServicesTokenList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServicesTokenList_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServicesTokenList_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AuthServiceCompleteFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AuthServiceCompleteFlow_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallbackURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AuthServiceCompleteFlow_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AuthServiceInitFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AuthServiceInitFlow_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *AuthServiceInitFlow_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.SecureURL {
		n += 2
	}
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.ServiceTokens) > 0 {
		for _, e := range m.ServiceTokens {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	if m.ReplicateNewGroupsAutomatically {
		n += 2
	}
	if m.AutoSharePushTokenFlag {
		n += 2
	}
	if m.PushDeviceToken != nil {
		l = m.PushDeviceToken.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.PushServerRecords) > 0 {
		for _, e := range m.PushServerRecords {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	if m.MutedUntil != 0 {
		n += 1 + sovMessengertypes(uint64(m.MutedUntil))
	}
	if m.HideInAppNotifications {
		n += 2
	}
	if m.HidePushPreviews {
		n += 2
	}
	if len(m.VerifiedCredentials) > 0 {
		for _, e := range m.VerifiedCredentials {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	if len(m.DirectoryServiceRecords) > 0 {
		for _, e := range m.DirectoryServiceRecords {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *ServiceTokenSupportedService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ServiceTokenSupportedServiceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ServiceToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.SupportedServices) > 0 {
		for _, e := range m.SupportedServices {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	l = len(m.AuthenticationURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovMessengertypes(uint64(m.Expiration))
	}
	return n
}

func (m *MetadataEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.MetadataEventType != 0 {
		n += 1 + sovMessengertypes(uint64(m.MetadataEventType))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *Interaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMessengertypes(uint64(m.Type))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.IsMine {
		n += 2
	}
	l = len(m.MemberPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.SentDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.SentDate))
	}
	if m.Acknowledged {
		n += 2
	}
	l = len(m.DevicePublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.TargetCID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.OutOfStoreMessage {
		n += 3
	}
	return n
}

func (m *Contact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessengertypes(uint64(m.State))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	if m.CreatedDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.CreatedDate))
	}
	if m.SentDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.SentDate))
	}
	if m.InfoDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.InfoDate))
	}
	return n
}

func (m *Conversation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMessengertypes(uint64(m.Type))
	}
	if m.IsOpen {
		n += 2
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovMessengertypes(uint64(m.UnreadCount))
	}
	if m.LastUpdate != 0 {
		n += 1 + sovMessengertypes(uint64(m.LastUpdate))
	}
	l = len(m.ContactPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	l = len(m.AccountMemberPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.LocalDevicePublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.CreatedDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.CreatedDate))
	}
	if len(m.ReplicationInfo) > 0 {
		for _, e := range m.ReplicationInfo {
			l = e.Size()
			n += 2 + l + sovMessengertypes(uint64(l))
		}
	}
	if m.InfoDate != 0 {
		n += 2 + sovMessengertypes(uint64(m.InfoDate))
	}
	l = len(m.LocalMemberPublicKey)
	if l > 0 {
		n += 2 + l + sovMessengertypes(uint64(l))
	}
	if m.MutedUntil != 0 {
		n += 2 + sovMessengertypes(uint64(m.MutedUntil))
	}
	if len(m.PushLocalDeviceSharedTokens) > 0 {
		for _, e := range m.PushLocalDeviceSharedTokens {
			l = e.Size()
			n += 2 + l + sovMessengertypes(uint64(l))
		}
	}
	if len(m.PushMemberTokens) > 0 {
		for _, e := range m.PushMemberTokens {
			l = e.Size()
			n += 2 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *ConversationReplicationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.MemberPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.AuthenticationURL)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ReplicationServer)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	if m.InfoDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.InfoDate))
	}
	if m.IsCreator {
		n += 2
	}
	if m.IsMe {
		n += 2
	}
	return n
}

func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.MemberPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AccountVerifiedCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.RegistrationDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.RegistrationDate))
	}
	if m.ExpirationDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.ExpirationDate))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AccountDirectoryServiceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.IdentifierProofIssuer)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.RegistrationDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.RegistrationDate))
	}
	if m.ExpirationDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.ExpirationDate))
	}
	if m.Revoked {
		n += 2
	}
	l = len(m.DirectoryRecordToken)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DirectoryRecordUnregisterToken)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushDeviceToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.TokenType != 0 {
		n += 1 + sovMessengertypes(uint64(m.TokenType))
	}
	l = len(m.BundleID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushServerRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ServerKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ContactMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessengertypes(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.IsNew {
		n += 2
	}
	return n
}

func (m *StreamEvent_ConversationUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_ConversationDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_InteractionUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interaction != nil {
		l = m.Interaction.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_InteractionDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_ContactUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_AccountUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_MemberUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_DeviceUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_ListEnded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StreamEvent_ConversationPartialLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.Interactions) > 0 {
		for _, e := range m.Interactions {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *StreamEvent_Notified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessengertypes(uint64(m.Type))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_Notified_Basic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StreamEvent_Notified_MessageReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interaction != nil {
		l = m.Interaction.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_Notified_ContactRequestSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_Notified_ContactRequestReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_Notified_GroupInvitation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_PeerStatusConnected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Transport != 0 {
		n += 1 + sovMessengertypes(uint64(m.Transport))
	}
	return n
}

func (m *StreamEvent_PeerStatusReconnecting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_PeerStatusDisconnected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_PeerStatusGroupAssociated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *StreamEvent_ServiceTokenAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ConversationStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationStream_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMessengertypes(uint64(m.Count))
	}
	if m.Page != 0 {
		n += 1 + sovMessengertypes(uint64(m.Page))
	}
	return n
}

func (m *ConversationStream_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ConversationCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationCreate_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.ContactsToInvite) > 0 {
		for _, s := range m.ContactsToInvite {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *ConversationCreate_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AccountGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountGet_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountGet_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *EventStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventStream_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShallowAmount != 0 {
		n += 1 + sovMessengertypes(uint64(m.ShallowAmount))
	}
	return n
}

func (m *EventStream_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AccountUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountUpdate_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *AccountUpdate_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountPushConfigure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountPushConfigure_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MutedUntil != 0 {
		n += 1 + sovMessengertypes(uint64(m.MutedUntil))
	}
	if m.Unmute {
		n += 2
	}
	if m.MuteForever {
		n += 2
	}
	if m.HideInAppNotifications {
		n += 2
	}
	if m.HidePushPreviews {
		n += 2
	}
	if m.ShowInAppNotifications {
		n += 2
	}
	if m.ShowPushPreviews {
		n += 2
	}
	return n
}

func (m *AccountPushConfigure_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContactRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContactRequest_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Passphrase)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ContactRequest_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContactAccept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContactAccept_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ContactAccept_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Interact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Interact_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessengertypes(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.TargetCID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Metadata {
		n += 2
	}
	return n
}

func (m *Interact_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ReplicationServiceRegisterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReplicationServiceRegisterGroup_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ReplicationServiceRegisterGroup_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReplicationSetAutoEnable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReplicationSetAutoEnable_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *ReplicationSetAutoEnable_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BannerQuote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BannerQuote_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random {
		n += 2
	}
	return n
}

func (m *BannerQuote_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *InstanceExportData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InstanceExportData_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InstanceExportData_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExportedData)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *LocalDatabaseState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.ReplicateFlag {
		n += 2
	}
	if len(m.LocalConversationsState) > 0 {
		for _, e := range m.LocalConversationsState {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	l = len(m.AccountLink)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.AutoSharePushTokenFlag {
		n += 2
	}
	return n
}

func (m *LocalConversationState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovMessengertypes(uint64(m.UnreadCount))
	}
	if m.IsOpen {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovMessengertypes(uint64(m.Type))
	}
	return n
}

func (m *MessageSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MessageSearch_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.BeforeDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.BeforeDate))
	}
	if m.AfterDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.AfterDate))
	}
	if m.Limit != 0 {
		n += 1 + sovMessengertypes(uint64(m.Limit))
	}
	l = len(m.RefCID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.OldestToNewest {
		n += 2
	}
	return n
}

func (m *MessageSearch_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *TyberHostSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TyberHostSearch_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TyberHostSearch_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.IPv4) > 0 {
		for _, s := range m.IPv4 {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	if len(m.IPv6) > 0 {
		for _, s := range m.IPv6 {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *TyberHostAttach) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TyberHostAttach_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *TyberHostAttach_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushSetDeviceToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushSetDeviceToken_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		l = m.Receiver.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushSetDeviceToken_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushSetAutoShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushSetAutoShare_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *PushSetAutoShare_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushReceivedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolData != nil {
		l = m.ProtocolData.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Interaction != nil {
		l = m.Interaction.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.AlreadyReceived {
		n += 2
	}
	if m.AccountMuted {
		n += 2
	}
	if m.ConversationMuted {
		n += 2
	}
	if m.HidePreview {
		n += 2
	}
	return n
}

func (m *PushReceive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushReceive_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushReceive_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ListMemberDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListMemberDevices_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.MemberPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *ListMemberDevices_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushShareTokenForConversation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushShareTokenForConversation_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushShareTokenForConversation_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushTokenSharedForConversation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushTokenSharedForConversation_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushTokenSharedForConversation_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *DirectoryServiceRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DirectoryServiceRegister_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ProofIssuer)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.ExpirationDate != 0 {
		n += 1 + sovMessengertypes(uint64(m.ExpirationDate))
	}
	return n
}

func (m *DirectoryServiceRegister_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DirectoryRecordToken)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *DirectoryServiceUnregister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DirectoryServiceUnregister_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DirectoryRecordToken)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *DirectoryServiceUnregister_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DirectoryServiceQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DirectoryServiceQuery_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *DirectoryServiceQuery_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DirectoryIdentifier)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovMessengertypes(uint64(m.ExpiresAt))
	}
	l = len(m.AccountURI)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.VerifiedCredential)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushLocalDeviceSharedToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushMemberToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ConversationPublicKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ServerKey)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushMemberTokenUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *MemberWithDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.DevicePKs) > 0 {
		for _, s := range m.DevicePKs {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *PushSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushSend_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.GroupMembers) > 0 {
		for _, e := range m.GroupMembers {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *PushSend_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupMembers) > 0 {
		for _, e := range m.GroupMembers {
			l = e.Size()
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	return n
}

func (m *PushShareToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushShareToken_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevicePK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.GroupPK)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if m.Receiver != nil {
		l = m.Receiver.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushShareToken_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushSetServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushSetServer_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func (m *PushSetServer_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AuthExchangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	if len(m.Services) > 0 {
		for k, v := range m.Services {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessengertypes(uint64(len(k))) + 1 + len(v) + sovMessengertypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessengertypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ServicesTokenCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovMessengertypes(uint64(l))
		}
	}
	l = len(m.CodeChallenge)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovMessengertypes(uint64(l))
	}
	return n
}

func sovMessengertypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessengertypes(x uint64) (n int) {
	return sovMessengertypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PaginatedInteractionsOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginatedInteractionsOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginatedInteractionsOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefCID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefCID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldestToNewest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OldestToNewest = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBulk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoBulk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationOpen_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationOpen_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationClose_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationClose_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationLoad_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &PaginatedInteractionsOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationLoad_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationMute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationMute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationMute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationMute_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutedUntil", wireType)
			}
			m.MutedUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MutedUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unmute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unmute = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteForever", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MuteForever = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationMute_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoTest_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Echo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Echo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TriggerError = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoTest_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Echo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Echo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoDuplexTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoDuplexTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoDuplexTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoDuplexTest_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Echo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Echo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TriggerError = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoDuplexTest_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Echo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Echo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceShareableBertyID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceShareableBertyID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceShareableBertyID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceShareableBertyID_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reset_ = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrase", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrase = append(m.Passphrase[:0], dAtA[iNdEx:postIndex]...)
			if m.Passphrase == nil {
				m.Passphrase = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceShareableBertyID_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &BertyLink{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareableBertyGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareableBertyGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareableBertyGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareableBertyGroup_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = append(m.GroupPK[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPK == nil {
				m.GroupPK = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareableBertyGroup_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &BertyLink{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevShareInstanceBertyID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevShareInstanceBertyID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevShareInstanceBertyID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevShareInstanceBertyID_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reset_ = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevShareInstanceBertyID_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevStreamLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevStreamLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevStreamLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevStreamLogs_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevStreamLogs_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Line = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseDeepLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseDeepLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseDeepLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseDeepLink_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrase", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrase = append(m.Passphrase[:0], dAtA[iNdEx:postIndex]...)
			if m.Passphrase == nil {
				m.Passphrase = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseDeepLink_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &BertyLink{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BertyLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BertyLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BertyLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= BertyLink_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BertyID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BertyID == nil {
				m.BertyID = &BertyID{}
			}
			if err := m.BertyID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BertyGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BertyGroup == nil {
				m.BertyGroup = &BertyGroup{}
			}
			if err := m.BertyGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Encrypted == nil {
				m.Encrypted = &BertyLink_Encrypted{}
			}
			if err := m.Encrypted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BertyMessageRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BertyMessageRef == nil {
				m.BertyMessageRef = &BertyLink_BertyMessageRef{}
			}
			if err := m.BertyMessageRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BertyLink_Encrypted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Encrypted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Encrypted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= BertyLink_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], dAtA[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPublicRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPublicRendezvousSeed = append(m.ContactPublicRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactPublicRendezvousSeed == nil {
				m.ContactPublicRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactAccountPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactAccountPK = append(m.ContactAccountPK[:0], dAtA[iNdEx:postIndex]...)
			if m.ContactAccountPK == nil {
				m.ContactAccountPK = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPublicKey = append(m.GroupPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPublicKey == nil {
				m.GroupPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSecret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSecret = append(m.GroupSecret[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupSecret == nil {
				m.GroupSecret = []byte{}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSecretSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSecretSig = append(m.GroupSecretSig[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupSecretSig == nil {
				m.GroupSecretSig = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			m.GroupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupType |= protocoltypes.GroupType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSignPub", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSignPub = append(m.GroupSignPub[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupSignPub == nil {
				m.GroupSignPub = []byte{}
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupLinkKeySig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupLinkKeySig = append(m.GroupLinkKeySig[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupLinkKeySig == nil {
				m.GroupLinkKeySig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BertyLink_BertyMessageRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BertyMessageRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BertyMessageRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendContactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendContactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendContactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendContactRequest_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BertyID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BertyID == nil {
				m.BertyID = &BertyID{}
			}
			if err := m.BertyID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnMetadata = append(m.OwnMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnMetadata == nil {
				m.OwnMetadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendContactRequest_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BertyID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BertyID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BertyID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRendezvousSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRendezvousSeed = append(m.PublicRendezvousSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicRendezvousSeed == nil {
				m.PublicRendezvousSeed = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPK = append(m.AccountPK[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountPK == nil {
				m.AccountPK = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BertyGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BertyGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BertyGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &protocoltypes.Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AppMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentDate", wireType)
			}
			m.SentDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_UserMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_GroupInvitation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInvitation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInvitation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_SetGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_SetUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_Acknowledge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Acknowledge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Acknowledge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_AccountDirectoryServiceRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDirectoryServiceRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDirectoryServiceRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierProofIssuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentifierProofIssuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationDate", wireType)
			}
			m.RegistrationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			m.ExpirationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryRecordToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryRecordToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryRecordUnregisterToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryRecordUnregisterToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_AccountDirectoryServiceUnregistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDirectoryServiceUnregistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDirectoryServiceUnregistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierProofIssuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentifierProofIssuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovalDate", wireType)
			}
			m.RemovalDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemovalDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryRecordToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryRecordToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_ServiceAddToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAddToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAddToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedServices = append(m.SupportedServices, &ServiceTokenSupportedService{})
			if err := m.SupportedServices[len(m.SupportedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_ServiceRemoveToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceRemoveToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceRemoveToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_PushSetDeviceToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSetDeviceToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSetDeviceToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceToken == nil {
				m.DeviceToken = &pushtypes.PushServiceReceiver{}
			}
			if err := m.DeviceToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_PushSetServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSetServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSetServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &PushServer{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessage_PushSetMemberToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSetMemberToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSetMemberToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberToken == nil {
				m.MemberToken = &PushMemberTokenUpdate{}
			}
			if err := m.MemberToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemInfo_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemInfo_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &protocoltypes.SystemInfo_Reply{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Messenger == nil {
				m.Messenger = &SystemInfo_Messenger{}
			}
			if err := m.Messenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemInfo_Messenger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Messenger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Messenger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &protocoltypes.SystemInfo_Process{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warns = append(m.Warns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolInSameProcess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtocolInSameProcess = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DB == nil {
				m.DB = &SystemInfo_DB{}
			}
			if err := m.DB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemInfo_DB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			m.Accounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accounts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			m.Contacts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Contacts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversations", wireType)
			}
			m.Conversations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Conversations |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interactions", wireType)
			}
			m.Interactions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interactions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			m.Members = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Members |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			m.Devices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Devices |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTokenSupportedServiceRecords", wireType)
			}
			m.ServiceTokenSupportedServiceRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceTokenSupportedServiceRecords |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTokens", wireType)
			}
			m.ServiceTokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceTokens |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationReplicationInfo", wireType)
			}
			m.ConversationReplicationInfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConversationReplicationInfo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataEvents", wireType)
			}
			m.MetadataEvents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataEvents |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushMemberToken", wireType)
			}
			m.PushMemberToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushMemberToken |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountVerifiedCredentials", wireType)
			}
			m.AccountVerifiedCredentials = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountVerifiedCredentials |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountDirectoryServiceRecord", wireType)
			}
			m.AccountDirectoryServiceRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountDirectoryServiceRecord |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushDeviceToken", wireType)
			}
			m.PushDeviceToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushDeviceToken |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushServerRecord", wireType)
			}
			m.PushServerRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushServerRecord |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushLocalDeviceSharedToken", wireType)
			}
			m.PushLocalDeviceSharedToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushLocalDeviceSharedToken |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationJoin_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrase", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrase = append(m.Passphrase[:0], dAtA[iNdEx:postIndex]...)
			if m.Passphrase == nil {
				m.Passphrase = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationJoin_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugAuthServiceSetToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugAuthServiceSetToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugAuthServiceSetToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugAuthServiceSetToken_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &AuthExchangeResponse{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugAuthServiceSetToken_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesTokenList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesTokenList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesTokenList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesTokenList_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesTokenList_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &ServiceToken{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthServiceCompleteFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthServiceCompleteFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthServiceCompleteFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthServiceCompleteFlow_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthServiceCompleteFlow_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthServiceInitFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthServiceInitFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthServiceInitFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthServiceInitFlow_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthServiceInitFlow_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecureURL", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SecureURL = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceTokens = append(m.ServiceTokens, &ServiceToken{})
			if err := m.ServiceTokens[len(m.ServiceTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicateNewGroupsAutomatically", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicateNewGroupsAutomatically = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSharePushTokenFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoSharePushTokenFlag = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushDeviceToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PushDeviceToken == nil {
				m.PushDeviceToken = &PushDeviceToken{}
			}
			if err := m.PushDeviceToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushServerRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushServerRecords = append(m.PushServerRecords, &PushServerRecord{})
			if err := m.PushServerRecords[len(m.PushServerRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutedUntil", wireType)
			}
			m.MutedUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MutedUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideInAppNotifications", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideInAppNotifications = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HidePushPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HidePushPreviews = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifiedCredentials = append(m.VerifiedCredentials, &AccountVerifiedCredential{})
			if err := m.VerifiedCredentials[len(m.VerifiedCredentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryServiceRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryServiceRecords = append(m.DirectoryServiceRecords, &AccountDirectoryServiceRecord{})
			if err := m.DirectoryServiceRecords[len(m.DirectoryServiceRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceTokenSupportedService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceTokenSupportedService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceTokenSupportedService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceTokenSupportedServiceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceTokenSupportedServiceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceTokenSupportedServiceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedServices = append(m.SupportedServices, &ServiceTokenSupportedServiceRecord{})
			if err := m.SupportedServices[len(m.SupportedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataEventType", wireType)
			}
			m.MetadataEventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataEventType |= protocoltypes.EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AppMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMine", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMine = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &Member{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentDate", wireType)
			}
			m.SentDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Acknowledged = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfStoreMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOfStoreMessage = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Contact_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &Device{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			m.CreatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentDate", wireType)
			}
			m.SentDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoDate", wireType)
			}
			m.InfoDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfoDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conversation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conversation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conversation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Conversation_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			m.LastUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountMemberPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountMemberPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalDevicePublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalDevicePublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			m.CreatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationInfo = append(m.ReplicationInfo, &ConversationReplicationInfo{})
			if err := m.ReplicationInfo[len(m.ReplicationInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoDate", wireType)
			}
			m.InfoDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfoDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMemberPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMemberPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutedUntil", wireType)
			}
			m.MutedUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MutedUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushLocalDeviceSharedTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushLocalDeviceSharedTokens = append(m.PushLocalDeviceSharedTokens, &PushLocalDeviceSharedToken{})
			if err := m.PushLocalDeviceSharedTokens[len(m.PushLocalDeviceSharedTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushMemberTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushMemberTokens = append(m.PushMemberTokens, &PushMemberToken{})
			if err := m.PushMemberTokens[len(m.PushMemberTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationReplicationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationReplicationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationReplicationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &Device{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoDate", wireType)
			}
			m.InfoDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfoDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountVerifiedCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountVerifiedCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountVerifiedCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationDate", wireType)
			}
			m.RegistrationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			m.ExpirationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDirectoryServiceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDirectoryServiceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDirectoryServiceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierProofIssuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentifierProofIssuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationDate", wireType)
			}
			m.RegistrationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			m.ExpirationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoked = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryRecordToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryRecordToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryRecordUnregisterToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryRecordUnregisterToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushDeviceToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushDeviceToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushDeviceToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= pushtypes.PushServiceTokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushServerRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushServerRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushServerRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerKey = append(m.ServerKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerKey == nil {
				m.ServerKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= StreamEvent_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNew = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_ConversationUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_ConversationDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_InteractionUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractionUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractionUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interaction == nil {
				m.Interaction = &Interaction{}
			}
			if err := m.Interaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_InteractionDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractionDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractionDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_ContactUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_AccountUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_MemberUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &Member{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_DeviceUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &Device{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_ListEnded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEnded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEnded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_ConversationPartialLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationPartialLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationPartialLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interactions = append(m.Interactions, &Interaction{})
			if err := m.Interactions[len(m.Interactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_Notified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= StreamEvent_Notified_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_Notified_Basic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Basic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Basic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_Notified_MessageReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interaction == nil {
				m.Interaction = &Interaction{}
			}
			if err := m.Interaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_Notified_ContactRequestSent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_Notified_ContactRequestReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequestReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequestReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_Notified_GroupInvitation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInvitation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInvitation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &Contact{}
			}
			if err := m.Contact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_PeerStatusConnected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerStatusConnected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerStatusConnected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			m.Transport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transport |= StreamEvent_PeerStatusConnected_Transport(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_PeerStatusReconnecting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerStatusReconnecting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerStatusReconnecting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_PeerStatusDisconnected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerStatusDisconnected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerStatusDisconnected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_PeerStatusGroupAssociated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerStatusGroupAssociated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerStatusGroupAssociated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_ServiceTokenAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceTokenAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceTokenAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &ServiceToken{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationStream_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationStream_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationCreate_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactsToInvite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactsToInvite = append(m.ContactsToInvite, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationCreate_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountGet_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountGet_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStream_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShallowAmount", wireType)
			}
			m.ShallowAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShallowAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStream_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &StreamEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUpdate_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPushConfigure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPushConfigure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPushConfigure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPushConfigure_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutedUntil", wireType)
			}
			m.MutedUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MutedUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unmute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unmute = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteForever", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MuteForever = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideInAppNotifications", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideInAppNotifications = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HidePushPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HidePushPreviews = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowInAppNotifications", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowInAppNotifications = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPushPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPushPreviews = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPushConfigure_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequest_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrase", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrase = append(m.Passphrase[:0], dAtA[iNdEx:postIndex]...)
			if m.Passphrase == nil {
				m.Passphrase = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactRequest_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactAccept) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactAccept_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactAccept_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interact_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AppMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Metadata = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interact_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationServiceRegisterGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationServiceRegisterGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationServiceRegisterGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationServiceRegisterGroup_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationServiceRegisterGroup_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationSetAutoEnable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationSetAutoEnable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationSetAutoEnable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationSetAutoEnable_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationSetAutoEnable_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerQuote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannerQuote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannerQuote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerQuote_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Random = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerQuote_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceExportData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceExportData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceExportData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceExportData_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceExportData_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedData = append(m.ExportedData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExportedData == nil {
				m.ExportedData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalDatabaseState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalDatabaseState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalDatabaseState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicateFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicateFlag = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalConversationsState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalConversationsState = append(m.LocalConversationsState, &LocalConversationState{})
			if err := m.LocalConversationsState[len(m.LocalConversationsState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSharePushTokenFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoSharePushTokenFlag = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalConversationState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalConversationState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalConversationState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Conversation_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSearch_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeDate", wireType)
			}
			m.BeforeDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeforeDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterDate", wireType)
			}
			m.AfterDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefCID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefCID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldestToNewest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OldestToNewest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSearch_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &Interaction{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TyberHostSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TyberHostSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TyberHostSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TyberHostSearch_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TyberHostSearch_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4 = append(m.IPv4, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6 = append(m.IPv6, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TyberHostAttach) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TyberHostAttach: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TyberHostAttach: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TyberHostAttach_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TyberHostAttach_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetDeviceToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSetDeviceToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSetDeviceToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetDeviceToken_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receiver == nil {
				m.Receiver = &pushtypes.PushServiceReceiver{}
			}
			if err := m.Receiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetDeviceToken_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetAutoShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSetAutoShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSetAutoShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetAutoShare_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetAutoShare_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushReceivedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushReceivedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushReceivedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolData == nil {
				m.ProtocolData = &protocoltypes.OutOfStoreReceive_Reply{}
			}
			if err := m.ProtocolData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interaction == nil {
				m.Interaction = &Interaction{}
			}
			if err := m.Interaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlreadyReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlreadyReceived = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountMuted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AccountMuted = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationMuted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConversationMuted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HidePreview", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HidePreview = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushReceive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushReceive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushReceive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushReceive_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushReceive_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PushReceivedData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMemberDevices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMemberDevices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMemberDevices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMemberDevices_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMemberDevices_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &Device{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushShareTokenForConversation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushShareTokenForConversation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushShareTokenForConversation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushShareTokenForConversation_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushShareTokenForConversation_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushTokenSharedForConversation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushTokenSharedForConversation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushTokenSharedForConversation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushTokenSharedForConversation_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushTokenSharedForConversation_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &PushMemberToken{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryServiceRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryServiceRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceRegister_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofIssuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofIssuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			m.ExpirationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceRegister_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryRecordToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryRecordToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceUnregister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryServiceUnregister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryServiceUnregister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceUnregister_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryRecordToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryRecordToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceUnregister_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryServiceQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryServiceQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceQuery_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryServiceQuery_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedCredential", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifiedCredential = append(m.VerifiedCredential[:0], dAtA[iNdEx:postIndex]...)
			if m.VerifiedCredential == nil {
				m.VerifiedCredential = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushLocalDeviceSharedToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushLocalDeviceSharedToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushLocalDeviceSharedToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushMemberToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushMemberToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushMemberToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerKey = append(m.ServerKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerKey == nil {
				m.ServerKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushMemberTokenUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushMemberTokenUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushMemberTokenUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &PushServer{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberWithDevices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberWithDevices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberWithDevices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePKs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePKs = append(m.DevicePKs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSend_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = append(m.CID[:0], dAtA[iNdEx:postIndex]...)
			if m.CID == nil {
				m.CID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMembers = append(m.GroupMembers, &MemberWithDevices{})
			if err := m.GroupMembers[len(m.GroupMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSend_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMembers = append(m.GroupMembers, &MemberWithDevices{})
			if err := m.GroupMembers[len(m.GroupMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushShareToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushShareToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushShareToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushShareToken_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicePK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicePK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPK = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &PushServer{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receiver == nil {
				m.Receiver = &pushtypes.PushServiceReceiver{}
			}
			if err := m.Receiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushShareToken_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushSetServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushSetServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetServer_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &PushServer{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushSetServer_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthExchangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthExchangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthExchangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Services == nil {
				m.Services = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessengertypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessengertypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessengertypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessengertypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessengertypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessengertypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessengertypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessengertypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessengertypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Services[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesTokenCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesTokenCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesTokenCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessengertypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessengertypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessengertypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessengertypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessengertypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessengertypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessengertypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessengertypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessengertypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessengertypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessengertypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessengertypes = fmt.Errorf("proto: unexpected end of group")
)
