// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bertyverifiablecreds.proto

package verifiablecredstypes

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FlowType int32

const (
	FlowType_FlowTypeUndefined FlowType = 0
	// FlowTypeCode asks users a code sent on a side channel
	FlowType_FlowTypeCode FlowType = 1
	// FlowTypeAuth currently unimplemented
	FlowType_FlowTypeAuth FlowType = 2
	// FlowTypeProof currently unimplemented
	FlowType_FlowTypeProof FlowType = 3
)

var FlowType_name = map[int32]string{
	0: "FlowTypeUndefined",
	1: "FlowTypeCode",
	2: "FlowTypeAuth",
	3: "FlowTypeProof",
}

var FlowType_value = map[string]int32{
	"FlowTypeUndefined": 0,
	"FlowTypeCode":      1,
	"FlowTypeAuth":      2,
	"FlowTypeProof":     3,
}

func (x FlowType) String() string {
	return proto.EnumName(FlowType_name, int32(x))
}

func (FlowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{0}
}

type CodeStrategy int32

const (
	CodeStrategy_CodeStrategyUndefined CodeStrategy = 0
	// CodeStrategy6Digits currently unimplemented
	CodeStrategy_CodeStrategy6Digits CodeStrategy = 1
	// CodeStrategy10Chars currently unimplemented
	CodeStrategy_CodeStrategy10Chars CodeStrategy = 2
	// CodeStrategyMocked6Zeroes must only be used in testing
	CodeStrategy_CodeStrategyMocked6Zeroes CodeStrategy = 999
)

var CodeStrategy_name = map[int32]string{
	0:   "CodeStrategyUndefined",
	1:   "CodeStrategy6Digits",
	2:   "CodeStrategy10Chars",
	999: "CodeStrategyMocked6Zeroes",
}

var CodeStrategy_value = map[string]int32{
	"CodeStrategyUndefined":     0,
	"CodeStrategy6Digits":       1,
	"CodeStrategy10Chars":       2,
	"CodeStrategyMocked6Zeroes": 999,
}

func (x CodeStrategy) String() string {
	return proto.EnumName(CodeStrategy_name, int32(x))
}

func (CodeStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{1}
}

// StateChallenge serialized and signed state used when requesting a challenge
type StateChallenge struct {
	Timestamp            []byte   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce                []byte   `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BertyLink            string   `protobuf:"bytes,3,opt,name=berty_link,json=bertyLink,proto3" json:"berty_link,omitempty"`
	RedirectURI          string   `protobuf:"bytes,4,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	State                string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateChallenge) Reset()         { *m = StateChallenge{} }
func (m *StateChallenge) String() string { return proto.CompactTextString(m) }
func (*StateChallenge) ProtoMessage()    {}
func (*StateChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{0}
}
func (m *StateChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateChallenge.Merge(m, src)
}
func (m *StateChallenge) XXX_Size() int {
	return m.Size()
}
func (m *StateChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_StateChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_StateChallenge proto.InternalMessageInfo

func (m *StateChallenge) GetTimestamp() []byte {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *StateChallenge) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *StateChallenge) GetBertyLink() string {
	if m != nil {
		return m.BertyLink
	}
	return ""
}

func (m *StateChallenge) GetRedirectURI() string {
	if m != nil {
		return m.RedirectURI
	}
	return ""
}

func (m *StateChallenge) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

// StateCode serialized and signed state used when requesting a code
type StateCode struct {
	Timestamp            []byte       `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BertyLink            string       `protobuf:"bytes,2,opt,name=berty_link,json=bertyLink,proto3" json:"berty_link,omitempty"`
	CodeStrategy         CodeStrategy `protobuf:"varint,3,opt,name=code_strategy,json=codeStrategy,proto3,enum=berty.account.v1.CodeStrategy" json:"code_strategy,omitempty"`
	Identifier           string       `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Code                 string       `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	RedirectURI          string       `protobuf:"bytes,6,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	State                string       `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StateCode) Reset()         { *m = StateCode{} }
func (m *StateCode) String() string { return proto.CompactTextString(m) }
func (*StateCode) ProtoMessage()    {}
func (*StateCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{1}
}
func (m *StateCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateCode.Merge(m, src)
}
func (m *StateCode) XXX_Size() int {
	return m.Size()
}
func (m *StateCode) XXX_DiscardUnknown() {
	xxx_messageInfo_StateCode.DiscardUnknown(m)
}

var xxx_messageInfo_StateCode proto.InternalMessageInfo

func (m *StateCode) GetTimestamp() []byte {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *StateCode) GetBertyLink() string {
	if m != nil {
		return m.BertyLink
	}
	return ""
}

func (m *StateCode) GetCodeStrategy() CodeStrategy {
	if m != nil {
		return m.CodeStrategy
	}
	return CodeStrategy_CodeStrategyUndefined
}

func (m *StateCode) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *StateCode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *StateCode) GetRedirectURI() string {
	if m != nil {
		return m.RedirectURI
	}
	return ""
}

func (m *StateCode) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type AccountCryptoChallenge struct {
	Challenge            string   `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountCryptoChallenge) Reset()         { *m = AccountCryptoChallenge{} }
func (m *AccountCryptoChallenge) String() string { return proto.CompactTextString(m) }
func (*AccountCryptoChallenge) ProtoMessage()    {}
func (*AccountCryptoChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{2}
}
func (m *AccountCryptoChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountCryptoChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountCryptoChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountCryptoChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountCryptoChallenge.Merge(m, src)
}
func (m *AccountCryptoChallenge) XXX_Size() int {
	return m.Size()
}
func (m *AccountCryptoChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountCryptoChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_AccountCryptoChallenge proto.InternalMessageInfo

func (m *AccountCryptoChallenge) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

type SendVerificationCode struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendVerificationCode) Reset()         { *m = SendVerificationCode{} }
func (m *SendVerificationCode) String() string { return proto.CompactTextString(m) }
func (*SendVerificationCode) ProtoMessage()    {}
func (*SendVerificationCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{3}
}
func (m *SendVerificationCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendVerificationCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendVerificationCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendVerificationCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendVerificationCode.Merge(m, src)
}
func (m *SendVerificationCode) XXX_Size() int {
	return m.Size()
}
func (m *SendVerificationCode) XXX_DiscardUnknown() {
	xxx_messageInfo_SendVerificationCode.DiscardUnknown(m)
}

var xxx_messageInfo_SendVerificationCode proto.InternalMessageInfo

type SendVerificationCode_Request struct {
	Recipient            string   `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	NetworkContext       string   `protobuf:"bytes,3,opt,name=network_context,json=networkContext,proto3" json:"network_context,omitempty"`
	Context              string   `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendVerificationCode_Request) Reset()         { *m = SendVerificationCode_Request{} }
func (m *SendVerificationCode_Request) String() string { return proto.CompactTextString(m) }
func (*SendVerificationCode_Request) ProtoMessage()    {}
func (*SendVerificationCode_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{3, 0}
}
func (m *SendVerificationCode_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendVerificationCode_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendVerificationCode_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendVerificationCode_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendVerificationCode_Request.Merge(m, src)
}
func (m *SendVerificationCode_Request) XXX_Size() int {
	return m.Size()
}
func (m *SendVerificationCode_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_SendVerificationCode_Request.DiscardUnknown(m)
}

var xxx_messageInfo_SendVerificationCode_Request proto.InternalMessageInfo

func (m *SendVerificationCode_Request) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *SendVerificationCode_Request) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *SendVerificationCode_Request) GetNetworkContext() string {
	if m != nil {
		return m.NetworkContext
	}
	return ""
}

func (m *SendVerificationCode_Request) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

type SendVerificationCode_Reply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendVerificationCode_Reply) Reset()         { *m = SendVerificationCode_Reply{} }
func (m *SendVerificationCode_Reply) String() string { return proto.CompactTextString(m) }
func (*SendVerificationCode_Reply) ProtoMessage()    {}
func (*SendVerificationCode_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{3, 1}
}
func (m *SendVerificationCode_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendVerificationCode_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendVerificationCode_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendVerificationCode_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendVerificationCode_Reply.Merge(m, src)
}
func (m *SendVerificationCode_Reply) XXX_Size() int {
	return m.Size()
}
func (m *SendVerificationCode_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendVerificationCode_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_SendVerificationCode_Reply proto.InternalMessageInfo

type ValidateIdentifier struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateIdentifier) Reset()         { *m = ValidateIdentifier{} }
func (m *ValidateIdentifier) String() string { return proto.CompactTextString(m) }
func (*ValidateIdentifier) ProtoMessage()    {}
func (*ValidateIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{4}
}
func (m *ValidateIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateIdentifier.Merge(m, src)
}
func (m *ValidateIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *ValidateIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateIdentifier proto.InternalMessageInfo

type ValidateIdentifier_Request struct {
	Identifier           string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateIdentifier_Request) Reset()         { *m = ValidateIdentifier_Request{} }
func (m *ValidateIdentifier_Request) String() string { return proto.CompactTextString(m) }
func (*ValidateIdentifier_Request) ProtoMessage()    {}
func (*ValidateIdentifier_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{4, 0}
}
func (m *ValidateIdentifier_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateIdentifier_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateIdentifier_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateIdentifier_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateIdentifier_Request.Merge(m, src)
}
func (m *ValidateIdentifier_Request) XXX_Size() int {
	return m.Size()
}
func (m *ValidateIdentifier_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateIdentifier_Request.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateIdentifier_Request proto.InternalMessageInfo

func (m *ValidateIdentifier_Request) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type ValidateIdentifier_Reply struct {
	Sanitized            string   `protobuf:"bytes,1,opt,name=sanitized,proto3" json:"sanitized,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateIdentifier_Reply) Reset()         { *m = ValidateIdentifier_Reply{} }
func (m *ValidateIdentifier_Reply) String() string { return proto.CompactTextString(m) }
func (*ValidateIdentifier_Reply) ProtoMessage()    {}
func (*ValidateIdentifier_Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7caa6e71b2153f26, []int{4, 1}
}
func (m *ValidateIdentifier_Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateIdentifier_Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateIdentifier_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateIdentifier_Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateIdentifier_Reply.Merge(m, src)
}
func (m *ValidateIdentifier_Reply) XXX_Size() int {
	return m.Size()
}
func (m *ValidateIdentifier_Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateIdentifier_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateIdentifier_Reply proto.InternalMessageInfo

func (m *ValidateIdentifier_Reply) GetSanitized() string {
	if m != nil {
		return m.Sanitized
	}
	return ""
}

func init() {
	proto.RegisterEnum("berty.account.v1.FlowType", FlowType_name, FlowType_value)
	proto.RegisterEnum("berty.account.v1.CodeStrategy", CodeStrategy_name, CodeStrategy_value)
	proto.RegisterType((*StateChallenge)(nil), "berty.account.v1.StateChallenge")
	proto.RegisterType((*StateCode)(nil), "berty.account.v1.StateCode")
	proto.RegisterType((*AccountCryptoChallenge)(nil), "berty.account.v1.AccountCryptoChallenge")
	proto.RegisterType((*SendVerificationCode)(nil), "berty.account.v1.SendVerificationCode")
	proto.RegisterType((*SendVerificationCode_Request)(nil), "berty.account.v1.SendVerificationCode.Request")
	proto.RegisterType((*SendVerificationCode_Reply)(nil), "berty.account.v1.SendVerificationCode.Reply")
	proto.RegisterType((*ValidateIdentifier)(nil), "berty.account.v1.ValidateIdentifier")
	proto.RegisterType((*ValidateIdentifier_Request)(nil), "berty.account.v1.ValidateIdentifier.Request")
	proto.RegisterType((*ValidateIdentifier_Reply)(nil), "berty.account.v1.ValidateIdentifier.Reply")
}

func init() { proto.RegisterFile("bertyverifiablecreds.proto", fileDescriptor_7caa6e71b2153f26) }

var fileDescriptor_7caa6e71b2153f26 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xfe, 0x39, 0xfd, 0x93, 0x5f, 0xa6, 0x69, 0xeb, 0x2e, 0x2d, 0xa4, 0x16, 0x98, 0x2a, 0x12,
	0xa2, 0x54, 0x28, 0xa1, 0x45, 0xea, 0x81, 0x5b, 0x1b, 0x84, 0x54, 0x09, 0x24, 0xe4, 0xd2, 0x0a,
	0xf5, 0x12, 0xb9, 0xeb, 0x89, 0xb3, 0x8a, 0xbb, 0x6b, 0xd6, 0x93, 0x16, 0x83, 0xc4, 0x0b, 0xf0,
	0x10, 0x3c, 0x01, 0xef, 0xc1, 0x91, 0x27, 0x40, 0x28, 0x17, 0x5e, 0x03, 0x79, 0x6d, 0xa7, 0x6e,
	0x38, 0x20, 0x6e, 0x33, 0xdf, 0x8c, 0x66, 0xbe, 0xef, 0xdb, 0xd1, 0x82, 0x73, 0x8e, 0x9a, 0xd2,
	0x4b, 0xd4, 0x62, 0x20, 0xfc, 0xf3, 0x08, 0xb9, 0xc6, 0x20, 0xe9, 0xc4, 0x5a, 0x91, 0x62, 0xb6,
	0xa9, 0x75, 0x7c, 0xce, 0xd5, 0x58, 0x52, 0xe7, 0x72, 0xd7, 0x59, 0x0f, 0x55, 0xa8, 0x4c, 0xb1,
	0x9b, 0x45, 0x79, 0x5f, 0xfb, 0xab, 0x05, 0x2b, 0xc7, 0xe4, 0x13, 0xf6, 0x86, 0x7e, 0x14, 0xa1,
	0x0c, 0x91, 0xdd, 0x85, 0x06, 0x89, 0x0b, 0x4c, 0xc8, 0xbf, 0x88, 0x5b, 0xd6, 0x96, 0xb5, 0xdd,
	0xf4, 0xae, 0x01, 0xb6, 0x0e, 0x0b, 0x52, 0x49, 0x8e, 0xad, 0x9a, 0xa9, 0xe4, 0x09, 0xbb, 0x07,
	0x60, 0x16, 0xf6, 0x23, 0x21, 0x47, 0xad, 0xb9, 0x2d, 0x6b, 0xbb, 0xe1, 0x35, 0x0c, 0xf2, 0x52,
	0xc8, 0x11, 0xdb, 0x83, 0xa6, 0xc6, 0x40, 0x68, 0xe4, 0xd4, 0x1f, 0x6b, 0xd1, 0x9a, 0xcf, 0x1a,
	0x0e, 0x57, 0x27, 0x3f, 0xee, 0x2f, 0x79, 0x05, 0x7e, 0xe2, 0x1d, 0x79, 0x4b, 0x65, 0xd3, 0x89,
	0x16, 0xd9, 0xa2, 0x24, 0x23, 0xd6, 0x5a, 0x30, 0xd3, 0xf2, 0xa4, 0xfd, 0xb9, 0x06, 0x8d, 0x9c,
	0xaf, 0x0a, 0xfe, 0x46, 0xf5, 0x26, 0xa9, 0xda, 0x2c, 0xa9, 0x1e, 0x2c, 0x73, 0x15, 0x60, 0x3f,
	0x21, 0xed, 0x13, 0x86, 0xa9, 0xa1, 0xbd, 0xb2, 0xe7, 0x76, 0x66, 0xad, 0xeb, 0x64, 0xbb, 0x8e,
	0x8b, 0x2e, 0xaf, 0xc9, 0x2b, 0x19, 0x73, 0x01, 0x44, 0x80, 0x92, 0xc4, 0x40, 0xa0, 0xce, 0x75,
	0x79, 0x15, 0x84, 0x31, 0x98, 0xcf, 0xfa, 0x0b, 0x11, 0x26, 0xfe, 0xc3, 0x8d, 0xc5, 0x7f, 0x71,
	0xa3, 0x5e, 0x75, 0x63, 0x1f, 0x6e, 0x1f, 0xe4, 0x34, 0x7b, 0x3a, 0x8d, 0x49, 0xdd, 0x78, 0x44,
	0x5e, 0x26, 0xc6, 0x99, 0x86, 0x77, 0x0d, 0xb4, 0xbf, 0x58, 0xb0, 0x7e, 0x8c, 0x32, 0x38, 0x35,
	0xb7, 0xc3, 0x7d, 0x12, 0x4a, 0x66, 0x22, 0x9d, 0x4f, 0x50, 0xf7, 0xf0, 0xdd, 0x18, 0x13, 0xca,
	0x26, 0x68, 0xe4, 0x22, 0x16, 0x28, 0xa9, 0x9c, 0x30, 0x05, 0xa6, 0xba, 0x6a, 0x15, 0x5d, 0x0f,
	0x61, 0x55, 0x22, 0x5d, 0x29, 0x3d, 0xea, 0x73, 0x25, 0x09, 0xdf, 0x53, 0x71, 0x09, 0x2b, 0x05,
	0xdc, 0xcb, 0x51, 0xd6, 0x82, 0x7a, 0xd9, 0x90, 0x3b, 0x56, 0xa6, 0x4e, 0x1d, 0x16, 0x3c, 0x8c,
	0xa3, 0xb4, 0x3d, 0x00, 0x76, 0xea, 0x47, 0x22, 0xf0, 0x09, 0x8f, 0xa6, 0x6e, 0x3a, 0x8f, 0xae,
	0xe9, 0xdd, 0x34, 0xde, 0x9a, 0x35, 0xde, 0x79, 0x50, 0x4c, 0xca, 0x74, 0x24, 0xbe, 0x14, 0x24,
	0x3e, 0x60, 0x50, 0xea, 0x98, 0x02, 0x3b, 0x6f, 0xe1, 0xff, 0x17, 0x91, 0xba, 0x7a, 0x93, 0xc6,
	0xc8, 0x36, 0x60, 0xad, 0x8c, 0x4f, 0x64, 0x80, 0x03, 0x21, 0x31, 0xb0, 0xff, 0x63, 0x36, 0x34,
	0x4b, 0x38, 0xf3, 0xc8, 0xb6, 0xaa, 0xc8, 0xc1, 0x98, 0x86, 0x76, 0x8d, 0xad, 0xc1, 0x72, 0x89,
	0xbc, 0xd6, 0x4a, 0x0d, 0xec, 0xb9, 0x9d, 0x8f, 0xd0, 0xac, 0xde, 0x0d, 0xdb, 0x84, 0x8d, 0x6a,
	0x5e, 0xdd, 0x70, 0x07, 0x6e, 0x55, 0x4b, 0xfb, 0xcf, 0x45, 0x28, 0x28, 0xb1, 0xad, 0xd9, 0xc2,
	0xee, 0x93, 0xde, 0xd0, 0xd7, 0x89, 0x5d, 0x63, 0x2e, 0x6c, 0x56, 0x0b, 0xaf, 0x14, 0x1f, 0x61,
	0xb0, 0x7f, 0x86, 0x5a, 0x61, 0x62, 0xff, 0xaa, 0x1f, 0x3e, 0xfb, 0x36, 0x71, 0xad, 0xef, 0x13,
	0xd7, 0xfa, 0x39, 0x71, 0xad, 0xb3, 0xc7, 0xf9, 0x45, 0x13, 0xf2, 0x61, 0xd7, 0x84, 0xdd, 0x50,
	0x75, 0xe3, 0x51, 0xd8, 0x9d, 0xf9, 0x3b, 0x28, 0x8d, 0x31, 0x39, 0x5f, 0x34, 0x3f, 0xc3, 0xd3,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x35, 0xf9, 0x58, 0x5f, 0x04, 0x00, 0x00,
}

func (m *StateChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RedirectURI) > 0 {
		i -= len(m.RedirectURI)
		copy(dAtA[i:], m.RedirectURI)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.RedirectURI)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BertyLink) > 0 {
		i -= len(m.BertyLink)
		copy(dAtA[i:], m.BertyLink)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.BertyLink)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RedirectURI) > 0 {
		i -= len(m.RedirectURI)
		copy(dAtA[i:], m.RedirectURI)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.RedirectURI)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x22
	}
	if m.CodeStrategy != 0 {
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(m.CodeStrategy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BertyLink) > 0 {
		i -= len(m.BertyLink)
		copy(dAtA[i:], m.BertyLink)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.BertyLink)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountCryptoChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountCryptoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountCryptoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendVerificationCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendVerificationCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendVerificationCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SendVerificationCode_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendVerificationCode_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendVerificationCode_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NetworkContext) > 0 {
		i -= len(m.NetworkContext)
		copy(dAtA[i:], m.NetworkContext)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.NetworkContext)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendVerificationCode_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendVerificationCode_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendVerificationCode_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ValidateIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ValidateIdentifier_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateIdentifier_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateIdentifier_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateIdentifier_Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateIdentifier_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateIdentifier_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sanitized) > 0 {
		i -= len(m.Sanitized)
		copy(dAtA[i:], m.Sanitized)
		i = encodeVarintBertyverifiablecreds(dAtA, i, uint64(len(m.Sanitized)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBertyverifiablecreds(dAtA []byte, offset int, v uint64) int {
	offset -= sovBertyverifiablecreds(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StateChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.BertyLink)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.RedirectURI)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.BertyLink)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	if m.CodeStrategy != 0 {
		n += 1 + sovBertyverifiablecreds(uint64(m.CodeStrategy))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.RedirectURI)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountCryptoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendVerificationCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendVerificationCode_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.NetworkContext)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendVerificationCode_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateIdentifier_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateIdentifier_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sanitized)
	if l > 0 {
		n += 1 + l + sovBertyverifiablecreds(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBertyverifiablecreds(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBertyverifiablecreds(x uint64) (n int) {
	return sovBertyverifiablecreds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StateChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = append(m.Timestamp[:0], dAtA[iNdEx:postIndex]...)
			if m.Timestamp == nil {
				m.Timestamp = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BertyLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BertyLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = append(m.Timestamp[:0], dAtA[iNdEx:postIndex]...)
			if m.Timestamp == nil {
				m.Timestamp = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BertyLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BertyLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeStrategy", wireType)
			}
			m.CodeStrategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeStrategy |= CodeStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountCryptoChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountCryptoChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountCryptoChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendVerificationCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendVerificationCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendVerificationCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendVerificationCode_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkContext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkContext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendVerificationCode_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateIdentifier_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateIdentifier_Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sanitized", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sanitized = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertyverifiablecreds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBertyverifiablecreds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBertyverifiablecreds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBertyverifiablecreds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBertyverifiablecreds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBertyverifiablecreds
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBertyverifiablecreds
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBertyverifiablecreds
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBertyverifiablecreds        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBertyverifiablecreds          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBertyverifiablecreds = fmt.Errorf("proto: unexpected end of group")
)
