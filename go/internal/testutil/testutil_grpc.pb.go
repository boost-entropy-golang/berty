// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: go-internal/testutil.proto

package testutil

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestService_EchoTest_FullMethodName       = "/testutil.TestService/EchoTest"
	TestService_EchoStreamTest_FullMethodName = "/testutil.TestService/EchoStreamTest"
	TestService_EchoDuplexTest_FullMethodName = "/testutil.TestService/EchoDuplexTest"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	// use to test unary
	EchoTest(ctx context.Context, in *EchoTest_Request, opts ...grpc.CallOption) (*EchoTest_Reply, error)
	// Use to test stream.
	EchoStreamTest(ctx context.Context, in *EchoStreamTest_Request, opts ...grpc.CallOption) (TestService_EchoStreamTestClient, error)
	// Use to test duplex stream.
	EchoDuplexTest(ctx context.Context, opts ...grpc.CallOption) (TestService_EchoDuplexTestClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) EchoTest(ctx context.Context, in *EchoTest_Request, opts ...grpc.CallOption) (*EchoTest_Reply, error) {
	out := new(EchoTest_Reply)
	err := c.cc.Invoke(ctx, TestService_EchoTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) EchoStreamTest(ctx context.Context, in *EchoStreamTest_Request, opts ...grpc.CallOption) (TestService_EchoStreamTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_EchoStreamTest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceEchoStreamTestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_EchoStreamTestClient interface {
	Recv() (*EchoStreamTest_Reply, error)
	grpc.ClientStream
}

type testServiceEchoStreamTestClient struct {
	grpc.ClientStream
}

func (x *testServiceEchoStreamTestClient) Recv() (*EchoStreamTest_Reply, error) {
	m := new(EchoStreamTest_Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) EchoDuplexTest(ctx context.Context, opts ...grpc.CallOption) (TestService_EchoDuplexTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], TestService_EchoDuplexTest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceEchoDuplexTestClient{stream}
	return x, nil
}

type TestService_EchoDuplexTestClient interface {
	Send(*EchoDuplexTest_Request) error
	Recv() (*EchoDuplexTest_Reply, error)
	grpc.ClientStream
}

type testServiceEchoDuplexTestClient struct {
	grpc.ClientStream
}

func (x *testServiceEchoDuplexTestClient) Send(m *EchoDuplexTest_Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceEchoDuplexTestClient) Recv() (*EchoDuplexTest_Reply, error) {
	m := new(EchoDuplexTest_Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	// use to test unary
	EchoTest(context.Context, *EchoTest_Request) (*EchoTest_Reply, error)
	// Use to test stream.
	EchoStreamTest(*EchoStreamTest_Request, TestService_EchoStreamTestServer) error
	// Use to test duplex stream.
	EchoDuplexTest(TestService_EchoDuplexTestServer) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) EchoTest(context.Context, *EchoTest_Request) (*EchoTest_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoTest not implemented")
}
func (UnimplementedTestServiceServer) EchoStreamTest(*EchoStreamTest_Request, TestService_EchoStreamTestServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoStreamTest not implemented")
}
func (UnimplementedTestServiceServer) EchoDuplexTest(TestService_EchoDuplexTestServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoDuplexTest not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_EchoTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoTest_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).EchoTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_EchoTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).EchoTest(ctx, req.(*EchoTest_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_EchoStreamTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoStreamTest_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).EchoStreamTest(m, &testServiceEchoStreamTestServer{stream})
}

type TestService_EchoStreamTestServer interface {
	Send(*EchoStreamTest_Reply) error
	grpc.ServerStream
}

type testServiceEchoStreamTestServer struct {
	grpc.ServerStream
}

func (x *testServiceEchoStreamTestServer) Send(m *EchoStreamTest_Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_EchoDuplexTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).EchoDuplexTest(&testServiceEchoDuplexTestServer{stream})
}

type TestService_EchoDuplexTestServer interface {
	Send(*EchoDuplexTest_Reply) error
	Recv() (*EchoDuplexTest_Request, error)
	grpc.ServerStream
}

type testServiceEchoDuplexTestServer struct {
	grpc.ServerStream
}

func (x *testServiceEchoDuplexTestServer) Send(m *EchoDuplexTest_Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceEchoDuplexTestServer) Recv() (*EchoDuplexTest_Request, error) {
	m := new(EchoDuplexTest_Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testutil.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoTest",
			Handler:    _TestService_EchoTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoStreamTest",
			Handler:       _TestService_EchoStreamTest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoDuplexTest",
			Handler:       _TestService_EchoDuplexTest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "go-internal/testutil.proto",
}
